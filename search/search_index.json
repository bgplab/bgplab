{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Open-Source BGP Configuration Labs This series of BGP hands-on labs will help you master numerous aspects of EBGP, IBGP, and BGP routing policy configuration on a platform of your choice 1 , including: Arista EOS Aruba AOS-CX Cisco ASAv, IOSv, IOS XE, IOS XR and Nexus OS Cumulus Linux and FRR Dell OS10 Juniper vSRX, vMX and vPTX Mikrotik RouterOS Nokia SR OS and SR Linux Vyatta VyOS Dozens of labs are already waiting for you (with more coming soon ), but if this is your first visit to this site, you should start with the Installation and Setup documentation or run BGP labs in GitHub codespaces . Deploy BGP in Your Network In the first set of the BGP labs, you\u2019ll master these skills: Configure and monitor routing daemons on Cumulus Linux and FRRouting Configure BGP sessions and advertise IPv4 and IPv6 prefixes Protect BGP sessions Run BGP in networks with more than one BGP router Manipulate BGP AS numbers or AS paths with nerd knobs like as-override and local-as Implement load balancing within an autonomous system and across EBGP neighbors Configure advanced BGP features like BFD or BGP route aggregation. BGP Routing Policies These lab exercises will help you master the basic tools you can use to build BGP routing policies that will: Filter BGP Updates Adjust Outgoing Traffic Flow Influence Incoming Traffic Flow Once you mastered the basics, continue with more complex routing policies . Challenge Labs Mastered the fundamentals and the nerd knobs? Want to tickle your gray cells? Try out the challenge labs: BGP Graceful Shutdown Stop the Propagation of Configuration Errors Merge Networks Using Different BGP AS Numbers Minimize the Forwarding Table on BGP Routers Implement BGP-Free Core in a Transit Network Recent Labs These are the most recent labs added to the BGP Labs project: Passive BGP Sessions IBGP Load Balancing with BGP Additional Paths Running EBGP Across a Firewall Use Disaggregated Prefixes to Select the Primary Link Use Outbound Route Filters (ORF) for IP Prefixes Some assembly required: the virtual machines or containers that we recommend to use as external BGP speakers are easy to download, but you\u2019ll have to build a Vagrant box or install a vendor-supplied Vagrant box or Docker container image for most other platforms. See installation and setup for details. \u21a9","title":"Labs Overview"},{"location":"#open-source-bgp-configuration-labs","text":"This series of BGP hands-on labs will help you master numerous aspects of EBGP, IBGP, and BGP routing policy configuration on a platform of your choice 1 , including: Arista EOS Aruba AOS-CX Cisco ASAv, IOSv, IOS XE, IOS XR and Nexus OS Cumulus Linux and FRR Dell OS10 Juniper vSRX, vMX and vPTX Mikrotik RouterOS Nokia SR OS and SR Linux Vyatta VyOS Dozens of labs are already waiting for you (with more coming soon ), but if this is your first visit to this site, you should start with the Installation and Setup documentation or run BGP labs in GitHub codespaces .","title":"Open-Source BGP Configuration Labs"},{"location":"#deploy-bgp-in-your-network","text":"In the first set of the BGP labs, you\u2019ll master these skills: Configure and monitor routing daemons on Cumulus Linux and FRRouting Configure BGP sessions and advertise IPv4 and IPv6 prefixes Protect BGP sessions Run BGP in networks with more than one BGP router Manipulate BGP AS numbers or AS paths with nerd knobs like as-override and local-as Implement load balancing within an autonomous system and across EBGP neighbors Configure advanced BGP features like BFD or BGP route aggregation.","title":"Deploy BGP in Your Network"},{"location":"#policy","text":"These lab exercises will help you master the basic tools you can use to build BGP routing policies that will: Filter BGP Updates Adjust Outgoing Traffic Flow Influence Incoming Traffic Flow Once you mastered the basics, continue with more complex routing policies .","title":"BGP Routing Policies"},{"location":"#challenge-labs","text":"Mastered the fundamentals and the nerd knobs? Want to tickle your gray cells? Try out the challenge labs: BGP Graceful Shutdown Stop the Propagation of Configuration Errors Merge Networks Using Different BGP AS Numbers Minimize the Forwarding Table on BGP Routers Implement BGP-Free Core in a Transit Network","title":"Challenge Labs"},{"location":"#recent-labs","text":"These are the most recent labs added to the BGP Labs project: Passive BGP Sessions IBGP Load Balancing with BGP Additional Paths Running EBGP Across a Firewall Use Disaggregated Prefixes to Select the Primary Link Use Outbound Route Filters (ORF) for IP Prefixes Some assembly required: the virtual machines or containers that we recommend to use as external BGP speakers are easy to download, but you\u2019ll have to build a Vagrant box or install a vendor-supplied Vagrant box or Docker container image for most other platforms. See installation and setup for details. \u21a9","title":"Recent Labs"},{"location":"1-setup/","text":"Software Installation and Lab Setup It\u2019s easiest to use the BGP labs with netlab . Still, you can use most of them (potentially with slightly reduced functionality) with any other virtual lab environment or on physical gear. For the rest of this document, we\u2019ll assume you decided to use netlab ; if you want to set up your lab in some other way, read the Manual Setup document. Warning BGP labs work best with netlab release 1.8.3 or later. If you\u2019re using an earlier netlab release, please upgrade with pip3 install --upgrade networklab . Select the Network Devices You Will Work With Cumulus Linux and FRRouting devices can be run in all netlab -supported virtualization environments (VirtualBox, libvirt, or Docker), and if you want to start practicing BGP with minimum hassle, consider using it for all lab devices. Use FRR on the ARM CPU (for example, Macbooks with Apple silicon ). If you\u2019d like to use a more traditional networking device, use any other netlab -supported device for which we implemented basic BGP configuration as the device to practice with 1 . I recommend Arista cEOS or Nokia SR Linux containers; they are the easiest ones to install and use. Tip You must use container-based network devices like Arista cEOS, Cumulus Linux, FRR, Nokia SR Linux, or Vyos if you plan to run the BGP labs in GitHub Codespaces . Select the Additional Devices in Your Lab The labs heavily rely on external BGP feeds \u2013 preconfigured devices with which your routers exchange routing information. You won\u2019t configure those devices, but you might have to log into them and execute show commands. Use Cumulus Linux on those devices with netlab releases older than 1.6.4. With release 1.6.4 (and later), you can choose any one of these devices for your external BGP feeds 4 : Environment Devices that can be used as external BGP feeds 2 Recommended Containers (clab) Arista EOS, Aruba AOS-CX, Cumulus Linux, FRR, Nokia SR Linux 3 FRR ( frr ) 5 Virtual machines (libvirt) Arista EOS, Aruba AOS-CX, Cisco IOSv, Cisco IOS-XE, Cumulus Linux, FRR Cumulus Linux ( cumulus ) 6 Virtual machines (Virtualbox) Arista EOS, Cisco IOSv, Cisco IOS-XE, Cumulus Linux, FRR Cumulus Linux ( cumulus ) ARM (Apple) CPU FRR containers FRR ( frr ) Tip Several more complex labs require additional configuration on the external routers. That configuration is usually available for Arista EOS, Cumulus Linux, and FRR. Each lab description contains specific device requirements section. Consult those if you want to use less-popular devices in your labs. Select the Virtualization Environment Now that you know which network device to use, check which virtualization environment you can use. I would prefer containerlab over libvirt with virtualbox being a distant third, but that\u2019s just me. Tip You can also run the BGP labs in a free GitHub Codespace . A gotcha: You can use virtualbox if you want to run the lab devices as virtual machines on your Windows- or MacOS laptop with Intel CPU, but even then, I\u2019d prefer running them in a Ubuntu VM . One more gotcha: your hardware and virtualization software (for example, VirtualBox or VMware Fusion) must support nested virtualization if you want to use libvirt on that Ubuntu VM. You don\u2019t need nested virtualization to run Docker containers unless you\u2019re using the crazy trick we\u2019re forced to use for Aruba AOS-CX, Juniper vMX, or Nokia SR OS \u2013 they\u2019re running as a virtual machine within a container . Software Installation Based on the choices you made, you\u2019ll find the installation instructions in one of these documents: Using GitHub Codespaces Ubuntu VM Installation on Windows or MacOS Ubuntu Server Installation Running netlab on any other Linux Server Running netlab in a Public Cloud Running netlab on Apple silicon Discouraged: Virtualbox-Based Lab on Windows or MacOS Once you have completed the software installation you have to deal with the stupidities of downloading and installing network device images ( Virtualbox , libvirt , containers ) unless you decided to use Cumulus Linux, FRR, Nokia SR Linux, or Vyos. I would love to simplify the process, but the networking vendors refuse to play along. Even worse, their licenses prohibit me from downloading the images and creating a packaged VM with preinstalled network devices for you 7 . Fortunately, you only have to go through this colossal waste of time once. Setting Up the Labs We finally got to the fun part \u2013 setting up the labs. If you\u2019re not using GitHub Codespaces: Select a directory where you want to have the BGP labs Clone the bgplab GitHub repository with git clone https://github.com/bgplab/bgplab.git . GitHub UI gives you other options in the green Code button, including Download ZIP After you get a local copy of the repository: If needed, edit the defaults.yml file in the top directory to set your preferred network device and virtualization environment. For example, I\u2019m using the following settings to run the labs with Arista EOS containers while using FRR as the external BGP feeds: device: eos # Change to your preferred network device provider: clab # Change to virtualbox or libvirt if needed groups: external: device: frr # Change to your preferred external router In a terminal window, change the current directory to one of the lab directories (for example, basic/1-session ), and execute netlab up . Wait for the lab to start and use netlab connect to connect to individual lab devices Have fun. When you\u2019re done, collect the device configurations with netlab collect (if you want to save them) and shut down the lab with netlab down Change the current directory to another lab directory and repeat. Once you run out of lab exercises, create a new one and contribute it with a pull request ;) You will have to run the labs on a device with an x86 CPU (Intel or AMD). \u21a9 You can only use devices supported by bgp.session and bgp.policy netlab plugins as external BGP feeds. \u21a9 You need netlab release 1.6.4-post2 or later to use Nokia SR Linux as additional routers in more complex labs. To configure Nokia SR Linux, you must also install additional software . \u21a9 If you\u2019d like to use other devices as external BGP feeds and are willing to contribute your changes, please add the support for your devices to bgp.session and bgp.policy plugins. Thank you! \u21a9 An FRR container starts slightly faster than a Cumulus Linux container. Also, the FRR containers are built by the FRR project, while the Cumulus Linux containers came from a hobby project of their former employee. \u21a9 There is no official FRR virtual machine image \u2013 netlab has to download and install FRR on a Ubuntu VM whenever you start an frr node as a virtual machine. Using Cumulus Linux Vagrant box is faster and consumes way less bandwidth. \u21a9 I\u2019m not going to pay a lawyer to read their boilerplate stuff, and I\u2019m definitely not going to rely on my amateur understanding of US copyright law. \u21a9","title":"Installation and Setup"},{"location":"1-setup/#software-installation-and-lab-setup","text":"It\u2019s easiest to use the BGP labs with netlab . Still, you can use most of them (potentially with slightly reduced functionality) with any other virtual lab environment or on physical gear. For the rest of this document, we\u2019ll assume you decided to use netlab ; if you want to set up your lab in some other way, read the Manual Setup document. Warning BGP labs work best with netlab release 1.8.3 or later. If you\u2019re using an earlier netlab release, please upgrade with pip3 install --upgrade networklab .","title":"Software Installation and Lab Setup"},{"location":"1-setup/#select-the-network-devices-you-will-work-with","text":"Cumulus Linux and FRRouting devices can be run in all netlab -supported virtualization environments (VirtualBox, libvirt, or Docker), and if you want to start practicing BGP with minimum hassle, consider using it for all lab devices. Use FRR on the ARM CPU (for example, Macbooks with Apple silicon ). If you\u2019d like to use a more traditional networking device, use any other netlab -supported device for which we implemented basic BGP configuration as the device to practice with 1 . I recommend Arista cEOS or Nokia SR Linux containers; they are the easiest ones to install and use. Tip You must use container-based network devices like Arista cEOS, Cumulus Linux, FRR, Nokia SR Linux, or Vyos if you plan to run the BGP labs in GitHub Codespaces .","title":"Select the Network Devices You Will Work With"},{"location":"1-setup/#select-the-additional-devices-in-your-lab","text":"The labs heavily rely on external BGP feeds \u2013 preconfigured devices with which your routers exchange routing information. You won\u2019t configure those devices, but you might have to log into them and execute show commands. Use Cumulus Linux on those devices with netlab releases older than 1.6.4. With release 1.6.4 (and later), you can choose any one of these devices for your external BGP feeds 4 : Environment Devices that can be used as external BGP feeds 2 Recommended Containers (clab) Arista EOS, Aruba AOS-CX, Cumulus Linux, FRR, Nokia SR Linux 3 FRR ( frr ) 5 Virtual machines (libvirt) Arista EOS, Aruba AOS-CX, Cisco IOSv, Cisco IOS-XE, Cumulus Linux, FRR Cumulus Linux ( cumulus ) 6 Virtual machines (Virtualbox) Arista EOS, Cisco IOSv, Cisco IOS-XE, Cumulus Linux, FRR Cumulus Linux ( cumulus ) ARM (Apple) CPU FRR containers FRR ( frr ) Tip Several more complex labs require additional configuration on the external routers. That configuration is usually available for Arista EOS, Cumulus Linux, and FRR. Each lab description contains specific device requirements section. Consult those if you want to use less-popular devices in your labs.","title":"Select the Additional Devices in Your Lab"},{"location":"1-setup/#select-the-virtualization-environment","text":"Now that you know which network device to use, check which virtualization environment you can use. I would prefer containerlab over libvirt with virtualbox being a distant third, but that\u2019s just me. Tip You can also run the BGP labs in a free GitHub Codespace . A gotcha: You can use virtualbox if you want to run the lab devices as virtual machines on your Windows- or MacOS laptop with Intel CPU, but even then, I\u2019d prefer running them in a Ubuntu VM . One more gotcha: your hardware and virtualization software (for example, VirtualBox or VMware Fusion) must support nested virtualization if you want to use libvirt on that Ubuntu VM. You don\u2019t need nested virtualization to run Docker containers unless you\u2019re using the crazy trick we\u2019re forced to use for Aruba AOS-CX, Juniper vMX, or Nokia SR OS \u2013 they\u2019re running as a virtual machine within a container .","title":"Select the Virtualization Environment"},{"location":"1-setup/#software-installation","text":"Based on the choices you made, you\u2019ll find the installation instructions in one of these documents: Using GitHub Codespaces Ubuntu VM Installation on Windows or MacOS Ubuntu Server Installation Running netlab on any other Linux Server Running netlab in a Public Cloud Running netlab on Apple silicon Discouraged: Virtualbox-Based Lab on Windows or MacOS Once you have completed the software installation you have to deal with the stupidities of downloading and installing network device images ( Virtualbox , libvirt , containers ) unless you decided to use Cumulus Linux, FRR, Nokia SR Linux, or Vyos. I would love to simplify the process, but the networking vendors refuse to play along. Even worse, their licenses prohibit me from downloading the images and creating a packaged VM with preinstalled network devices for you 7 . Fortunately, you only have to go through this colossal waste of time once.","title":"Software Installation"},{"location":"1-setup/#defaults","text":"We finally got to the fun part \u2013 setting up the labs. If you\u2019re not using GitHub Codespaces: Select a directory where you want to have the BGP labs Clone the bgplab GitHub repository with git clone https://github.com/bgplab/bgplab.git . GitHub UI gives you other options in the green Code button, including Download ZIP After you get a local copy of the repository: If needed, edit the defaults.yml file in the top directory to set your preferred network device and virtualization environment. For example, I\u2019m using the following settings to run the labs with Arista EOS containers while using FRR as the external BGP feeds: device: eos # Change to your preferred network device provider: clab # Change to virtualbox or libvirt if needed groups: external: device: frr # Change to your preferred external router In a terminal window, change the current directory to one of the lab directories (for example, basic/1-session ), and execute netlab up . Wait for the lab to start and use netlab connect to connect to individual lab devices Have fun. When you\u2019re done, collect the device configurations with netlab collect (if you want to save them) and shut down the lab with netlab down Change the current directory to another lab directory and repeat. Once you run out of lab exercises, create a new one and contribute it with a pull request ;) You will have to run the labs on a device with an x86 CPU (Intel or AMD). \u21a9 You can only use devices supported by bgp.session and bgp.policy netlab plugins as external BGP feeds. \u21a9 You need netlab release 1.6.4-post2 or later to use Nokia SR Linux as additional routers in more complex labs. To configure Nokia SR Linux, you must also install additional software . \u21a9 If you\u2019d like to use other devices as external BGP feeds and are willing to contribute your changes, please add the support for your devices to bgp.session and bgp.policy plugins. Thank you! \u21a9 An FRR container starts slightly faster than a Cumulus Linux container. Also, the FRR containers are built by the FRR project, while the Cumulus Linux containers came from a hobby project of their former employee. \u21a9 There is no official FRR virtual machine image \u2013 netlab has to download and install FRR on a Ubuntu VM whenever you start an frr node as a virtual machine. Using Cumulus Linux Vagrant box is faster and consumes way less bandwidth. \u21a9 I\u2019m not going to pay a lawyer to read their boilerplate stuff, and I\u2019m definitely not going to rely on my amateur understanding of US copyright law. \u21a9","title":"Setting Up the Labs"},{"location":"2-labs-by-technology/","text":"Labs Sorted by BGP Attributes and Technologies This page contains the alphabetical list of BGP attributes and technologies and the labs you can use to practice them: Address families Configure BGP for IPv6 EBGP Sessions over IPv6 LLA Interfaces Advertising IP prefixes Advertise your IPv4 address space Configure BGP for IPv6 Redistribute IGP Information Into BGP BGP route aggregation Advertise Default Route in BGP Use Disaggregated Prefixes to Select the Primary Link AS and AS-path manipulation Use AS-Path Prepending to Influence Incoming Traffic Flow Reuse a BGP AS Number Across Multiple Sites ( allowas-in ) Fix AS-Path in Environments Reusing BGP AS Numbers ( as-override ) Use Multiple AS Numbers on the Same Router ( local-as ) Remove Private BGP AS Numbers from the AS Path ( remove-private-as ) BGP Route Server in an Internet Exchange Point Resolve BGP Wedgies AS-path filters Prevent route leaking between upstream providers with an AS-path filter Use the backup link to reach the adjacent autonomous system . Stop the Propagation of Configuration Errors (challenge lab) BFD (Bidirectional Forwarding Detection) Use BGP Timers and BFD to Speed Up BGP Convergence BGP Additional Paths IBGP Load Balancing with BGP Additional Paths BGP Link Bandwidth EBGP Load Balancing with BGP Link Bandwidth IBGP Load Balancing with BGP Link Bandwidth Communities Attach BGP Communities to Outgoing BGP Updates Use BGP Communities in Routing Policies Using No-Export Community to Filter Transit Routes BGP Graceful Shutdown (challenge lab) Resolve BGP Wedgies Default route Advertise Default Route in BGP Minimize the Forwarding Table on BGP Routers Implement Anycast Services with BGP (coming soon) Dynamic BGP neighbors Dynamic BGP Peers Implement Anycast Services with BGP (coming soon) EBGP sessions Establish an EBGP session with an ISP Connect to two upstream providers EBGP Sessions over IPv6 LLA Interfaces Load Balancing across External BGP Paths Use BGP Timers and BFD to Speed Up BGP Convergence BGP Route Server in an Internet Exchange Point EBGP-Only Data Center Design (coming soon) Dynamic BGP Peers Running EBGP Across a Firewall Passive BGP Sessions Forwarding Table Minimize the Forwarding Table on BGP Routers GTSM (Generic TTL Security Mechanism) Use MD5 passwords and TTL-based session protection IBGP sessions Establish an IBGP session between WAN edge routers Build a Transit Network with IBGP Use BGP Route Reflectors Use BGP Session Templates Dynamic BGP Peers (coming soon) Load balancing Load Balancing across External BGP Paths EBGP Load Balancing with BGP Link Bandwidth IBGP Load Balancing with BGP Link Bandwidth IBGP Load Balancing with BGP Additional Paths LOCAL_PREF (Local Preference) Implement a consistent AS-wide routing policy with BGP local preference. Use BGP Communities in Routing Policies Use the backup link to reach the adjacent autonomous system . BGP Graceful Shutdown (challenge lab) Resolve BGP Wedgies MD5 passwords Use MD5 passwords and TTL-based session protection MPLS Implement BGP-Free Core in a Transit Network MULTI_EXIT_DISC (Multi-Exit Discriminator, MED) Use MED to Influence Incoming Traffic Flow Outbound Route Filters (ORF) Use Outbound Route Filters (ORF) for IP Prefixes Prefix filters Filter prefixes advertised by your autonomous system with a prefix list Minimize the size of your BGP table with inbound filters Use the backup link to reach the adjacent autonomous system . Limit the Number of Accepted BGP Prefixes Stop the Propagation of Configuration Errors (challenge lab) Use Outbound Route Filters (ORF) for IP Prefixes Use Disaggregated Prefixes to Select the Primary Link Route reflectors Use BGP Route Reflectors Route servers BGP Route Server in an Internet Exchange Point Scalability Use BGP Session Templates Use BGP Policy Templates Dynamic BGP Peers TCP-AO Use TCP Authentication Option (TCP-AO) TTL security Use MD5 passwords and TTL-based session protection Weights Use BGP weights to prefer one of the upstream providers","title":"Labs by BGP Attributes and Technologies"},{"location":"2-labs-by-technology/#labs-sorted-by-bgp-attributes-and-technologies","text":"This page contains the alphabetical list of BGP attributes and technologies and the labs you can use to practice them: Address families Configure BGP for IPv6 EBGP Sessions over IPv6 LLA Interfaces Advertising IP prefixes Advertise your IPv4 address space Configure BGP for IPv6 Redistribute IGP Information Into BGP BGP route aggregation Advertise Default Route in BGP Use Disaggregated Prefixes to Select the Primary Link AS and AS-path manipulation Use AS-Path Prepending to Influence Incoming Traffic Flow Reuse a BGP AS Number Across Multiple Sites ( allowas-in ) Fix AS-Path in Environments Reusing BGP AS Numbers ( as-override ) Use Multiple AS Numbers on the Same Router ( local-as ) Remove Private BGP AS Numbers from the AS Path ( remove-private-as ) BGP Route Server in an Internet Exchange Point Resolve BGP Wedgies AS-path filters Prevent route leaking between upstream providers with an AS-path filter Use the backup link to reach the adjacent autonomous system . Stop the Propagation of Configuration Errors (challenge lab) BFD (Bidirectional Forwarding Detection) Use BGP Timers and BFD to Speed Up BGP Convergence BGP Additional Paths IBGP Load Balancing with BGP Additional Paths BGP Link Bandwidth EBGP Load Balancing with BGP Link Bandwidth IBGP Load Balancing with BGP Link Bandwidth Communities Attach BGP Communities to Outgoing BGP Updates Use BGP Communities in Routing Policies Using No-Export Community to Filter Transit Routes BGP Graceful Shutdown (challenge lab) Resolve BGP Wedgies Default route Advertise Default Route in BGP Minimize the Forwarding Table on BGP Routers Implement Anycast Services with BGP (coming soon) Dynamic BGP neighbors Dynamic BGP Peers Implement Anycast Services with BGP (coming soon) EBGP sessions Establish an EBGP session with an ISP Connect to two upstream providers EBGP Sessions over IPv6 LLA Interfaces Load Balancing across External BGP Paths Use BGP Timers and BFD to Speed Up BGP Convergence BGP Route Server in an Internet Exchange Point EBGP-Only Data Center Design (coming soon) Dynamic BGP Peers Running EBGP Across a Firewall Passive BGP Sessions Forwarding Table Minimize the Forwarding Table on BGP Routers GTSM (Generic TTL Security Mechanism) Use MD5 passwords and TTL-based session protection IBGP sessions Establish an IBGP session between WAN edge routers Build a Transit Network with IBGP Use BGP Route Reflectors Use BGP Session Templates Dynamic BGP Peers (coming soon) Load balancing Load Balancing across External BGP Paths EBGP Load Balancing with BGP Link Bandwidth IBGP Load Balancing with BGP Link Bandwidth IBGP Load Balancing with BGP Additional Paths LOCAL_PREF (Local Preference) Implement a consistent AS-wide routing policy with BGP local preference. Use BGP Communities in Routing Policies Use the backup link to reach the adjacent autonomous system . BGP Graceful Shutdown (challenge lab) Resolve BGP Wedgies MD5 passwords Use MD5 passwords and TTL-based session protection MPLS Implement BGP-Free Core in a Transit Network MULTI_EXIT_DISC (Multi-Exit Discriminator, MED) Use MED to Influence Incoming Traffic Flow Outbound Route Filters (ORF) Use Outbound Route Filters (ORF) for IP Prefixes Prefix filters Filter prefixes advertised by your autonomous system with a prefix list Minimize the size of your BGP table with inbound filters Use the backup link to reach the adjacent autonomous system . Limit the Number of Accepted BGP Prefixes Stop the Propagation of Configuration Errors (challenge lab) Use Outbound Route Filters (ORF) for IP Prefixes Use Disaggregated Prefixes to Select the Primary Link Route reflectors Use BGP Route Reflectors Route servers BGP Route Server in an Internet Exchange Point Scalability Use BGP Session Templates Use BGP Policy Templates Dynamic BGP Peers TCP-AO Use TCP Authentication Option (TCP-AO) TTL security Use MD5 passwords and TTL-based session protection Weights Use BGP weights to prefer one of the upstream providers","title":"Labs Sorted by BGP Attributes and Technologies"},{"location":"3-upcoming/","text":"Upcoming Labs While we\u2019re working on new stuff, you can already enjoy two dozen labs. In case you\u2019re curious about what\u2019s coming next, here\u2019s what we\u2019re working on: Using Bird BGP Daemon as a BGP Route Reflector Implement Anycast Services with BGP EBGP-Only Data Center Design Multihop EBGP peering in a high-availability firewall scenario Firewall-on-a-stick scenario with two VRFs in the directly attached router . We have plenty of other ideas, including: Basic BGP Setup Advanced exercises: Configure BGP graceful restart Controlling Inbound Traffic Use conditional route advertisements to select primary/backup links for the inbound traffic BGP in Service Provider Networks Use a hierarchy of route reflectors Reduce routing instabilities with BGP route flap dampening Implement policy-based routing with BGP Remote-triggered black hole External bogon feed Centralized route collection service (like bgp.tools) Using RPKI for route validation (with Routinator as the source of RPKI information) See this LinkedIn post for more details. Advanced Scenarios Peering across a low-end router using a default route See this blog post for more details. Use MPLS with BGP Use BGP Labeled Unicast to extend MPLS paths across multiple autonomous systems","title":"Upcoming Labs"},{"location":"3-upcoming/#upcoming-labs","text":"While we\u2019re working on new stuff, you can already enjoy two dozen labs. In case you\u2019re curious about what\u2019s coming next, here\u2019s what we\u2019re working on: Using Bird BGP Daemon as a BGP Route Reflector Implement Anycast Services with BGP EBGP-Only Data Center Design Multihop EBGP peering in a high-availability firewall scenario Firewall-on-a-stick scenario with two VRFs in the directly attached router . We have plenty of other ideas, including:","title":"Upcoming Labs"},{"location":"3-upcoming/#basic-bgp-setup","text":"Advanced exercises: Configure BGP graceful restart","title":"Basic BGP Setup"},{"location":"3-upcoming/#controlling-inbound-traffic","text":"Use conditional route advertisements to select primary/backup links for the inbound traffic","title":"Controlling Inbound Traffic"},{"location":"3-upcoming/#bgp-in-service-provider-networks","text":"Use a hierarchy of route reflectors Reduce routing instabilities with BGP route flap dampening Implement policy-based routing with BGP Remote-triggered black hole External bogon feed Centralized route collection service (like bgp.tools) Using RPKI for route validation (with Routinator as the source of RPKI information) See this LinkedIn post for more details.","title":"BGP in Service Provider Networks"},{"location":"3-upcoming/#advanced-scenarios","text":"Peering across a low-end router using a default route See this blog post for more details.","title":"Advanced Scenarios"},{"location":"3-upcoming/#use-mpls-with-bgp","text":"Use BGP Labeled Unicast to extend MPLS paths across multiple autonomous systems","title":"Use MPLS with BGP"},{"location":"4-codespaces/","text":"Use GitHub Codespaces You can run BGP labs in (free 1 ) GitHub codespaces ; all you need is a GitHub account: Create a new codespace for your BGP labs or connect to an existing codespace . Unless you\u2019re using GitHub codespaces with VScode (in which case you know what to do), your codespace opens in a new browser window with three tabs: Explorer (repository folders), Preview (starting with README), and Terminal. Select Lab Devices The BGP labs repository uses a recent FRRouting container as the default device. To change the device settings, edit the defaults.yml file with vi or nano : It\u2019s best to use network devices with free-to-download container images: Device Device type to use in defaults.yml Cumulus Linux 4.4 cumulus FRRouting frr Nokia SR Linux srlinux VyOS vyos Tip Start with the Configuring Cumulus Linux and FRRouting exercise if you want to use the default settings but never worked with FRRouting before. Use FRRouting to use the 2 CPU/8 GB codespaces VM with more extensive labs. Codespaces have persistent storage; you can download and install other containers. To use containers that have to be downloaded from the vendors\u2019 website, download them onto your laptop, drag-and-drop them into the Folders , and install them like you would on a local netlab instance . While it looks like the Codespaces environment supports nested virtualization, the environment does not include the kvm kernel module, so we cannot get virtual machines to work (yet). That also precludes running VMs in virtual machines (the vrnetlab approach). Start a Lab Once you have the codespaces up and running: Click on the desired lab exercise in the README.md preview window to select the exercise folder. Right-click on the exercise folder and select \u201c Open in Integrated Terminal \u201d to launch a bash session in the desired directory. Execute netlab up to start the lab. Expand the exercise folder in the Explorer tab. Right-click on the README.md file and select \u201c Open Preview \u201d to open the rendered version of the file. Click the link in the README.md file to get the exercise description in the preview pane. Connect to your devices with the netlab connect command executed in the Terminal pane. Cleanup and Shutdown Finally, don\u2019t forget to shut down the lab with netlab down and stop your codespace after you\u2019re done: Click on the blue \u201c Codespaces \u201d button in the bottom-left corner of the browser window. Select \u201c Stop Current Codespace \u201d. You should also adjust idle timeout and default retention period in your codespaces settings . You get 120 free core hours per month or pay for more . \u21a9","title":"Use GitHub Codespaces"},{"location":"4-codespaces/#use-github-codespaces","text":"You can run BGP labs in (free 1 ) GitHub codespaces ; all you need is a GitHub account: Create a new codespace for your BGP labs or connect to an existing codespace . Unless you\u2019re using GitHub codespaces with VScode (in which case you know what to do), your codespace opens in a new browser window with three tabs: Explorer (repository folders), Preview (starting with README), and Terminal.","title":"Use GitHub Codespaces"},{"location":"4-codespaces/#select-lab-devices","text":"The BGP labs repository uses a recent FRRouting container as the default device. To change the device settings, edit the defaults.yml file with vi or nano : It\u2019s best to use network devices with free-to-download container images: Device Device type to use in defaults.yml Cumulus Linux 4.4 cumulus FRRouting frr Nokia SR Linux srlinux VyOS vyos Tip Start with the Configuring Cumulus Linux and FRRouting exercise if you want to use the default settings but never worked with FRRouting before. Use FRRouting to use the 2 CPU/8 GB codespaces VM with more extensive labs. Codespaces have persistent storage; you can download and install other containers. To use containers that have to be downloaded from the vendors\u2019 website, download them onto your laptop, drag-and-drop them into the Folders , and install them like you would on a local netlab instance . While it looks like the Codespaces environment supports nested virtualization, the environment does not include the kvm kernel module, so we cannot get virtual machines to work (yet). That also precludes running VMs in virtual machines (the vrnetlab approach).","title":"Select Lab Devices"},{"location":"4-codespaces/#start-a-lab","text":"Once you have the codespaces up and running: Click on the desired lab exercise in the README.md preview window to select the exercise folder. Right-click on the exercise folder and select \u201c Open in Integrated Terminal \u201d to launch a bash session in the desired directory. Execute netlab up to start the lab. Expand the exercise folder in the Explorer tab. Right-click on the README.md file and select \u201c Open Preview \u201d to open the rendered version of the file. Click the link in the README.md file to get the exercise description in the preview pane. Connect to your devices with the netlab connect command executed in the Terminal pane.","title":"Start a Lab"},{"location":"4-codespaces/#cleanup-and-shutdown","text":"Finally, don\u2019t forget to shut down the lab with netlab down and stop your codespace after you\u2019re done: Click on the blue \u201c Codespaces \u201d button in the bottom-left corner of the browser window. Select \u201c Stop Current Codespace \u201d. You should also adjust idle timeout and default retention period in your codespaces settings . You get 120 free core hours per month or pay for more . \u21a9","title":"Cleanup and Shutdown"},{"location":"99-about/","text":"About the Project In the early 1990s, I managed to persuade the powers that be within Cisco\u2019s European training organization that they needed a deep-dive BGP course, resulting in a three-day (later extended to five days) Advanced BGP Configuration and Troubleshooting (ABCT) course 3 . I was delivering that course for close to a decade, allowing me to gradually build a decent story explaining the reasoning and use cases behind most of (then available) BGP features, from simple EBGP sessions to BGP route reflectors and communities 2 . Now imagine having more than a dozen hands-on labs following the \u201c BGP from rookie to hero \u201d story available for any platform of your choice 4 . Welcome to the Open-Source BGP Configuration Labs project. The project uses netlab 5 to set up the labs and FRRouting containers or a few other devices as external BGP routers. You can use whatever networking devices you wish to work on 1 , and if they happen to be supported by netlab , you\u2019ll get lab topology and basic device configuration for each lab set up in seconds 6 . Most lab exercises include device configurations for the external BGP routers for people who love wasting time with GUI. You\u2019ll find the lab topology files and initial device configurations in a GitHub repository , but you might explore the lab exercises first . I also created a long list of labs that would be nice to have . I probably missed something important \u2013 please open an issue or a discussion , or (even better) become a contributor and submit a PR. Including physical hardware if you have a few extra Cumulus switches and are willing to do some crazy stuff to set things up. \u21a9 The echoes of those ideas are still visible (if you know where to look) in the Configuring BGP on Cisco Routers course \u2013 ABCT eventually morphed into CBCR and became part of the original CCIP curriculum in the early 2000s, but that\u2019s another story. \u21a9 If you happen to have the original ABCT course description, please send it over. I tried to find it in Web Archive, but it\u2019s been way too long\u2026 \u21a9 As long as it\u2019s supported by netlab . \u21a9 When you happen to have a Hammer of Thor handy, everything looks like a nail waiting to be hit ;) \u21a9 Unless you love using resource hogs like Nexus OS, IOS XR, or some Junos variants. \u21a9","title":"About the Project"},{"location":"99-about/#about-the-project","text":"In the early 1990s, I managed to persuade the powers that be within Cisco\u2019s European training organization that they needed a deep-dive BGP course, resulting in a three-day (later extended to five days) Advanced BGP Configuration and Troubleshooting (ABCT) course 3 . I was delivering that course for close to a decade, allowing me to gradually build a decent story explaining the reasoning and use cases behind most of (then available) BGP features, from simple EBGP sessions to BGP route reflectors and communities 2 . Now imagine having more than a dozen hands-on labs following the \u201c BGP from rookie to hero \u201d story available for any platform of your choice 4 . Welcome to the Open-Source BGP Configuration Labs project. The project uses netlab 5 to set up the labs and FRRouting containers or a few other devices as external BGP routers. You can use whatever networking devices you wish to work on 1 , and if they happen to be supported by netlab , you\u2019ll get lab topology and basic device configuration for each lab set up in seconds 6 . Most lab exercises include device configurations for the external BGP routers for people who love wasting time with GUI. You\u2019ll find the lab topology files and initial device configurations in a GitHub repository , but you might explore the lab exercises first . I also created a long list of labs that would be nice to have . I probably missed something important \u2013 please open an issue or a discussion , or (even better) become a contributor and submit a PR. Including physical hardware if you have a few extra Cumulus switches and are willing to do some crazy stuff to set things up. \u21a9 The echoes of those ideas are still visible (if you know where to look) in the Configuring BGP on Cisco Routers course \u2013 ABCT eventually morphed into CBCR and became part of the original CCIP curriculum in the early 2000s, but that\u2019s another story. \u21a9 If you happen to have the original ABCT course description, please send it over. I tried to find it in Web Archive, but it\u2019s been way too long\u2026 \u21a9 As long as it\u2019s supported by netlab . \u21a9 When you happen to have a Hammer of Thor handy, everything looks like a nail waiting to be hit ;) \u21a9 Unless you love using resource hogs like Nexus OS, IOS XR, or some Junos variants. \u21a9","title":"About the Project"},{"location":"basic/","text":"Deploy BGP in Your Network The first set of the BGP labs focuses on the basics: Configuring BGP sessions and advertising IPv4 and IPv6 prefixes Protecting BGP sessions Running BGP in networks with more than one BGP router Other valuable topics like using BFD or BGP route aggregation. If you use Cumulus Linux or FRR in your labs (either as the customer routers or as the external routers), start with Configuring Cumulus Linux and FRRouting . Next, take the labs in this order: Simple BGP Deployments In these labs, you\u2019ll learn how to: Establish an EBGP session with an ISP Connect to two upstream providers Advertise your IPv4 address space Configure BGP for IPv6 Redistribute IGP Information Into BGP Protecting BGP Sessions (Optional) You should always protect the control plane of your router and the routing protocols it\u2019s running. While it\u2019s impossible to achieve perfect results without using access control lists, you should also master the BGP tools at your disposal: Use MD5 passwords and TTL-based session protection Use TCP Authentication Option (TCP-AO) Limit the Number of Accepted BGP Prefixes Running BGP in Larger Networks If your network has multiple BGP routers, they must exchange BGP information. While it\u2019s possible to build a network where each BGP router uses a different autonomous system number (hint: don\u2019t), running Internal BGP (IBGP) between routers in your network is more common. You can practice IBGP in these lab exercises: Establish an IBGP session between WAN edge routers Build a Transit Network with IBGP Use BGP Route Reflectors Other important aspects of large-scale BGP deployments are scalability and consistency. The following lab exercises will help you grasp those concepts: Use BGP Session Templates Use BGP Policy Templates Dynamic BGP Peers BGP AS Number and AS Path Manipulations Even though one should not use the same BGP AS number in multiple networks or more than one BGP AS number on a single device, you\u2019ll always stumble upon scenarios that violate the common-sense rules. In these lab exercises, you\u2019ll practice how to deal with them: Reuse a BGP AS Number Across Multiple Sites Fix AS-Path in Environments Reusing BGP AS Numbers Use Multiple AS Numbers on the Same Router Remove Private BGP AS Numbers from the AS Path BGP Route Server in an Internet Exchange Point BGP Load Balancing Modern BGP implementations perform simple EBGP and IBGP equal-cost multipathing 1 (ECMP) without additional configuration. Still, you might have to fine-tune it to adapt its behavior to your environment. These lab exercises cover the typical scenarios: Load Balancing across External BGP Paths EBGP Load Balancing with BGP Link Bandwidth IBGP Load Balancing with BGP Link Bandwidth IBGP Load Balancing with BGP Additional Paths Other Useful Topics Willing to learn more? Challenge yourself with these advanced topics: Use BGP Timers and BFD to Speed Up BGP Convergence BGP route aggregation Advertise Default Route in BGP EBGP Sessions over IPv6 LLA Interfaces Running EBGP Across a Firewall Passive BGP Sessions Sending traffic toward a single destination across multiple equal-cost paths. Packet distribution across paths (load balancing) depends on the device configuration and the implementation details, and might be done per-packet, per-session, or per-destination. \u21a9","title":"Overview"},{"location":"basic/#deploy-bgp-in-your-network","text":"The first set of the BGP labs focuses on the basics: Configuring BGP sessions and advertising IPv4 and IPv6 prefixes Protecting BGP sessions Running BGP in networks with more than one BGP router Other valuable topics like using BFD or BGP route aggregation. If you use Cumulus Linux or FRR in your labs (either as the customer routers or as the external routers), start with Configuring Cumulus Linux and FRRouting . Next, take the labs in this order:","title":"Deploy BGP in Your Network"},{"location":"basic/#simple","text":"In these labs, you\u2019ll learn how to: Establish an EBGP session with an ISP Connect to two upstream providers Advertise your IPv4 address space Configure BGP for IPv6 Redistribute IGP Information Into BGP","title":"Simple BGP Deployments"},{"location":"basic/#protect","text":"You should always protect the control plane of your router and the routing protocols it\u2019s running. While it\u2019s impossible to achieve perfect results without using access control lists, you should also master the BGP tools at your disposal: Use MD5 passwords and TTL-based session protection Use TCP Authentication Option (TCP-AO) Limit the Number of Accepted BGP Prefixes","title":"Protecting BGP Sessions (Optional)"},{"location":"basic/#ibgp","text":"If your network has multiple BGP routers, they must exchange BGP information. While it\u2019s possible to build a network where each BGP router uses a different autonomous system number (hint: don\u2019t), running Internal BGP (IBGP) between routers in your network is more common. You can practice IBGP in these lab exercises: Establish an IBGP session between WAN edge routers Build a Transit Network with IBGP Use BGP Route Reflectors Other important aspects of large-scale BGP deployments are scalability and consistency. The following lab exercises will help you grasp those concepts: Use BGP Session Templates Use BGP Policy Templates Dynamic BGP Peers","title":"Running BGP in Larger Networks"},{"location":"basic/#aspath","text":"Even though one should not use the same BGP AS number in multiple networks or more than one BGP AS number on a single device, you\u2019ll always stumble upon scenarios that violate the common-sense rules. In these lab exercises, you\u2019ll practice how to deal with them: Reuse a BGP AS Number Across Multiple Sites Fix AS-Path in Environments Reusing BGP AS Numbers Use Multiple AS Numbers on the Same Router Remove Private BGP AS Numbers from the AS Path BGP Route Server in an Internet Exchange Point","title":"BGP AS Number and AS Path Manipulations"},{"location":"basic/#lb","text":"Modern BGP implementations perform simple EBGP and IBGP equal-cost multipathing 1 (ECMP) without additional configuration. Still, you might have to fine-tune it to adapt its behavior to your environment. These lab exercises cover the typical scenarios: Load Balancing across External BGP Paths EBGP Load Balancing with BGP Link Bandwidth IBGP Load Balancing with BGP Link Bandwidth IBGP Load Balancing with BGP Additional Paths","title":"BGP Load Balancing"},{"location":"basic/#advanced","text":"Willing to learn more? Challenge yourself with these advanced topics: Use BGP Timers and BFD to Speed Up BGP Convergence BGP route aggregation Advertise Default Route in BGP EBGP Sessions over IPv6 LLA Interfaces Running EBGP Across a Firewall Passive BGP Sessions Sending traffic toward a single destination across multiple equal-cost paths. Packet distribution across paths (load balancing) depends on the device configuration and the implementation details, and might be done per-packet, per-session, or per-destination. \u21a9","title":"Other Useful Topics"},{"location":"basic/0-frrouting/","text":"Configuring Cumulus Linux and FRRouting Most networking devices 1 use a configuration command line interface (CLI) to interact with the end-user. The CLI usually provides show commands to inspect the state of the device and a configuration mode that allows the user to configure the device. Cumulus Linux and FRRouting are different. They are implemented as an application/management layer on top of Linux, and Linux shell is used as the initial CLI. To configure them, you have to: Use standard Linux tools like ifupdown to configure the interfaces; Edit FRRouting configuration files to start routing protocol daemons Start FRRouting configuration shell from the Linux CLI. The Linux interfaces and IP addresses will be configured automatically if you start the BGP labs with the netlab up command. You will have to start the routing protocol daemons in the initial lab exercises if you plan to use Cumulus Linux or FRRouting as the user routers, and you might have to execute show commands on Cumulus Linux or FRRouting acting as the external routers. You\u2019ll practice both in this lab exercise. Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/0-frrouting Execute netlab up to start a lab with two Cumulus Linux or FRR virtual machines or containers (depending on your lab setup). Tip The lab topology uses Cumulus Linux virtual machines or containers. It switches to FRR containers if you\u2019re running the labs on an ARM CPU (for example, on Macbooks using Apple silicon ). Log into the devices ( rtr and x1 ) with the netlab connect command. Start the BGP Daemon Most network devices start routing daemons when you configure them through the configuration CLI or API. FRRouting (the routing daemons used in Cumulus Linux) is different: you have to enable the desired routing daemons in a configuration file and restart the top-level FRRouting process. Tip You can skip this step if you use NVUE CLI to configure routing on Cumulus Linux 5.x \u2013 it automatically enables FRR daemons before configuring them. You can check the FRR daemons running on your Cumulus Linux devices or FRR running in a Linux virtual machine with the sudo systemctl status frr.service command. It displays the running FRR daemons and the recent FRR logging messages, for example 2 : rtr(bash)#sudo systemctl status frr.service * frr.service - FRRouting Loaded: loaded (/lib/systemd/system/frr.service; enabled; vendor preset: enabled) Active: active (running) since Wed 2024-06-26 17:09:37 UTC; 2min 27s ago Docs: https://frrouting.readthedocs.io/en/latest/setup.html Process: 2230 ExecReload=/usr/lib/frr/frrinit.sh reload (code=exited, status=0/SUCCESS) Status: \"FRR Operational\" Tasks: 17 (limit: 737) Memory: 19.2M CPU: 690ms CGroup: /system.slice/frr.service |-1875 /usr/lib/frr/zebra -d -F datacenter -M cumulus_mlag -M snmp -A 127.0.0.1 -s 90000000 |-1889 /usr/lib/frr/staticd -d -F datacenter -A 127.0.0.1 |-2246 /usr/lib/frr/watchfrr -d -F datacenter zebra bgpd staticd `-2255 /usr/lib/frr/bgpd -d -F datacenter -M snmp -A 127.0.0.1 Jun 26 17:10:01 cc bgpd[2255]: Configuration Read in Took: 00:00:00 Jun 26 17:10:01 cc staticd[1889]: Configuration Read in Took: 00:00:00 Jun 26 17:10:03 cc bgpd[2255]: %ADJCHANGE: neighbor 172.16.1.4(fc) in vrf default Up You cannot use the same command in FRR containers as they don\u2019t use systemd . The easiest way to find FRR daemons in FRR containers is to use the ps -ef|grep frr command 3 . This is the printout you could get when the BGP daemon is already running: rtr(bash)#ps -ef|grep frr 1 root 0:00 /sbin/tini -- /usr/lib/frr/docker-start 26 root 0:00 /usr/lib/frr/watchfrr -d -F datacenter zebra bgpd staticd 41 frr 0:00 /usr/lib/frr/zebra -d -F datacenter -A 127.0.0.1 -s 90000000 46 frr 0:00 /usr/lib/frr/bgpd -d -F datacenter -A 127.0.0.1 53 frr 0:00 /usr/lib/frr/staticd -d -F datacenter -A 127.0.0.1 342 root 0:00 grep frr The list of FRRouting daemons you want to enable is stored in the /etc/frr/daemons file. To enable the FRRouting BGP daemon, you have to: Add the bgpd=yes line to the /etc/frr/daemons file 4 . Restart FRRouting with the sudo systemctl restart frr.service command (see also: using sudo ) Warning You cannot change the FRR daemons in FRR containers. Restarting FRR would kill the container. netlab takes care of that and enables all the daemons necessary to complete the lab exercises. Restarting FRR daemons wipes out the current (running) configuration. If you want to retain it, save it to the startup configuration with the vtysh write command. The write command saves the running configuration (that you can inspect with show running-config ) into the /etc/frr/frr.conf file. However, the show startup-config 5 does not display the content of that file. Exit vtysh and use the more /etc/frr/frr.conf command 6 to inspect it. You could add the required line to the FRRouting daemons file with any text editor 7 or use the following trick: Use sudo bash to start another Linux shell as the root user Use the echo command with output redirection to add a line to the /etc/frr/daemons file. rtr(bash)#sudo bash root@rtr:/# echo 'bgpd=yes' >>/etc/frr/daemons root@rtr:/# exit After enabling the BGP daemon and restarting FRR, you should see the bgpd process in the ps -ef printout or the BGP daemon mentioned in the sudo systemctl status frr.service printout. Work with the FRRouting CLI FRRouting suite includes a virtual shell ( vtysh ) closely resembling industry-standard CLI 8 . It has to be started from the Linux command line with the vtysh command. The vtysh CLI has to run as the root user unless you change the FRR-related permissions to allow a regular user to use it. The usual command to start the vtysh is thus sudo vtysh (but see also To Sudo Or Not to Sudo ). rtr(bash)#sudo vtysh Hello, this is FRRouting (version 7.5+cl4.4.0u4). Copyright 1996-2005 Kunihiro Ishiguro, et al. rtr# Once you started vtysh , you can execute show commands to inspect the device state, for example: x1(bash)#sudo vtysh Hello, this is FRRouting (version 7.5+cl4.4.0u4). Copyright 1996-2005 Kunihiro Ishiguro, et al. x1# show ip bgp BGP table version is 1, local router ID is 10.0.0.2, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 10.0.0.2/32 0.0.0.0 0 32768 i Displayed 1 routes and 1 total paths Tip Starting with netlab release 1.7.0, you can use the --show option of the netlab connect command to execute a single command on a FRR/Cumulus Linux device. For example, to inspect the BGP table, use netlab connect --show ip bgp . You can quote the show commands when they include characters that would confuse \u200cbash , for example netlab connect --show 'ip bgp regexp 65000$' To configure FRRouting daemons, use the configure vtysh command and enter configuration commands similar to those you\u2019d use on Cisco IOS or Arista EOS: x1(bash)#sudo vtysh Hello, this is FRRouting (version 7.5+cl4.4.0u4). Copyright 1996-2005 Kunihiro Ishiguro, et al. x1# configure x1(config)# router bgp 65100 x1(config-router)# To Sudo Or Not to Sudo The vtysh usually has to run as the root user, so you should start it with the sudo vtysh command. Unfortunately, things are never as simple as they look: When using SSH, you log into Cumulus Linux or FRRouting virtual machines as a regular user (user vagrant in netlab -created labs) and have to use the sudo command to start vtysh . Cumulus Linux and FRR containers run as the root user, and you connect to them as the root user with the docker exec or netlab connect commands 9 . When working with containers, you can start vtysh without using the sudo command. You can execute sudo vtysh as a root user on Cumulus Linux containers but not within an FRR container. The FRR container does not include the sudo command. Long story short: Use sudo vtysh whenever possible to burn it into your muscle memory. Use vtysh if you use FRRouting containers as the lab devices. Using Output Filters Unlike many other network operating systems, FRR vtysh does not have output filters. You probably don\u2019t need them as you\u2019ll be running FRR on top of a Unix-like operating system that supports pipes, but it might be a bit convoluted to use vtysh in a pipe. To use the vtysh output in a pipe, you have to execute vtysh and get the results of a show command in a single command: You could use sudo vtysh -c 'show command' when you\u2019re in the bash shell of a lab device, for example: $ sudo vtysh -c 'show ip bgp' | grep 32768 *> 192.168.100.0/24 0.0.0.0 0 32768 i Alternatively, you could use the netlab connect --show command to execute a vtysh show command on a lab device: $ netlab connect x1 --show ip bgp | grep 32768 Connecting to container clab-originate-x1, executing sudo vtysh -c \"show ip bgp\" *> 192.168.100.0/24 0.0.0.0 0 32768 i Tip Use netlab connect --quiet --show to omit the Connecting to... message. The following table contains a mapping between common network operating system filters and Linux CLI commands: NOS filter Linux CLI command include grep exclude grep -v begin grep -A 10000 10 end grep -B 10000 section no equivalent Including devices based on Linux like Arista EOS, Cisco Nexus OS, or Nokia SR Linux \u21a9 The printout details depend on the Linux and FRR versions, but you\u2019ll always be able to determine whether the BGP process is running. \u21a9 You can use the same command with Cumulus Linux or FRR running in a virtual machine. \u21a9 See Configuring FRRouting Cumulus Linux documentation for more details. \u21a9 At least on Cumulus Linux 4.4 used in the BGP labs \u21a9 You might have to prefix it with sudo \u21a9 vi is available in Cumulus Linux containers. vi and nano are available in Cumulus Linux and FRR virtual machines. \u21a9 An euphemism for Cisco IOS CLI that is used when you try to avoid nasty encounters with Cisco\u2019s legal team. \u21a9 When in doubt, use the whoami command. \u21a9 The \u201810000\u2019 parameter specifies the number of lines after the match. Increase it for very long printouts ;) \u21a9","title":"Configuring Cumulus Linux and FRRouting"},{"location":"basic/0-frrouting/#configuring-cumulus-linux-and-frrouting","text":"Most networking devices 1 use a configuration command line interface (CLI) to interact with the end-user. The CLI usually provides show commands to inspect the state of the device and a configuration mode that allows the user to configure the device. Cumulus Linux and FRRouting are different. They are implemented as an application/management layer on top of Linux, and Linux shell is used as the initial CLI. To configure them, you have to: Use standard Linux tools like ifupdown to configure the interfaces; Edit FRRouting configuration files to start routing protocol daemons Start FRRouting configuration shell from the Linux CLI. The Linux interfaces and IP addresses will be configured automatically if you start the BGP labs with the netlab up command. You will have to start the routing protocol daemons in the initial lab exercises if you plan to use Cumulus Linux or FRRouting as the user routers, and you might have to execute show commands on Cumulus Linux or FRRouting acting as the external routers. You\u2019ll practice both in this lab exercise.","title":"Configuring Cumulus Linux and FRRouting"},{"location":"basic/0-frrouting/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/0-frrouting Execute netlab up to start a lab with two Cumulus Linux or FRR virtual machines or containers (depending on your lab setup). Tip The lab topology uses Cumulus Linux virtual machines or containers. It switches to FRR containers if you\u2019re running the labs on an ARM CPU (for example, on Macbooks using Apple silicon ). Log into the devices ( rtr and x1 ) with the netlab connect command.","title":"Start the Lab"},{"location":"basic/0-frrouting/#daemon","text":"Most network devices start routing daemons when you configure them through the configuration CLI or API. FRRouting (the routing daemons used in Cumulus Linux) is different: you have to enable the desired routing daemons in a configuration file and restart the top-level FRRouting process. Tip You can skip this step if you use NVUE CLI to configure routing on Cumulus Linux 5.x \u2013 it automatically enables FRR daemons before configuring them. You can check the FRR daemons running on your Cumulus Linux devices or FRR running in a Linux virtual machine with the sudo systemctl status frr.service command. It displays the running FRR daemons and the recent FRR logging messages, for example 2 : rtr(bash)#sudo systemctl status frr.service * frr.service - FRRouting Loaded: loaded (/lib/systemd/system/frr.service; enabled; vendor preset: enabled) Active: active (running) since Wed 2024-06-26 17:09:37 UTC; 2min 27s ago Docs: https://frrouting.readthedocs.io/en/latest/setup.html Process: 2230 ExecReload=/usr/lib/frr/frrinit.sh reload (code=exited, status=0/SUCCESS) Status: \"FRR Operational\" Tasks: 17 (limit: 737) Memory: 19.2M CPU: 690ms CGroup: /system.slice/frr.service |-1875 /usr/lib/frr/zebra -d -F datacenter -M cumulus_mlag -M snmp -A 127.0.0.1 -s 90000000 |-1889 /usr/lib/frr/staticd -d -F datacenter -A 127.0.0.1 |-2246 /usr/lib/frr/watchfrr -d -F datacenter zebra bgpd staticd `-2255 /usr/lib/frr/bgpd -d -F datacenter -M snmp -A 127.0.0.1 Jun 26 17:10:01 cc bgpd[2255]: Configuration Read in Took: 00:00:00 Jun 26 17:10:01 cc staticd[1889]: Configuration Read in Took: 00:00:00 Jun 26 17:10:03 cc bgpd[2255]: %ADJCHANGE: neighbor 172.16.1.4(fc) in vrf default Up You cannot use the same command in FRR containers as they don\u2019t use systemd . The easiest way to find FRR daemons in FRR containers is to use the ps -ef|grep frr command 3 . This is the printout you could get when the BGP daemon is already running: rtr(bash)#ps -ef|grep frr 1 root 0:00 /sbin/tini -- /usr/lib/frr/docker-start 26 root 0:00 /usr/lib/frr/watchfrr -d -F datacenter zebra bgpd staticd 41 frr 0:00 /usr/lib/frr/zebra -d -F datacenter -A 127.0.0.1 -s 90000000 46 frr 0:00 /usr/lib/frr/bgpd -d -F datacenter -A 127.0.0.1 53 frr 0:00 /usr/lib/frr/staticd -d -F datacenter -A 127.0.0.1 342 root 0:00 grep frr The list of FRRouting daemons you want to enable is stored in the /etc/frr/daemons file. To enable the FRRouting BGP daemon, you have to: Add the bgpd=yes line to the /etc/frr/daemons file 4 . Restart FRRouting with the sudo systemctl restart frr.service command (see also: using sudo ) Warning You cannot change the FRR daemons in FRR containers. Restarting FRR would kill the container. netlab takes care of that and enables all the daemons necessary to complete the lab exercises. Restarting FRR daemons wipes out the current (running) configuration. If you want to retain it, save it to the startup configuration with the vtysh write command. The write command saves the running configuration (that you can inspect with show running-config ) into the /etc/frr/frr.conf file. However, the show startup-config 5 does not display the content of that file. Exit vtysh and use the more /etc/frr/frr.conf command 6 to inspect it. You could add the required line to the FRRouting daemons file with any text editor 7 or use the following trick: Use sudo bash to start another Linux shell as the root user Use the echo command with output redirection to add a line to the /etc/frr/daemons file. rtr(bash)#sudo bash root@rtr:/# echo 'bgpd=yes' >>/etc/frr/daemons root@rtr:/# exit After enabling the BGP daemon and restarting FRR, you should see the bgpd process in the ps -ef printout or the BGP daemon mentioned in the sudo systemctl status frr.service printout.","title":"Start the BGP Daemon"},{"location":"basic/0-frrouting/#vtysh","text":"FRRouting suite includes a virtual shell ( vtysh ) closely resembling industry-standard CLI 8 . It has to be started from the Linux command line with the vtysh command. The vtysh CLI has to run as the root user unless you change the FRR-related permissions to allow a regular user to use it. The usual command to start the vtysh is thus sudo vtysh (but see also To Sudo Or Not to Sudo ). rtr(bash)#sudo vtysh Hello, this is FRRouting (version 7.5+cl4.4.0u4). Copyright 1996-2005 Kunihiro Ishiguro, et al. rtr# Once you started vtysh , you can execute show commands to inspect the device state, for example: x1(bash)#sudo vtysh Hello, this is FRRouting (version 7.5+cl4.4.0u4). Copyright 1996-2005 Kunihiro Ishiguro, et al. x1# show ip bgp BGP table version is 1, local router ID is 10.0.0.2, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 10.0.0.2/32 0.0.0.0 0 32768 i Displayed 1 routes and 1 total paths Tip Starting with netlab release 1.7.0, you can use the --show option of the netlab connect command to execute a single command on a FRR/Cumulus Linux device. For example, to inspect the BGP table, use netlab connect --show ip bgp . You can quote the show commands when they include characters that would confuse \u200cbash , for example netlab connect --show 'ip bgp regexp 65000$' To configure FRRouting daemons, use the configure vtysh command and enter configuration commands similar to those you\u2019d use on Cisco IOS or Arista EOS: x1(bash)#sudo vtysh Hello, this is FRRouting (version 7.5+cl4.4.0u4). Copyright 1996-2005 Kunihiro Ishiguro, et al. x1# configure x1(config)# router bgp 65100 x1(config-router)#","title":"Work with the FRRouting CLI"},{"location":"basic/0-frrouting/#sudo","text":"The vtysh usually has to run as the root user, so you should start it with the sudo vtysh command. Unfortunately, things are never as simple as they look: When using SSH, you log into Cumulus Linux or FRRouting virtual machines as a regular user (user vagrant in netlab -created labs) and have to use the sudo command to start vtysh . Cumulus Linux and FRR containers run as the root user, and you connect to them as the root user with the docker exec or netlab connect commands 9 . When working with containers, you can start vtysh without using the sudo command. You can execute sudo vtysh as a root user on Cumulus Linux containers but not within an FRR container. The FRR container does not include the sudo command. Long story short: Use sudo vtysh whenever possible to burn it into your muscle memory. Use vtysh if you use FRRouting containers as the lab devices.","title":"To Sudo Or Not to Sudo"},{"location":"basic/0-frrouting/#using-output-filters","text":"Unlike many other network operating systems, FRR vtysh does not have output filters. You probably don\u2019t need them as you\u2019ll be running FRR on top of a Unix-like operating system that supports pipes, but it might be a bit convoluted to use vtysh in a pipe. To use the vtysh output in a pipe, you have to execute vtysh and get the results of a show command in a single command: You could use sudo vtysh -c 'show command' when you\u2019re in the bash shell of a lab device, for example: $ sudo vtysh -c 'show ip bgp' | grep 32768 *> 192.168.100.0/24 0.0.0.0 0 32768 i Alternatively, you could use the netlab connect --show command to execute a vtysh show command on a lab device: $ netlab connect x1 --show ip bgp | grep 32768 Connecting to container clab-originate-x1, executing sudo vtysh -c \"show ip bgp\" *> 192.168.100.0/24 0.0.0.0 0 32768 i Tip Use netlab connect --quiet --show to omit the Connecting to... message. The following table contains a mapping between common network operating system filters and Linux CLI commands: NOS filter Linux CLI command include grep exclude grep -v begin grep -A 10000 10 end grep -B 10000 section no equivalent Including devices based on Linux like Arista EOS, Cisco Nexus OS, or Nokia SR Linux \u21a9 The printout details depend on the Linux and FRR versions, but you\u2019ll always be able to determine whether the BGP process is running. \u21a9 You can use the same command with Cumulus Linux or FRR running in a virtual machine. \u21a9 See Configuring FRRouting Cumulus Linux documentation for more details. \u21a9 At least on Cumulus Linux 4.4 used in the BGP labs \u21a9 You might have to prefix it with sudo \u21a9 vi is available in Cumulus Linux containers. vi and nano are available in Cumulus Linux and FRR virtual machines. \u21a9 An euphemism for Cisco IOS CLI that is used when you try to avoid nasty encounters with Cisco\u2019s legal team. \u21a9 When in doubt, use the whoami command. \u21a9 The \u201810000\u2019 parameter specifies the number of lines after the match. Increase it for very long printouts ;) \u21a9","title":"Using Output Filters"},{"location":"basic/1-session/","text":"Configure a Single EBGP Session We\u2019ll start with the simplest possible scenario: configure an EBGP session between your device and an upstream router (X1). Note: If you\u2019re creating your lab infrastructure manually , it might be better to skip this exercise and go straight to configuring two uplinks . Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/1-session Execute netlab up ( device requirements , other options ) Log into your device (RTR) with netlab connect rtr and verify that the IP addresses are configured on all its interfaces. Configuration Tasks Start BGP routing process with AS number 65000 Configure an EBGP session using the following parameters: neighbor IP address neighbor AS number 10.1.0.2 65100 Tip If you\u2019re using Cumulus Linux or FRR on RTR, you might have to enable the BGP daemon first. You\u2019ll find more details in the Configuring Cumulus Linux and FRRouting lab. Warning If your device happens to be fully compliant with RFC 8212 (example: Cisco IOS XR), you\u2019ll have to configure a permit everything incoming filter on the EBGP session or your device won\u2019t accept updates from its EBGP neighbor(s). On some devices, you\u2019ll also have to activate the EBGP session within the IPv4 address family to tell the BGP daemon on your router to accept IPv4 prefixes from its neighbor. Finally, it\u2019s always a good idea to configure: Neighbor description to simplify troubleshooting and BGP neighbor status logging to get an information message when the BGP session is established. Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on the external routers. If that command fails or you\u2019re using another network operating system on the external routers, it\u2019s time to start a troubleshooting session. Check the state of the BGP session with a command similar to show ip bgp summary . This is a printout taken from Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 10.1.0.2 4 65100 33 37 0 0 00:01:25 Estab 2 2 Finally, use a command similar to show ip bgp to verify that your router received two prefixes from the EBGP neighbor: the default route and the loopback remote interface (10.0.0.10/32). This is what the printout looks like on Arista EOS: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 0 65100 i * > 10.0.0.10/32 10.1.0.2 0 - 100 0 65100 i Next: Connect with the second upstream provider and advertise your address space. Reference Information This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Customer router: use any device supported by the netlab BGP configuration module . External router needs support for default route origination . If you want to use an unsupported device as an external router, remove the bgp.originate attribute from the lab topology. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on the external router. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux. Lab Wiring Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr","title":"Configure a Single EBGP Session"},{"location":"basic/1-session/#configure-a-single-ebgp-session","text":"We\u2019ll start with the simplest possible scenario: configure an EBGP session between your device and an upstream router (X1). Note: If you\u2019re creating your lab infrastructure manually , it might be better to skip this exercise and go straight to configuring two uplinks .","title":"Configure a Single EBGP Session"},{"location":"basic/1-session/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/1-session Execute netlab up ( device requirements , other options ) Log into your device (RTR) with netlab connect rtr and verify that the IP addresses are configured on all its interfaces.","title":"Start the Lab"},{"location":"basic/1-session/#configuration-tasks","text":"Start BGP routing process with AS number 65000 Configure an EBGP session using the following parameters: neighbor IP address neighbor AS number 10.1.0.2 65100 Tip If you\u2019re using Cumulus Linux or FRR on RTR, you might have to enable the BGP daemon first. You\u2019ll find more details in the Configuring Cumulus Linux and FRRouting lab. Warning If your device happens to be fully compliant with RFC 8212 (example: Cisco IOS XR), you\u2019ll have to configure a permit everything incoming filter on the EBGP session or your device won\u2019t accept updates from its EBGP neighbor(s). On some devices, you\u2019ll also have to activate the EBGP session within the IPv4 address family to tell the BGP daemon on your router to accept IPv4 prefixes from its neighbor. Finally, it\u2019s always a good idea to configure: Neighbor description to simplify troubleshooting and BGP neighbor status logging to get an information message when the BGP session is established.","title":"Configuration Tasks"},{"location":"basic/1-session/#verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on the external routers. If that command fails or you\u2019re using another network operating system on the external routers, it\u2019s time to start a troubleshooting session. Check the state of the BGP session with a command similar to show ip bgp summary . This is a printout taken from Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 10.1.0.2 4 65100 33 37 0 0 00:01:25 Estab 2 2 Finally, use a command similar to show ip bgp to verify that your router received two prefixes from the EBGP neighbor: the default route and the loopback remote interface (10.0.0.10/32). This is what the printout looks like on Arista EOS: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 0 65100 i * > 10.0.0.10/32 10.1.0.2 0 - 100 0 65100 i Next: Connect with the second upstream provider and advertise your address space.","title":"Verification"},{"location":"basic/1-session/#reference-information","text":"This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"basic/1-session/#req","text":"Customer router: use any device supported by the netlab BGP configuration module . External router needs support for default route origination . If you want to use an unsupported device as an external router, remove the bgp.originate attribute from the lab topology. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on the external router. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"basic/1-session/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1","title":"Lab Wiring"},{"location":"basic/1-session/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr","title":"Lab Addressing"},{"location":"basic/2-multihomed/","text":"Configure Multiple EBGP Sessions Now that you know how to configure an EBGP session , let\u2019s move on to a more realistic scenario: you have a site with a WAN edge router connected to two upstream ISPs, and you\u2019re running EBGP with them. The routers in your lab use the following BGP AS numbers. Each upstream router advertises an IPv4 prefix and the default route. Node/ASN Router ID Advertised prefixes AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/2-multihomed Execute netlab up ( device requirements , other options ) Log into your device (RTR) with netlab connect rtr and verify that the IP addresses are configured on all its interfaces. Configuration Tasks Start BGP routing process with AS number 65000 Configure EBGP sessions using the following parameters: Node Neighbor Neighbor IPv4 Neighbor AS rtr x1 10.1.0.2 65100 rtr x2 10.1.0.6 65101 Tip If you\u2019re using Cumulus Linux or FRR on RTR, you might have to enable the BGP daemon first. You\u2019ll find more details in the Configuring Cumulus Linux and FRRouting lab. Warning If your device happens to be fully compliant with RFC 8212 (example: Cisco IOS XR), you\u2019ll have to configure a permit everything incoming filter on all EBGP neighbors or your device won\u2019t accept anything they send you. You can also configure neighbor description and BGP neighbor status logging to get an information message when the BGP session is established. Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on the external routers. If that command fails or you\u2019re using another network operating system on the external routers, it\u2019s time to start a troubleshooting session. Check the state of the BGP session with a command similar to show ip bgp summary . This is a printout taken from Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 10.1.0.2 4 65100 9 8 0 0 00:00:10 Estab 2 2 10.1.0.6 4 65101 7 6 0 0 00:00:06 Estab 2 2 Finally, use a command similar to show ip bgp to verify that your router received three prefixes from each EBGP neighbor: the IPv4 prefix configured on the remote loopback interface, another IPv4 prefix, and the default route. This is what the printout looks like on Arista EOS: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 0 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 0 65101 i * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i * > 192.168.101.0/24 10.1.0.6 0 - 100 0 65101 i Next: Advertise your IPv4 address space to the EBGP neighbors Use multiple BGP AS numbers on the same router (advanced exercise) Reference Information This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Customer router: use any device supported by the netlab BGP configuration module . External routers need support for default route origination . If you want to use an unsupported device as an external router, remove the bgp.originate attribute from the lab topology. You can do automated lab validation when running Arista EOS, Cumulus Linux, or FRR on the external router. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux. Lab Wiring Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback eth1 10.1.0.2/30 x1 -> rtr x2 192.168.101.1/24 Loopback eth1 10.1.0.6/30 x2 -> rtr","title":"Configure Multiple EBGP Sessions"},{"location":"basic/2-multihomed/#configure-multiple-ebgp-sessions","text":"Now that you know how to configure an EBGP session , let\u2019s move on to a more realistic scenario: you have a site with a WAN edge router connected to two upstream ISPs, and you\u2019re running EBGP with them. The routers in your lab use the following BGP AS numbers. Each upstream router advertises an IPv4 prefix and the default route. Node/ASN Router ID Advertised prefixes AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24","title":"Configure Multiple EBGP Sessions"},{"location":"basic/2-multihomed/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/2-multihomed Execute netlab up ( device requirements , other options ) Log into your device (RTR) with netlab connect rtr and verify that the IP addresses are configured on all its interfaces.","title":"Start the Lab"},{"location":"basic/2-multihomed/#configuration-tasks","text":"Start BGP routing process with AS number 65000 Configure EBGP sessions using the following parameters: Node Neighbor Neighbor IPv4 Neighbor AS rtr x1 10.1.0.2 65100 rtr x2 10.1.0.6 65101 Tip If you\u2019re using Cumulus Linux or FRR on RTR, you might have to enable the BGP daemon first. You\u2019ll find more details in the Configuring Cumulus Linux and FRRouting lab. Warning If your device happens to be fully compliant with RFC 8212 (example: Cisco IOS XR), you\u2019ll have to configure a permit everything incoming filter on all EBGP neighbors or your device won\u2019t accept anything they send you. You can also configure neighbor description and BGP neighbor status logging to get an information message when the BGP session is established.","title":"Configuration Tasks"},{"location":"basic/2-multihomed/#verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on the external routers. If that command fails or you\u2019re using another network operating system on the external routers, it\u2019s time to start a troubleshooting session. Check the state of the BGP session with a command similar to show ip bgp summary . This is a printout taken from Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 10.1.0.2 4 65100 9 8 0 0 00:00:10 Estab 2 2 10.1.0.6 4 65101 7 6 0 0 00:00:06 Estab 2 2 Finally, use a command similar to show ip bgp to verify that your router received three prefixes from each EBGP neighbor: the IPv4 prefix configured on the remote loopback interface, another IPv4 prefix, and the default route. This is what the printout looks like on Arista EOS: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 0 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 0 65101 i * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i * > 192.168.101.0/24 10.1.0.6 0 - 100 0 65101 i Next: Advertise your IPv4 address space to the EBGP neighbors Use multiple BGP AS numbers on the same router (advanced exercise)","title":"Verification"},{"location":"basic/2-multihomed/#reference-information","text":"This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"basic/2-multihomed/#req","text":"Customer router: use any device supported by the netlab BGP configuration module . External routers need support for default route origination . If you want to use an unsupported device as an external router, remove the bgp.originate attribute from the lab topology. You can do automated lab validation when running Arista EOS, Cumulus Linux, or FRR on the external router. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"basic/2-multihomed/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1","title":"Lab Wiring"},{"location":"basic/2-multihomed/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback eth1 10.1.0.2/30 x1 -> rtr x2 192.168.101.1/24 Loopback eth1 10.1.0.6/30 x2 -> rtr","title":"Lab Addressing"},{"location":"basic/3-originate/","text":"Advertise IPv4 Prefixes to BGP Neighbors In the previous lab exercise , you configured EBGP sessions with two routers belonging to upstream ISPs. Now it\u2019s time to advertise your address space (IPv4 prefixes) to them so you\u2019ll start receiving some traffic. The routers in your lab use the following BGP AS numbers. Each upstream router advertises an IPv4 prefix and the default route. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure them manually. Node Neighbor Neighbor IPv4 Neighbor AS rtr x1 10.1.0.2 65100 rtr x2 10.1.0.6 65101 Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/3-originate Execute netlab up ( device requirements , other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and basic BGP configuration. Note: netlab will configure IP addresses, start the BGP routing daemon, and configure EBGP sessions on your router. If you\u2019re not using netlab , continue with the configuration you made during the previous exercise . Configuration Tasks You have to advertise 192.168.42.0/24 \u2013 the IP address space belonging to your organization \u2013 to the upstream providers. BGP never originates IP prefixes without being told to do so. The usual ways to do that are: Redistribution of other routing information sources into BGP \u2013 for example, redistributing directly connected subnets or OSPF routes. You\u2019ll practice that in the Redistribute IGP Information Into BGP lab exercise. Origination of configured prefixes, often using network router configuration command. This approach assumes there\u2019s an exact match in the IP routing table While the first method is usually used within enterprise networks that use BGP as an internal routing protocol or to connect to an MPLS/VPN service, you should have tight control over the prefixes advertised to the public Internet. Please use the second method in this lab exercise. Yet again, there are several ways to add an IP prefix that exactly matches the prefix specified in the network command to the IP routing table: Create a new loopback interface and configure an IP address from the desired prefix on the loopback interface. For example, configure the IP address 192.168.42.1/24 on the Loopback1 interface. Add an IP address from the desired prefix as a secondary IP address on an existing loopback interface 1 . For example, configure the IP address 192.168.42.1/24 as a secondary IP address on the Loopback0 interface. Add a static route pointing to nowhere for the desired IP prefix. For example, add the static route for 192.168.42.0/24 pointing to the null0 interface. Try using this approach in this lab exercise. Warning If your device happens to be fully compliant with RFC 8212 (example: Cisco IOS XR), you\u2019ll have to configure a permit everything outgoing filter on all EBGP neighbors or your device won\u2019t send them anything. Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on the external routers. If that command fails or you\u2019re using another network operating system on the external routers, it\u2019s time to start a troubleshooting session. The IPv4 prefixes you want to advertise to EBGP neighbors must be in your router\u2019s BGP table first. A command similar to show ip bgp is thus a good starting point. This is how Arista EOS displays the BGP table: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 0 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 0 65101 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i * > 192.168.101.0/24 10.1.0.6 0 - 100 0 65101 i However, you must know if your router advertises its prefixes to its EBGP neighbors. Some network devices have a show command that displays prefixes advertised to a neighbor. Here\u2019s how that command works on Arista EOS: rtr#show ip bgp neighbor 10.1.0.2 advertised-routes BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast, q - Queued for advertisement % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 192.168.42.0/24 10.1.0.1 - - - - 65000 ? * > 192.168.101.0/24 10.1.0.1 - - - - 65000 65101 i Check the BGP table on the remote router to ensure everything is okay. While that\u2019s a bit hard to do in real life (unless your ISP offers a looking glass ), it\u2019s way more manageable in a lab \u2013 connect to X1 or X2 with netlab connect (or SSH into them if you\u2019re not using netlab ), start vtysh if you\u2019re running FRR or Cumulus Linux on them, and execute the show ip bgp command: $ netlab connect x1 Connecting to container clab-originate-x1, starting bash Use vtysh to connect to FRR daemon x1(bash)#sudo vtysh Hello, this is FRRouting (version 9.0.1_git). Copyright 1996-2005 Kunihiro Ishiguro, et al. x1# show ip bgp BGP table version is 5, local router ID is 192.168.100.1, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *> 192.168.42.0/24 10.1.0.1 0 65000 ? *> 192.168.100.0/24 0.0.0.0(x1) 0 32768 i *> 192.168.101.0/24 10.1.0.1 0 65000 65101 i Displayed 3 routes and 3 total paths Next: If you\u2019re interested in BGP routing policies, proceed to Use BGP Weights to prefer one of the upstream ISPs. If you want to build networks with more than one BGP router, continue with Running BGP in Larger Networks You could also do these optional exercises: Configure BGP for IPv6 Redistribute IGP Information Into BGP Protect EBGP sessions Use BFD to Speed Up BGP Convergence BGP route aggregation Reference Information This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Customer router: use any device supported by the netlab BGP configuration module . External routers need support for default route origination . If you want to use an unsupported device as an external router, remove the bgp.originate attribute from the lab topology. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on the external router. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux. Lab Wiring Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback eth1 10.1.0.2/30 x1 -> rtr x2 192.168.101.1/24 Loopback eth1 10.1.0.6/30 x2 -> rtr It\u2019s a bad idea to add the secondary IP address to a physical interface just to have it in the IP routing table. A physical interface failure would remove the IP prefix from the IP routing table and cause the BGP router to revoke the BGP advertisement. \u21a9","title":"Advertise IPv4 Prefixes to BGP Neighbors"},{"location":"basic/3-originate/#advertise-ipv4-prefixes-to-bgp-neighbors","text":"In the previous lab exercise , you configured EBGP sessions with two routers belonging to upstream ISPs. Now it\u2019s time to advertise your address space (IPv4 prefixes) to them so you\u2019ll start receiving some traffic. The routers in your lab use the following BGP AS numbers. Each upstream router advertises an IPv4 prefix and the default route. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure them manually. Node Neighbor Neighbor IPv4 Neighbor AS rtr x1 10.1.0.2 65100 rtr x2 10.1.0.6 65101","title":"Advertise IPv4 Prefixes to BGP Neighbors"},{"location":"basic/3-originate/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/3-originate Execute netlab up ( device requirements , other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and basic BGP configuration. Note: netlab will configure IP addresses, start the BGP routing daemon, and configure EBGP sessions on your router. If you\u2019re not using netlab , continue with the configuration you made during the previous exercise .","title":"Start the Lab"},{"location":"basic/3-originate/#configuration-tasks","text":"You have to advertise 192.168.42.0/24 \u2013 the IP address space belonging to your organization \u2013 to the upstream providers. BGP never originates IP prefixes without being told to do so. The usual ways to do that are: Redistribution of other routing information sources into BGP \u2013 for example, redistributing directly connected subnets or OSPF routes. You\u2019ll practice that in the Redistribute IGP Information Into BGP lab exercise. Origination of configured prefixes, often using network router configuration command. This approach assumes there\u2019s an exact match in the IP routing table While the first method is usually used within enterprise networks that use BGP as an internal routing protocol or to connect to an MPLS/VPN service, you should have tight control over the prefixes advertised to the public Internet. Please use the second method in this lab exercise. Yet again, there are several ways to add an IP prefix that exactly matches the prefix specified in the network command to the IP routing table: Create a new loopback interface and configure an IP address from the desired prefix on the loopback interface. For example, configure the IP address 192.168.42.1/24 on the Loopback1 interface. Add an IP address from the desired prefix as a secondary IP address on an existing loopback interface 1 . For example, configure the IP address 192.168.42.1/24 as a secondary IP address on the Loopback0 interface. Add a static route pointing to nowhere for the desired IP prefix. For example, add the static route for 192.168.42.0/24 pointing to the null0 interface. Try using this approach in this lab exercise. Warning If your device happens to be fully compliant with RFC 8212 (example: Cisco IOS XR), you\u2019ll have to configure a permit everything outgoing filter on all EBGP neighbors or your device won\u2019t send them anything.","title":"Configuration Tasks"},{"location":"basic/3-originate/#verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on the external routers. If that command fails or you\u2019re using another network operating system on the external routers, it\u2019s time to start a troubleshooting session. The IPv4 prefixes you want to advertise to EBGP neighbors must be in your router\u2019s BGP table first. A command similar to show ip bgp is thus a good starting point. This is how Arista EOS displays the BGP table: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 0 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 0 65101 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i * > 192.168.101.0/24 10.1.0.6 0 - 100 0 65101 i However, you must know if your router advertises its prefixes to its EBGP neighbors. Some network devices have a show command that displays prefixes advertised to a neighbor. Here\u2019s how that command works on Arista EOS: rtr#show ip bgp neighbor 10.1.0.2 advertised-routes BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast, q - Queued for advertisement % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 192.168.42.0/24 10.1.0.1 - - - - 65000 ? * > 192.168.101.0/24 10.1.0.1 - - - - 65000 65101 i Check the BGP table on the remote router to ensure everything is okay. While that\u2019s a bit hard to do in real life (unless your ISP offers a looking glass ), it\u2019s way more manageable in a lab \u2013 connect to X1 or X2 with netlab connect (or SSH into them if you\u2019re not using netlab ), start vtysh if you\u2019re running FRR or Cumulus Linux on them, and execute the show ip bgp command: $ netlab connect x1 Connecting to container clab-originate-x1, starting bash Use vtysh to connect to FRR daemon x1(bash)#sudo vtysh Hello, this is FRRouting (version 9.0.1_git). Copyright 1996-2005 Kunihiro Ishiguro, et al. x1# show ip bgp BGP table version is 5, local router ID is 192.168.100.1, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *> 192.168.42.0/24 10.1.0.1 0 65000 ? *> 192.168.100.0/24 0.0.0.0(x1) 0 32768 i *> 192.168.101.0/24 10.1.0.1 0 65000 65101 i Displayed 3 routes and 3 total paths Next: If you\u2019re interested in BGP routing policies, proceed to Use BGP Weights to prefer one of the upstream ISPs. If you want to build networks with more than one BGP router, continue with Running BGP in Larger Networks You could also do these optional exercises: Configure BGP for IPv6 Redistribute IGP Information Into BGP Protect EBGP sessions Use BFD to Speed Up BGP Convergence BGP route aggregation","title":"Verification"},{"location":"basic/3-originate/#reference-information","text":"This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"basic/3-originate/#req","text":"Customer router: use any device supported by the netlab BGP configuration module . External routers need support for default route origination . If you want to use an unsupported device as an external router, remove the bgp.originate attribute from the lab topology. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on the external router. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"basic/3-originate/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1","title":"Lab Wiring"},{"location":"basic/3-originate/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback eth1 10.1.0.2/30 x1 -> rtr x2 192.168.101.1/24 Loopback eth1 10.1.0.6/30 x2 -> rtr It\u2019s a bad idea to add the secondary IP address to a physical interface just to have it in the IP routing table. A physical interface failure would remove the IP prefix from the IP routing table and cause the BGP router to revoke the BGP advertisement. \u21a9","title":"Lab Addressing"},{"location":"basic/4-ipv6/","text":"Configure BGP for IPv6 In the previous lab exercises, you configured EBGP sessions with two upstream ISPs and advertised IPv4 prefixes to them . Now, let\u2019s add IPv6 to the mix. The routers in your lab use the following BGP AS numbers. Each upstream router advertises an IPv4 prefix, an IPv6 prefix, and the default route. BGP AS Numbers Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 10.0.0.1/32 AS65100 x1 10.0.0.10 192.168.100.0/24 2001:db8:100::/48 AS65101 x2 10.0.0.11 192.168.101.0/24 2001:db8:101::/48 Your router has these EBGP IPv4 neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure them manually. Node Neighbor Neighbor IPv4 Neighbor AS rtr x1 10.1.0.2 65100 rtr x2 10.1.0.6 65101 You will also have to establish IPv6 EBGP sessions with the upstream ISPs using these parameters: Node Neighbor Neighbor AS Neighbor IPv6 rtr x1 65100 2001:db8:42::2 rtr x2 65101 2001:db8:42:1::2 Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/4-ipv6 Execute netlab up ( device requirements , other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and basic BGP configuration. netlab will configure IPv4 addressing, IPv6 addressing, and BGP for IPv4 on your router, resulting in a configuration similar to what you should have done in Advertise IPv4 Prefixes to BGP Neighbors . If you\u2019re not using netlab , continue with the configuration you made during the previous exercise and add IPv6 addresses to your router\u2019s loopback- and WAN interfaces before proceeding. Configuration Tasks You have to: Establish IPv6 EBGP sessions with the upstream providers. Advertise IPv6 prefix 2001:db8:1::/48 to them. Most BGP implementations treat IPv4 and IPv6 in almost the same way and use address families within BGP configuration to configure them. The details vary: On many devices (including Cisco IOS, Arista EOS, Cumulus Linux, and FRR), you must configure IPv4 and IPv6 BGP sessions within the BGP configuration and then activate those sessions within individual address families. Some devices (for example, Nexus OS) expect you to configure BGP neighbors within the address families You might encounter older implementations (for example, old Cisco IOS versions) that configure IPv4 parameters within BGP configuration and IPv6 parameters within the IPv6 address family. I know you\u2019ll figure out those details. Just keep in mind that there\u2019s not much difference (usually) between IPv4 and IPv6, and you already know how to setup EBGP sessions and advertise IPv4 prefixes in BGP . Just do the same thing for IPv6. Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on the external routers. If that command fails or you\u2019re using another network operating system on the external routers, it\u2019s time to start a troubleshooting session. Before digging into the details, check that the IPv6 BGP sessions are up. Use a command similar to show bgp ipv6 summary to verify that: rtr#sh bgp ipv6 unicast summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 2001:db8:42::2 4 65100 9 8 0 0 00:00:09 Estab 2 2 2001:db8:42:1::2 4 65101 9 8 0 0 00:00:09 Estab 2 2 Warning For historical reasons, many network devices have an inconsistent CLI command structure \u2013 the IPv4 BGP commands are more straightforward than IPv6 BGP commands. For example, you can use show bgp summary on Arista EOS to display BGP summary information for the IPv4 address family. At the same time, you have to use show ipv6 unicast summary to display the same information for the IPv6 address family. The IPv6 prefixes you want to advertise to EBGP neighbors must be in your router\u2019s BGP table first. A command similar to show bgp ipv6 or show bgp ipv6 unicast is thus a good starting point. This is how Arista EOS displays it: rtr#show bgp ipv6 unicast BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > ::/0 2001:db8:42::2 0 - 100 0 65100 i * ::/0 2001:db8:42:1::2 0 - 100 0 65101 i * > 2001:db8:1::/48 - - - - 0 ? * > 2001:db8:100::/48 2001:db8:42::2 0 - 100 0 65100 i * > 2001:db8:101::/48 2001:db8:42:1::2 0 - 100 0 65101 i However, you really want to know if the prefixes are advertised to the EBGP neighbors. Some network devices have a show command that displays prefixes advertised to a neighbor. Here\u2019s how that command works on Arista EOS: rtr#show bgp neighbor 2001:db8:42::2 advertised-routes BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast, q - Queued for advertisement % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 2001:db8:1::/48 2001:db8:42::1 - - - - 65000 ? * > 2001:db8:101::/48 2001:db8:42::1 - - - - 65000 65101 i Check the BGP table on the remote router to ensure everything is okay. While that\u2019s a bit hard to do in real life, it\u2019s trivial in a lab \u2013 connect to X1 or X2 with netlab connect (or SSH into them if you\u2019re not using netlab ), start vtysh (if you\u2019re using Cumulus Linux or FRR) and execute the show ip bgp command: $ netlab connect x1 Connecting to container clab-originate-x1, starting bash Use vtysh to connect to FRR daemon x1(bash)#sudo vtysh Hello, this is FRRouting (version 7.5+cl4.4.0u4). Copyright 1996-2005 Kunihiro Ishiguro, et al. x1# show bgp ipv6 unicast BGP table version is 3, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 2001:db8:1::/48 2001:db8:42::1 0 65000 ? *> 2001:db8:100::/48 :: 0 32768 i *> 2001:db8:101::/48 2001:db8:42::1 0 65000 65101 i Displayed 3 routes and 3 total paths Next: If you\u2019re interested in BGP routing policies, proceed to Use BGP Weights to prefer one of the upstream ISPs. If you want to build networks with more than one BGP router, continue with Running BGP in Larger Networks Reference Information This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Customer router: use any device supported by the netlab BGP configuration module . External routers need support for default route origination . If you want to use an unsupported device as an external router, remove the bgp.originate attribute from the lab topology. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on the external router. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux. Lab Wiring This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 2001:db8:42::1/64 rtr -> x1 Ethernet2 10.1.0.5/30 2001:db8:42:1::1/64 rtr -> x2 x1 192.168.100.1/24 2001:db8:100:1::1/48 Loopback swp1 10.1.0.2/30 2001:db8:42::2/64 x1 -> rtr x2 192.168.101.1/24 2001:db8:101:1::1/48 Loopback swp1 10.1.0.6/30 2001:db8:42:1::2/64 x2 -> rtr","title":"Configure BGP for IPv6"},{"location":"basic/4-ipv6/#configure-bgp-for-ipv6","text":"In the previous lab exercises, you configured EBGP sessions with two upstream ISPs and advertised IPv4 prefixes to them . Now, let\u2019s add IPv6 to the mix. The routers in your lab use the following BGP AS numbers. Each upstream router advertises an IPv4 prefix, an IPv6 prefix, and the default route.","title":"Configure BGP for IPv6"},{"location":"basic/4-ipv6/#bgp-as-numbers","text":"Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 10.0.0.1/32 AS65100 x1 10.0.0.10 192.168.100.0/24 2001:db8:100::/48 AS65101 x2 10.0.0.11 192.168.101.0/24 2001:db8:101::/48 Your router has these EBGP IPv4 neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure them manually. Node Neighbor Neighbor IPv4 Neighbor AS rtr x1 10.1.0.2 65100 rtr x2 10.1.0.6 65101 You will also have to establish IPv6 EBGP sessions with the upstream ISPs using these parameters: Node Neighbor Neighbor AS Neighbor IPv6 rtr x1 65100 2001:db8:42::2 rtr x2 65101 2001:db8:42:1::2","title":"BGP AS Numbers"},{"location":"basic/4-ipv6/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/4-ipv6 Execute netlab up ( device requirements , other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and basic BGP configuration. netlab will configure IPv4 addressing, IPv6 addressing, and BGP for IPv4 on your router, resulting in a configuration similar to what you should have done in Advertise IPv4 Prefixes to BGP Neighbors . If you\u2019re not using netlab , continue with the configuration you made during the previous exercise and add IPv6 addresses to your router\u2019s loopback- and WAN interfaces before proceeding.","title":"Start the Lab"},{"location":"basic/4-ipv6/#configuration-tasks","text":"You have to: Establish IPv6 EBGP sessions with the upstream providers. Advertise IPv6 prefix 2001:db8:1::/48 to them. Most BGP implementations treat IPv4 and IPv6 in almost the same way and use address families within BGP configuration to configure them. The details vary: On many devices (including Cisco IOS, Arista EOS, Cumulus Linux, and FRR), you must configure IPv4 and IPv6 BGP sessions within the BGP configuration and then activate those sessions within individual address families. Some devices (for example, Nexus OS) expect you to configure BGP neighbors within the address families You might encounter older implementations (for example, old Cisco IOS versions) that configure IPv4 parameters within BGP configuration and IPv6 parameters within the IPv6 address family. I know you\u2019ll figure out those details. Just keep in mind that there\u2019s not much difference (usually) between IPv4 and IPv6, and you already know how to setup EBGP sessions and advertise IPv4 prefixes in BGP . Just do the same thing for IPv6.","title":"Configuration Tasks"},{"location":"basic/4-ipv6/#verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on the external routers. If that command fails or you\u2019re using another network operating system on the external routers, it\u2019s time to start a troubleshooting session. Before digging into the details, check that the IPv6 BGP sessions are up. Use a command similar to show bgp ipv6 summary to verify that: rtr#sh bgp ipv6 unicast summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 2001:db8:42::2 4 65100 9 8 0 0 00:00:09 Estab 2 2 2001:db8:42:1::2 4 65101 9 8 0 0 00:00:09 Estab 2 2 Warning For historical reasons, many network devices have an inconsistent CLI command structure \u2013 the IPv4 BGP commands are more straightforward than IPv6 BGP commands. For example, you can use show bgp summary on Arista EOS to display BGP summary information for the IPv4 address family. At the same time, you have to use show ipv6 unicast summary to display the same information for the IPv6 address family. The IPv6 prefixes you want to advertise to EBGP neighbors must be in your router\u2019s BGP table first. A command similar to show bgp ipv6 or show bgp ipv6 unicast is thus a good starting point. This is how Arista EOS displays it: rtr#show bgp ipv6 unicast BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > ::/0 2001:db8:42::2 0 - 100 0 65100 i * ::/0 2001:db8:42:1::2 0 - 100 0 65101 i * > 2001:db8:1::/48 - - - - 0 ? * > 2001:db8:100::/48 2001:db8:42::2 0 - 100 0 65100 i * > 2001:db8:101::/48 2001:db8:42:1::2 0 - 100 0 65101 i However, you really want to know if the prefixes are advertised to the EBGP neighbors. Some network devices have a show command that displays prefixes advertised to a neighbor. Here\u2019s how that command works on Arista EOS: rtr#show bgp neighbor 2001:db8:42::2 advertised-routes BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast, q - Queued for advertisement % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 2001:db8:1::/48 2001:db8:42::1 - - - - 65000 ? * > 2001:db8:101::/48 2001:db8:42::1 - - - - 65000 65101 i Check the BGP table on the remote router to ensure everything is okay. While that\u2019s a bit hard to do in real life, it\u2019s trivial in a lab \u2013 connect to X1 or X2 with netlab connect (or SSH into them if you\u2019re not using netlab ), start vtysh (if you\u2019re using Cumulus Linux or FRR) and execute the show ip bgp command: $ netlab connect x1 Connecting to container clab-originate-x1, starting bash Use vtysh to connect to FRR daemon x1(bash)#sudo vtysh Hello, this is FRRouting (version 7.5+cl4.4.0u4). Copyright 1996-2005 Kunihiro Ishiguro, et al. x1# show bgp ipv6 unicast BGP table version is 3, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 2001:db8:1::/48 2001:db8:42::1 0 65000 ? *> 2001:db8:100::/48 :: 0 32768 i *> 2001:db8:101::/48 2001:db8:42::1 0 65000 65101 i Displayed 3 routes and 3 total paths Next: If you\u2019re interested in BGP routing policies, proceed to Use BGP Weights to prefer one of the upstream ISPs. If you want to build networks with more than one BGP router, continue with Running BGP in Larger Networks","title":"Verification"},{"location":"basic/4-ipv6/#reference-information","text":"This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"basic/4-ipv6/#req","text":"Customer router: use any device supported by the netlab BGP configuration module . External routers need support for default route origination . If you want to use an unsupported device as an external router, remove the bgp.originate attribute from the lab topology. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on the external router. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"basic/4-ipv6/#lab-wiring","text":"This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1","title":"Lab Wiring"},{"location":"basic/4-ipv6/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 2001:db8:42::1/64 rtr -> x1 Ethernet2 10.1.0.5/30 2001:db8:42:1::1/64 rtr -> x2 x1 192.168.100.1/24 2001:db8:100:1::1/48 Loopback swp1 10.1.0.2/30 2001:db8:42::2/64 x1 -> rtr x2 192.168.101.1/24 2001:db8:101:1::1/48 Loopback swp1 10.1.0.6/30 2001:db8:42:1::2/64 x2 -> rtr","title":"Lab Addressing"},{"location":"basic/5-redistribute/","text":"Redistribute IGP Information Into BGP When using BGP to connect to the public Internet, you should advertise the minimum number of prefixes needed to make your site reachable from the Internet \u2013 the best approach is to configure the prefixes you want to advertise as you did in the Advertise IPv4 Prefixes to BGP Neighbors lab exercise. That makes little sense when using BGP as a generic routing protocol, for example, when connecting your sites to an MPLS/VPN service. In these scenarios, it\u2019s better to redistribute local routing information (connected subnets, static routes, and IGP routes) into the BGP table; you\u2019ll practice the route redistribution approach in this exercise. Your lab has two sites connected to an MPLS/VPN provider. Each site has a WAN edge router and a core router, running OSPF between them. Your WAN edge routers run BGP with the provider edge routers. In this lab exercise, you must establish connectivity between your sites so that the site routers (S1 and S2) can ping each other. Lab Configuration If you\u2019re using netlab, you\u2019ll start with a preconfigured lab \u2013 netlab will configure IP addressing, OSPF routing, and EBGP sessions. If you\u2019re using any other lab environment, you\u2019ll have to configure all of that manually. The following tables describe the OSPF and BGP setup; the Reference Information section contains IP addressing information. BGP Routers and AS Numbers Node/ASN Router ID Advertised prefixes AS65000 c1 10.0.0.1 AS65001 c2 10.0.0.2 AS65100 x1 10.0.0.10 x2 10.0.0.11 BGP Neighbors Node Neighbor Neighbor AS Neighbor IPv4 c1 x1 65100 10.1.0.2 c2 x2 65100 10.1.0.10 x1 x2 65100 10.0.0.11 c1 65000 10.1.0.1 x2 x1 65100 10.0.0.10 c2 65001 10.1.0.9 OSPF Setup Area 1 (AS 65000) Router Interface IPv4 Address Neighbor(s) c1 Loopback 10.0.0.1/32 Ethernet2 10.1.0.13/30 s1 s1 Loopback 10.0.0.3/32 Ethernet1 10.1.0.14/30 c1 Ethernet2 172.16.0.3/24 passive Area 2 (AS 65001) Router Interface IPv4 Address Neighbor(s) c2 Loopback 10.0.0.2/32 Ethernet2 10.1.0.17/30 s2 s2 Loopback 10.0.0.4/32 Ethernet1 10.1.0.18/30 c2 Ethernet2 172.16.1.4/24 passive Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/5-redistribute Execute netlab up ( device requirements , other options ) Log into your devices with netlab connect and verify IP addresses, OSPF routing, and basic BGP configuration. Note: netlab will configure IP addressing, OSPF routing, and EBGP sessions on your routers. If you\u2019re not using netlab , you must manually configure them. Configuration Tasks You have to exchange OSPF routing information between the two sites using BGP. To get that done, you have to: Configure OSPF-to-BGP redistribution on C1 and C2, usually using a command similar to redistribute ospf 1 within the BGP configuration. Configure BGP-to-OSPF redistribution on C1 and C2, usually using a command similar to redistribute bgp 2 within the OSPF configuration. Warning Two-way redistribution between routing protocols could quickly become exceedingly complex. Advertising the default route into the edge routing protocol is often better than redistributing core routes. You should test this alternative as an optional part of the lab exercise. Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on S1, S2, X1, and X2. The following screenshot shows the validation results before the two-way redistribution was configured: Do manual verification if the netlab validate command fails or you\u2019re using another network operating system on those routers. The local OSPF prefixes you want to advertise to the remote site must be in your router\u2019s BGP table first. A command similar to show ip bgp is thus a good starting point; it\u2019s even better to use a command that displays only the locally-originated prefixes, such as show ip bgp regexp ^$ . The following printout contains the information displayed on C1 running Arista EOS: c1#show ip bgp regexp ^$ BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.14 - - - 0 i * > 172.16.0.0/24 10.1.0.14 - - - 0 i c1#show ip bgp ... Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.14 - - - 0 i * > 10.0.0.4/32 10.1.0.2 0 - 100 0 65100 65001 i * > 172.16.0.0/24 10.1.0.14 - - - 0 i * > 172.16.1.0/24 10.1.0.2 0 - 100 0 65100 65001 i After validating the BGP table on C1 and C2, check that the BGP routes are redistributed into intra-site OSPF \u2013 inspect the routing table and OSPF topology database on S1 and S2. This is what Arista EOS displays on S1: s1>show ip route VRF: default Codes: C - connected, S - static, K - kernel, O - OSPF, IA - OSPF inter area, E1 - OSPF external type 1, E2 - OSPF external type 2, N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type2, B - Other BGP Routes, B I - iBGP, B E - eBGP, R - RIP, I L1 - IS-IS level 1, I L2 - IS-IS level 2, O3 - OSPFv3, A B - BGP Aggregate, A O - OSPF Summary, NG - Nexthop Group Static Route, V - VXLAN Control Service, M - Martian, DH - DHCP client installed default route, DP - Dynamic Policy Route, L - VRF Leaked, G - gRIBI, RC - Route Cache Route Gateway of last resort: O 10.0.0.1/32 [110/20] via 10.1.0.13, Ethernet1 C 10.0.0.3/32 is directly connected, Loopback0 O E2 10.0.0.4/32 [110/1] via 10.1.0.13, Ethernet1 C 10.1.0.12/30 is directly connected, Ethernet1 C 172.16.0.0/24 is directly connected, Ethernet2 O E2 172.16.1.0/24 [110/1] via 10.1.0.13, Ethernet1 Tip Use the netlab connect --show ip route and netlab connect --show ip ospf route commands on FRR or Cumulus Linux. Next: You might encounter service providers that will give you the same BGP AS number for all sites. You can practice that scenario in the Reuse a BGP AS Number Across Multiple Sites exercise. Reference Information This lab uses a superset of the 4-router lab topology . You can still use that topology without the S1/S2 routers and redistribute connected prefixes into BGP. The following information might help you if you plan to build custom lab infrastructure: Device Requirements Customer- and provider routers: use any device supported by the netlab BGP and OSPF configuration modules . You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on the S1, S2, X1, and X2. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains provider router initial device configurations for Cumulus Linux. Lab Wiring Point-to-Point Links Origin Device Origin Port Destination Device Destination Port c1 Ethernet1 x1 swp1 x1 swp2 x2 swp2 c2 Ethernet1 x2 swp3 c1 Ethernet2 s1 Ethernet1 c2 Ethernet2 s2 Ethernet1 Stub Links Origin Device Origin Port Description s1 Ethernet2 s1 -> stub s2 Ethernet2 s2 -> stub Lab Addressing Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 c1 -> x1 Ethernet2 10.1.0.13/30 c1 -> s1 c2 10.0.0.2/32 Loopback Ethernet1 10.1.0.9/30 c2 -> x2 Ethernet2 10.1.0.17/30 c2 -> s2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> c1 swp2 10.1.0.5/30 x1 -> x2 x2 10.0.0.11/32 Loopback swp2 10.1.0.6/30 x2 -> x1 swp3 10.1.0.10/30 x2 -> c2 s1 10.0.0.3/32 Loopback Ethernet1 10.1.0.14/30 s1 -> c1 Ethernet2 172.16.0.3/24 s1 -> stub s2 10.0.0.4/32 Loopback Ethernet1 10.1.0.18/30 s2 -> c2 Ethernet2 172.16.1.4/24 s2 -> stub You might have to add the OSPF process number to the command. \u21a9 You might have to add the BGP AS number to the command, depending on your devices. Some older platforms must be told to redistribute subnets into OSPF. \u21a9","title":"Redistribute IGP Information Into BGP"},{"location":"basic/5-redistribute/#redistribute-igp-information-into-bgp","text":"When using BGP to connect to the public Internet, you should advertise the minimum number of prefixes needed to make your site reachable from the Internet \u2013 the best approach is to configure the prefixes you want to advertise as you did in the Advertise IPv4 Prefixes to BGP Neighbors lab exercise. That makes little sense when using BGP as a generic routing protocol, for example, when connecting your sites to an MPLS/VPN service. In these scenarios, it\u2019s better to redistribute local routing information (connected subnets, static routes, and IGP routes) into the BGP table; you\u2019ll practice the route redistribution approach in this exercise. Your lab has two sites connected to an MPLS/VPN provider. Each site has a WAN edge router and a core router, running OSPF between them. Your WAN edge routers run BGP with the provider edge routers. In this lab exercise, you must establish connectivity between your sites so that the site routers (S1 and S2) can ping each other.","title":"Redistribute IGP Information Into BGP"},{"location":"basic/5-redistribute/#lab-configuration","text":"If you\u2019re using netlab, you\u2019ll start with a preconfigured lab \u2013 netlab will configure IP addressing, OSPF routing, and EBGP sessions. If you\u2019re using any other lab environment, you\u2019ll have to configure all of that manually. The following tables describe the OSPF and BGP setup; the Reference Information section contains IP addressing information.","title":"Lab Configuration"},{"location":"basic/5-redistribute/#bgp-routers-and-as-numbers","text":"Node/ASN Router ID Advertised prefixes AS65000 c1 10.0.0.1 AS65001 c2 10.0.0.2 AS65100 x1 10.0.0.10 x2 10.0.0.11","title":"BGP Routers and AS Numbers"},{"location":"basic/5-redistribute/#bgp-neighbors","text":"Node Neighbor Neighbor AS Neighbor IPv4 c1 x1 65100 10.1.0.2 c2 x2 65100 10.1.0.10 x1 x2 65100 10.0.0.11 c1 65000 10.1.0.1 x2 x1 65100 10.0.0.10 c2 65001 10.1.0.9","title":"BGP Neighbors"},{"location":"basic/5-redistribute/#ospf-setup","text":"","title":"OSPF Setup"},{"location":"basic/5-redistribute/#area-1-as-65000","text":"Router Interface IPv4 Address Neighbor(s) c1 Loopback 10.0.0.1/32 Ethernet2 10.1.0.13/30 s1 s1 Loopback 10.0.0.3/32 Ethernet1 10.1.0.14/30 c1 Ethernet2 172.16.0.3/24 passive","title":"Area 1 (AS 65000)"},{"location":"basic/5-redistribute/#area-2-as-65001","text":"Router Interface IPv4 Address Neighbor(s) c2 Loopback 10.0.0.2/32 Ethernet2 10.1.0.17/30 s2 s2 Loopback 10.0.0.4/32 Ethernet1 10.1.0.18/30 c2 Ethernet2 172.16.1.4/24 passive","title":"Area 2 (AS 65001)"},{"location":"basic/5-redistribute/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/5-redistribute Execute netlab up ( device requirements , other options ) Log into your devices with netlab connect and verify IP addresses, OSPF routing, and basic BGP configuration. Note: netlab will configure IP addressing, OSPF routing, and EBGP sessions on your routers. If you\u2019re not using netlab , you must manually configure them.","title":"Start the Lab"},{"location":"basic/5-redistribute/#configuration-tasks","text":"You have to exchange OSPF routing information between the two sites using BGP. To get that done, you have to: Configure OSPF-to-BGP redistribution on C1 and C2, usually using a command similar to redistribute ospf 1 within the BGP configuration. Configure BGP-to-OSPF redistribution on C1 and C2, usually using a command similar to redistribute bgp 2 within the OSPF configuration. Warning Two-way redistribution between routing protocols could quickly become exceedingly complex. Advertising the default route into the edge routing protocol is often better than redistributing core routes. You should test this alternative as an optional part of the lab exercise.","title":"Configuration Tasks"},{"location":"basic/5-redistribute/#verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on S1, S2, X1, and X2. The following screenshot shows the validation results before the two-way redistribution was configured: Do manual verification if the netlab validate command fails or you\u2019re using another network operating system on those routers. The local OSPF prefixes you want to advertise to the remote site must be in your router\u2019s BGP table first. A command similar to show ip bgp is thus a good starting point; it\u2019s even better to use a command that displays only the locally-originated prefixes, such as show ip bgp regexp ^$ . The following printout contains the information displayed on C1 running Arista EOS: c1#show ip bgp regexp ^$ BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.14 - - - 0 i * > 172.16.0.0/24 10.1.0.14 - - - 0 i c1#show ip bgp ... Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.14 - - - 0 i * > 10.0.0.4/32 10.1.0.2 0 - 100 0 65100 65001 i * > 172.16.0.0/24 10.1.0.14 - - - 0 i * > 172.16.1.0/24 10.1.0.2 0 - 100 0 65100 65001 i After validating the BGP table on C1 and C2, check that the BGP routes are redistributed into intra-site OSPF \u2013 inspect the routing table and OSPF topology database on S1 and S2. This is what Arista EOS displays on S1: s1>show ip route VRF: default Codes: C - connected, S - static, K - kernel, O - OSPF, IA - OSPF inter area, E1 - OSPF external type 1, E2 - OSPF external type 2, N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type2, B - Other BGP Routes, B I - iBGP, B E - eBGP, R - RIP, I L1 - IS-IS level 1, I L2 - IS-IS level 2, O3 - OSPFv3, A B - BGP Aggregate, A O - OSPF Summary, NG - Nexthop Group Static Route, V - VXLAN Control Service, M - Martian, DH - DHCP client installed default route, DP - Dynamic Policy Route, L - VRF Leaked, G - gRIBI, RC - Route Cache Route Gateway of last resort: O 10.0.0.1/32 [110/20] via 10.1.0.13, Ethernet1 C 10.0.0.3/32 is directly connected, Loopback0 O E2 10.0.0.4/32 [110/1] via 10.1.0.13, Ethernet1 C 10.1.0.12/30 is directly connected, Ethernet1 C 172.16.0.0/24 is directly connected, Ethernet2 O E2 172.16.1.0/24 [110/1] via 10.1.0.13, Ethernet1 Tip Use the netlab connect --show ip route and netlab connect --show ip ospf route commands on FRR or Cumulus Linux. Next: You might encounter service providers that will give you the same BGP AS number for all sites. You can practice that scenario in the Reuse a BGP AS Number Across Multiple Sites exercise.","title":"Verification"},{"location":"basic/5-redistribute/#alt","text":"This lab uses a superset of the 4-router lab topology . You can still use that topology without the S1/S2 routers and redistribute connected prefixes into BGP. The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"basic/5-redistribute/#req","text":"Customer- and provider routers: use any device supported by the netlab BGP and OSPF configuration modules . You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on the S1, S2, X1, and X2. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains provider router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"basic/5-redistribute/#lab-wiring","text":"","title":"Lab Wiring"},{"location":"basic/5-redistribute/#point-to-point-links","text":"Origin Device Origin Port Destination Device Destination Port c1 Ethernet1 x1 swp1 x1 swp2 x2 swp2 c2 Ethernet1 x2 swp3 c1 Ethernet2 s1 Ethernet1 c2 Ethernet2 s2 Ethernet1","title":"Point-to-Point Links"},{"location":"basic/5-redistribute/#stub-links","text":"Origin Device Origin Port Description s1 Ethernet2 s1 -> stub s2 Ethernet2 s2 -> stub","title":"Stub Links"},{"location":"basic/5-redistribute/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 c1 -> x1 Ethernet2 10.1.0.13/30 c1 -> s1 c2 10.0.0.2/32 Loopback Ethernet1 10.1.0.9/30 c2 -> x2 Ethernet2 10.1.0.17/30 c2 -> s2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> c1 swp2 10.1.0.5/30 x1 -> x2 x2 10.0.0.11/32 Loopback swp2 10.1.0.6/30 x2 -> x1 swp3 10.1.0.10/30 x2 -> c2 s1 10.0.0.3/32 Loopback Ethernet1 10.1.0.14/30 s1 -> c1 Ethernet2 172.16.0.3/24 s1 -> stub s2 10.0.0.4/32 Loopback Ethernet1 10.1.0.18/30 s2 -> c2 Ethernet2 172.16.1.4/24 s2 -> stub You might have to add the OSPF process number to the command. \u21a9 You might have to add the BGP AS number to the command, depending on your devices. Some older platforms must be told to redistribute subnets into OSPF. \u21a9","title":"Lab Addressing"},{"location":"basic/6-protect/","text":"Protect BGP Sessions with Passwords and GTSM Now that you know how to configure EBGP sessions let\u2019s see how you can make it harder for someone to mess them up. Two mechanisms are commonly used to protect EBGP sessions (or the control plane/CPU of the router running them): Generalized TTL Security Mechanism (GTSM) described in RFC 5082 ( more details ) Cryptographic protection (but not encryption) of underlying TCP sessions with MD5 checksums or TCP Authentication Option described in RFC 5925 . In this lab, you\u2019ll use: GTSM on the EBGP session with ISP-1 MD5 checksum on the EBGP session with ISP-2 1 If you want to practice BGP session protection with TCP-AO, check out the TCP-AO lab 1 . The routers in your lab use the following BGP AS numbers. Each upstream router advertises an IPv4 prefix and the default route. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/6-protect Execute netlab up ( device requirements , other options ) Log into your device (RTR) with netlab connect rtr and verify that the IP addresses are configured on all its interfaces. If you\u2019re using netlab , you\u2019ll get a fully configured lab, including BGP prefix origination on RTR and EBGP sessions between RTR and X1/X2. If you\u2019re using some other lab platform, it\u2019s best if you do this lab exercise after the Advertise IPv4 Prefixes to BGP Neighbors one. Configuration Tasks The EBGP sessions with X1 and X2 will not be established because X1 and X2 use EBGP session protection. They might be stuck in Connect , OpenSent or OpenConfirm state as illustrated by the following printout produced on Arista cEOS: rtr>show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc x1 10.1.0.2 4 65100 11 13 0 76 00:00:14 OpenConfirm x2 10.1.0.6 4 65101 10 8 0 0 00:00:12 Connect To make the lab work: Configure TTL protection (GTSM) on the EBGP session with X1 Configure MD5 TCP checksum on the EBGP session with X2. The password used by X2 is GuessWhat . Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on X1 and X2. Do manual verification if the netlab validate command fails or you\u2019re using another network operating system on those routers. Check the state of the BGP sessions with a command similar to show ip bgp summary . This is a printout taken from Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc x1 10.1.0.2 4 65100 42 63 0 0 00:00:16 Estab 2 2 x2 10.1.0.6 4 65101 17 16 0 0 00:00:04 Estab 2 2 Finally, use a command similar to show ip bgp to display the prefixes your router received from its EBGP neighbors. Reference Information This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Customer router: use any device supported by the netlab BGP configuration module . netlab has to configure default route origination, MD5 password, and GTSM on the external routers. You\u2019ll find the supported devices in the bgp.session platform support table . You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on the X1, and X2. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux. Lab Wiring This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 x1 -> rtr x2 192.168.101.1/24 Loopback swp1 10.1.0.6/30 x2 -> rtr I would love to add a TCP-AO-protected session to this lab, but you cannot use TCP-AO on Cumulus Linux or FRR because it\u2019s not yet (as of September 2023) implemented in the Linux kernel. That\u2019s the price you\u2019re paying for riding on top of other people\u2019s infrastructure. \u21a9 \u21a9","title":"MD5 Passwords and GTSM"},{"location":"basic/6-protect/#protect-bgp-sessions-with-passwords-and-gtsm","text":"Now that you know how to configure EBGP sessions let\u2019s see how you can make it harder for someone to mess them up. Two mechanisms are commonly used to protect EBGP sessions (or the control plane/CPU of the router running them): Generalized TTL Security Mechanism (GTSM) described in RFC 5082 ( more details ) Cryptographic protection (but not encryption) of underlying TCP sessions with MD5 checksums or TCP Authentication Option described in RFC 5925 . In this lab, you\u2019ll use: GTSM on the EBGP session with ISP-1 MD5 checksum on the EBGP session with ISP-2 1 If you want to practice BGP session protection with TCP-AO, check out the TCP-AO lab 1 . The routers in your lab use the following BGP AS numbers. Each upstream router advertises an IPv4 prefix and the default route. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24","title":"Protect BGP Sessions with Passwords and GTSM"},{"location":"basic/6-protect/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/6-protect Execute netlab up ( device requirements , other options ) Log into your device (RTR) with netlab connect rtr and verify that the IP addresses are configured on all its interfaces. If you\u2019re using netlab , you\u2019ll get a fully configured lab, including BGP prefix origination on RTR and EBGP sessions between RTR and X1/X2. If you\u2019re using some other lab platform, it\u2019s best if you do this lab exercise after the Advertise IPv4 Prefixes to BGP Neighbors one.","title":"Start the Lab"},{"location":"basic/6-protect/#configuration-tasks","text":"The EBGP sessions with X1 and X2 will not be established because X1 and X2 use EBGP session protection. They might be stuck in Connect , OpenSent or OpenConfirm state as illustrated by the following printout produced on Arista cEOS: rtr>show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc x1 10.1.0.2 4 65100 11 13 0 76 00:00:14 OpenConfirm x2 10.1.0.6 4 65101 10 8 0 0 00:00:12 Connect To make the lab work: Configure TTL protection (GTSM) on the EBGP session with X1 Configure MD5 TCP checksum on the EBGP session with X2. The password used by X2 is GuessWhat .","title":"Configuration Tasks"},{"location":"basic/6-protect/#verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on X1 and X2. Do manual verification if the netlab validate command fails or you\u2019re using another network operating system on those routers. Check the state of the BGP sessions with a command similar to show ip bgp summary . This is a printout taken from Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc x1 10.1.0.2 4 65100 42 63 0 0 00:00:16 Estab 2 2 x2 10.1.0.6 4 65101 17 16 0 0 00:00:04 Estab 2 2 Finally, use a command similar to show ip bgp to display the prefixes your router received from its EBGP neighbors.","title":"Verification"},{"location":"basic/6-protect/#reference-information","text":"This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"basic/6-protect/#req","text":"Customer router: use any device supported by the netlab BGP configuration module . netlab has to configure default route origination, MD5 password, and GTSM on the external routers. You\u2019ll find the supported devices in the bgp.session platform support table . You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on the X1, and X2. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"basic/6-protect/#lab-wiring","text":"This lab uses a subset of the 4-router lab topology : Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1","title":"Lab Wiring"},{"location":"basic/6-protect/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 x1 -> rtr x2 192.168.101.1/24 Loopback swp1 10.1.0.6/30 x2 -> rtr I would love to add a TCP-AO-protected session to this lab, but you cannot use TCP-AO on Cumulus Linux or FRR because it\u2019s not yet (as of September 2023) implemented in the Linux kernel. That\u2019s the price you\u2019re paying for riding on top of other people\u2019s infrastructure. \u21a9 \u21a9","title":"Lab Addressing"},{"location":"basic/7-bfd/","text":"Use BGP Timers and BFD to Speed Up BGP Convergence Out-of-the-box EBGP is notoriously slow to converge \u2013 it can take up to three minutes to detect a failed EBGP neighbor. It\u2019s possible to tweak BGP timers to detect a failed neighbor in a few seconds. Still, it\u2019s much better to combine BGP with Bidirectional Forwarding Detection (BFD) \u2013 a lightweight protocol that can detect a link- or node failure in milliseconds . In this lab, you\u2019ll use both mechanisms: You\u2019ll tweak the BGP timers to detect a link failure within 10 seconds. You\u2019ll enable BFD on an EBGP neighbor to reduce the failure detection time to approximately a second. The routers in your lab use the following BGP AS numbers. Your routers advertise an IPv4 prefix each; X1 does not advertise BGP prefixes. Node/ASN Router ID Advertised prefixes AS65000 r1 10.0.0.1 192.168.42.0/24 AS65001 r2 10.0.0.2 192.168.43.0/24 AS65100 x1 10.0.0.10 Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/7-bfd Execute netlab up ( device requirements , other options ) Log into your devices (R1,R2) with netlab connect node and verify their configuration. If you\u2019re using netlab , you\u2019ll get a fully configured lab, including BGP prefix origination on R1 and R2 and EBGP sessions between R1/R2 and X1. If you\u2019re using another lab platform, you\u2019ll have to do a fair amount of prep work 1 . Checking the Convergence Time Log into R2 and enable debugging/logging of BGP updates (example: Cisco IOS) or monitoring of the IP routing table (example: Arista EOS event monitor ). If your platform does not have similar functionality, you\u2019ll have to inspect the BGP table on R2 every few seconds. Log into R1 and remove the IP address from the R1-X1 link. Note It would be easier to shut down the R1-X1 link, but that trick doesn\u2019t work with devices like Arista EOS that tear down the BGP session before shutting down the link. I used Arista EOS event monitor on R2, added an IP address on the R1 Ethernet1 interface, and removed it as soon as the BGP session was established. It took BGP almost exactly three minutes to detect the failed EBGP session between X1 and R1: r2#sh event-monitor route match-ip 192.168.42.0/24 2023-09-16 16:02:25.953617|192.168.42.0/24|default|ebgp|0|200|updated|24 2023-09-16 16:05:27.071501|192.168.42.0/24|default|ebgp|0|0|removed|25 Reduce the BGP Timers You can reduce BGP session timers to improve BGP convergence: On the R1-X1 EBGP session, set the keepalive timer to three seconds and the hold timer (timeout) to nine seconds. Clear the EBGP session if needed 2 \u2013 the BGP timers are negotiated during the BGP session establishment phase. Tip FRRouting and Cumulus Linux using the datacenter profile already use low BGP timers. The lab configuration process returns those timers to the default 60/180 seconds. Verification: Verify that you reduced the BGP timers with a command similar to show ip bgp neighbor detail . Repeat the BGP convergence measurements \u2013 X1 should revoke the BGP prefix advertised by R1 within nine seconds. Configure BFD While some BGP implementations allow you to use very small BGP timers (for example, a one-second keepalive timer), you should use something other than that approach if you care about BGP convergence speed. It\u2019s much better to combine BGP with BFD: Configure BFD on the EBGP neighbor session on R1 Clear the BGP session if needed Warning Similarly to what you had to do to get BGP up and running, you have to modify the /etc/frr/daemons file and restart FRR on Culumus Linux and FRRouting virtual machines ( more details ). The BFD daemon is already started in FRRouting containers. Verification: Verify that you have a working BFD session between R1 and X1. Most implementations display the BFD status of a BGP neighbor somewhere within the show ip bgp neighbor details (or similar) command. Some implementations have BFD-specific show commands like show bfd neighbors or show bfd peers . Repeat the BGP convergence measurements \u2013 X1 should revoke the BGP prefix advertised by R1 almost immediately. Automated Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux or FRR on X1. The validation tests check the BGP timers on the R1-X1 EBGP session and the state of the R1-X1 BFD session. This is the printout you should get after completing the lab exercise: Reference Information This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Customer router: use any device supported by the netlab BGP configuration module . netlab has to configure BFD and BGP timers on the external routers. The device you want to use as an external router has to be supported by the BFD configuration module and the bgp.session plugin . You can do automated lab validation with Cumulus Linux or FRR running on X1. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux. Lab Wiring Origin Device Origin Port Destination Device Destination Port r1 Ethernet1 x1 swp1 r2 Ethernet1 x1 swp3 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description r1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 r1 -> x1 r2 10.0.0.2/32 Loopback Ethernet1 10.1.0.5/30 r2 -> x1 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> r1 swp3 10.1.0.6/30 x1 -> r2 I did tell you to use netlab , didn\u2019t I? \u21a9 Some BGP implementations tear down BGP sessions when you change the BGP timers. \u21a9","title":"Use BGP Timers and BFD to Speed Up BGP Convergence"},{"location":"basic/7-bfd/#use-bgp-timers-and-bfd-to-speed-up-bgp-convergence","text":"Out-of-the-box EBGP is notoriously slow to converge \u2013 it can take up to three minutes to detect a failed EBGP neighbor. It\u2019s possible to tweak BGP timers to detect a failed neighbor in a few seconds. Still, it\u2019s much better to combine BGP with Bidirectional Forwarding Detection (BFD) \u2013 a lightweight protocol that can detect a link- or node failure in milliseconds . In this lab, you\u2019ll use both mechanisms: You\u2019ll tweak the BGP timers to detect a link failure within 10 seconds. You\u2019ll enable BFD on an EBGP neighbor to reduce the failure detection time to approximately a second. The routers in your lab use the following BGP AS numbers. Your routers advertise an IPv4 prefix each; X1 does not advertise BGP prefixes. Node/ASN Router ID Advertised prefixes AS65000 r1 10.0.0.1 192.168.42.0/24 AS65001 r2 10.0.0.2 192.168.43.0/24 AS65100 x1 10.0.0.10","title":"Use BGP Timers and BFD to Speed Up BGP Convergence"},{"location":"basic/7-bfd/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/7-bfd Execute netlab up ( device requirements , other options ) Log into your devices (R1,R2) with netlab connect node and verify their configuration. If you\u2019re using netlab , you\u2019ll get a fully configured lab, including BGP prefix origination on R1 and R2 and EBGP sessions between R1/R2 and X1. If you\u2019re using another lab platform, you\u2019ll have to do a fair amount of prep work 1 .","title":"Start the Lab"},{"location":"basic/7-bfd/#checking-the-convergence-time","text":"Log into R2 and enable debugging/logging of BGP updates (example: Cisco IOS) or monitoring of the IP routing table (example: Arista EOS event monitor ). If your platform does not have similar functionality, you\u2019ll have to inspect the BGP table on R2 every few seconds. Log into R1 and remove the IP address from the R1-X1 link. Note It would be easier to shut down the R1-X1 link, but that trick doesn\u2019t work with devices like Arista EOS that tear down the BGP session before shutting down the link. I used Arista EOS event monitor on R2, added an IP address on the R1 Ethernet1 interface, and removed it as soon as the BGP session was established. It took BGP almost exactly three minutes to detect the failed EBGP session between X1 and R1: r2#sh event-monitor route match-ip 192.168.42.0/24 2023-09-16 16:02:25.953617|192.168.42.0/24|default|ebgp|0|200|updated|24 2023-09-16 16:05:27.071501|192.168.42.0/24|default|ebgp|0|0|removed|25","title":"Checking the Convergence Time"},{"location":"basic/7-bfd/#reduce-the-bgp-timers","text":"You can reduce BGP session timers to improve BGP convergence: On the R1-X1 EBGP session, set the keepalive timer to three seconds and the hold timer (timeout) to nine seconds. Clear the EBGP session if needed 2 \u2013 the BGP timers are negotiated during the BGP session establishment phase. Tip FRRouting and Cumulus Linux using the datacenter profile already use low BGP timers. The lab configuration process returns those timers to the default 60/180 seconds. Verification: Verify that you reduced the BGP timers with a command similar to show ip bgp neighbor detail . Repeat the BGP convergence measurements \u2013 X1 should revoke the BGP prefix advertised by R1 within nine seconds.","title":"Reduce the BGP Timers"},{"location":"basic/7-bfd/#configure-bfd","text":"While some BGP implementations allow you to use very small BGP timers (for example, a one-second keepalive timer), you should use something other than that approach if you care about BGP convergence speed. It\u2019s much better to combine BGP with BFD: Configure BFD on the EBGP neighbor session on R1 Clear the BGP session if needed Warning Similarly to what you had to do to get BGP up and running, you have to modify the /etc/frr/daemons file and restart FRR on Culumus Linux and FRRouting virtual machines ( more details ). The BFD daemon is already started in FRRouting containers. Verification: Verify that you have a working BFD session between R1 and X1. Most implementations display the BFD status of a BGP neighbor somewhere within the show ip bgp neighbor details (or similar) command. Some implementations have BFD-specific show commands like show bfd neighbors or show bfd peers . Repeat the BGP convergence measurements \u2013 X1 should revoke the BGP prefix advertised by R1 almost immediately.","title":"Configure BFD"},{"location":"basic/7-bfd/#automated-verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux or FRR on X1. The validation tests check the BGP timers on the R1-X1 EBGP session and the state of the R1-X1 BFD session. This is the printout you should get after completing the lab exercise:","title":"Automated Verification"},{"location":"basic/7-bfd/#reference-information","text":"This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"basic/7-bfd/#req","text":"Customer router: use any device supported by the netlab BGP configuration module . netlab has to configure BFD and BGP timers on the external routers. The device you want to use as an external router has to be supported by the BFD configuration module and the bgp.session plugin . You can do automated lab validation with Cumulus Linux or FRR running on X1. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"basic/7-bfd/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port r1 Ethernet1 x1 swp1 r2 Ethernet1 x1 swp3","title":"Lab Wiring"},{"location":"basic/7-bfd/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description r1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 r1 -> x1 r2 10.0.0.2/32 Loopback Ethernet1 10.1.0.5/30 r2 -> x1 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> r1 swp3 10.1.0.6/30 x1 -> r2 I did tell you to use netlab , didn\u2019t I? \u21a9 Some BGP implementations tear down BGP sessions when you change the BGP timers. \u21a9","title":"Lab Addressing"},{"location":"basic/8-aggregate/","text":"BGP Route Aggregation In the Advertise IPv4 Prefixes to BGP Neighbors , you configured a router to advertise the IP prefix assigned to your site unconditionally. That\u2019s good enough for small, non-redundant networks; in more complex scenarios, you\u2019d want a WAN edge router to advertise a prefix only if it can reach at least some parts of that address space. For example, in this lab exercise, you\u2019ll configure the WAN edge router on Site-1 (R1) to advertise IP prefix 10.42.42.0/24 only if it has at least one more specific prefix in the IP routing table. You could achieve that goal in various ways; we\u2019ll use the most straightforward approach \u2013 route aggregation (called summarization in other routing protocols). You\u2019ll configure BGP route aggregation on R1 and observe the results on R2. Lab Setup If you\u2019re using netlab, you\u2019ll start with a preconfigured lab \u2013 netlab will configure IP addressing, OSPF routing, and EBGP sessions. If you\u2019re using any other lab environment, you\u2019ll have to configure all of that manually. The following tables describe the OSPF and BGP setup; the Reference Information section contains IP addressing information. BGP Routers and AS Numbers Node/ASN Router ID Advertised prefixes AS65000 ce1 10.0.0.1 AS65001 ce2 10.0.0.2 AS65100 x1 10.0.0.10 BGP Neighbors Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 ce1 10.0.0.1 65000 x1 65100 10.1.0.2 ce2 10.0.0.2 65001 x1 65100 10.1.0.10 x1 10.0.0.10 65100 ce1 65000 10.1.0.1 ce2 65001 10.1.0.9 OSPF Setup (Area 0.0.0.0) Router Interface IPv4 Address Neighbor(s) ce1 Loopback 10.0.0.1/32 Ethernet2 10.1.0.5/30 sw sw Loopback 10.42.42.1/32 swp1 10.1.0.6/30 ce1 swp3 10.42.42.129/25 passive Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/8-aggregate Execute netlab up ( device requirements , other options ) Log into your devices with netlab connect and verify IP addresses, OSPF routing, and basic BGP configuration. Note netlab will configure IP addressing, OSPF routing, and EBGP sessions on your routers. If you\u2019re not using netlab , you must manually configure them. Redistribute OSPF into BGP BGP will summarize (aggregate) only prefixes already in the BGP table. Your BGP tables are currently empty (you have not configured any prefixes to advertise). Redistribute OSPF into BGP on R1 to populate the BGP table with the prefixes from the 10.42.42.0/24 address space as you did in the Redistribute IGP Information Into BGP lab exercise. Note When you configure OSPF-to-BGP redistribution, some network devices redistribute only routes received from other OSPF routers, while other devices also redistribute local subnets on which you\u2019re running OSPF. This implementation difference will not impact our lab exercise but might result in slightly different printouts. After configuring the OSPF-to-BGP redistribution on R1 (running Arista cEOS), the BGP table on R1 contains numerous prefixes learned via OSPF 1 : ce1#show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.6 - - - 0 i * > 10.42.42.16/28 10.1.0.6 - - - 0 i * > 10.42.42.128/25 10.1.0.6 - - - 0 i R1 advertises all these prefixes to X1, which propagates them to R2. The BGP table on R2 (and the global Internet) thus contains internal prefixes from Site-1 (a bad idea, but we\u2019ll fix it). ce2>show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.10 0 - 100 0 65100 65000 i * > 10.42.42.16/28 10.1.0.10 0 - 100 0 65100 65000 i * > 10.42.42.128/25 10.1.0.10 0 - 100 0 65100 65000 i Configure BGP Route Aggregation This step is the crux of this lab exercise: using a BGP configuration command similar to aggregate-address , create a summary prefix 10.42.42.0/24 that will be advertised if at least one more specific prefix is in the BGP table. The aggregate BGP prefix should appear in the BGP table on R1: ce1#show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.6 - - - 0 i * > 10.42.42.0/24 - 0 - - 0 i * > 10.42.42.16/28 10.1.0.6 - - - 0 i * > 10.42.42.128/25 10.1.0.6 - - - 0 i The aggregated prefix is propagated to X1 and R2 (the good part), but R1 still advertises more specific prefixes (the bad part) and a loopback prefix (the ugly part). ce2>show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.10 0 - 100 0 65100 65000 i * > 10.42.42.0/24 10.1.0.10 0 - 100 0 65100 65000 i * > 10.42.42.16/28 10.1.0.10 0 - 100 0 65100 65000 i * > 10.42.42.128/25 10.1.0.10 0 - 100 0 65100 65000 i Suppress More Specific Prefixes Most BGP implementations can suppress more specific prefixes within an aggregate prefix. This functionality is often configured with the summary-only option of the aggregate-address BGP configuration command. To fix the bad part of your current implementation, suppress more specific prefixes of the prefix 10.42.42.0/24 on R1. After configuring the prefix suppression, examine the BGP table on R1. The more specific prefixes should be marked with s (suppressed): ce1#show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.6 - - - 0 i * > 10.42.42.0/24 - 0 - - 0 i *s> 10.42.42.16/28 10.1.0.6 - - - 0 i *s> 10.42.42.128/25 10.1.0.6 - - - 0 i The suppressed prefixes should not be visible on R2 (unless you\u2019re dealing with a nasty BGP bug ): ce2>show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.10 0 - 100 0 65100 65000 i * > 10.42.42.0/24 10.1.0.10 0 - 100 0 65100 65000 i Filter Outbound Updates Finally, let\u2019s fix the ugly part \u2013 deploy an outbound filter on the R1-X1 EBGP session that accepts only the prefixes you want to advertise ( 10.42.42.0/24 ) 2 . For more details, see the Filter Advertised Prefixes lab exercise. With the outbound filter in place, the BGP table on R2 should contain only the desired IP prefix assigned to Site-1. Mission Accomplished! ce2>show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.42.42.0/24 10.1.0.10 0 - 100 0 65100 65000 i Final Verification Disable the R1-SW link. Verify that the OSPF routes advertised by SW disappear from the BGP table on R1 Verify that R1 advertises no BGP prefixes to X1/R2. Next: Limit the Number of Accepted BGP Prefixes Automated Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on CE1. The validation tests check: The state of CE1-X1 EBGP session Whether CE1 advertises the summary prefix and suppresses the more specific prefixes Whether CE1 filters the loopback prefixes from the outgoing EBGP updates. This is the printout you could get after configuring route aggregation but before configuring an outbound prefix filter: Reference Information This lab uses the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Use any device supported by the netlab BGP and OSPF configuration modules . You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on X1. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains initial device configurations for Cumulus Linux. Lab Wiring Origin Device Origin Port Destination Device Destination Port ce1 Ethernet1 x1 swp1 ce1 Ethernet2 sw swp1 ce2 Ethernet1 x1 swp3 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description ce1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 ce1 -> x1 Ethernet2 10.1.0.5/30 ce1 -> sw ce2 10.0.0.2/32 Loopback Ethernet1 10.1.0.9/30 ce2 -> x1 sw 10.0.0.3/32 Loopback swp1 10.1.0.6/30 sw -> ce1 lo1 10.42.42.129/25 Loopback lo2 10.42.42.17/28 Loopback x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> ce1 swp3 10.1.0.10/30 x1 -> ce2 I\u2019m using the |begin Network filter on the show ip bgp command to skip the printout legend. \u21a9 You should be a good Internet citizen and always do that anyway \u2013 you wouldn\u2019t want to make headline news when your upstream providers fail to do their job . \u21a9","title":"BGP Route Aggregation"},{"location":"basic/8-aggregate/#bgp-route-aggregation","text":"In the Advertise IPv4 Prefixes to BGP Neighbors , you configured a router to advertise the IP prefix assigned to your site unconditionally. That\u2019s good enough for small, non-redundant networks; in more complex scenarios, you\u2019d want a WAN edge router to advertise a prefix only if it can reach at least some parts of that address space. For example, in this lab exercise, you\u2019ll configure the WAN edge router on Site-1 (R1) to advertise IP prefix 10.42.42.0/24 only if it has at least one more specific prefix in the IP routing table. You could achieve that goal in various ways; we\u2019ll use the most straightforward approach \u2013 route aggregation (called summarization in other routing protocols). You\u2019ll configure BGP route aggregation on R1 and observe the results on R2.","title":"BGP Route Aggregation"},{"location":"basic/8-aggregate/#lab-setup","text":"If you\u2019re using netlab, you\u2019ll start with a preconfigured lab \u2013 netlab will configure IP addressing, OSPF routing, and EBGP sessions. If you\u2019re using any other lab environment, you\u2019ll have to configure all of that manually. The following tables describe the OSPF and BGP setup; the Reference Information section contains IP addressing information.","title":"Lab Setup"},{"location":"basic/8-aggregate/#bgp-routers-and-as-numbers","text":"Node/ASN Router ID Advertised prefixes AS65000 ce1 10.0.0.1 AS65001 ce2 10.0.0.2 AS65100 x1 10.0.0.10","title":"BGP Routers and AS Numbers"},{"location":"basic/8-aggregate/#bgp-neighbors","text":"Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 ce1 10.0.0.1 65000 x1 65100 10.1.0.2 ce2 10.0.0.2 65001 x1 65100 10.1.0.10 x1 10.0.0.10 65100 ce1 65000 10.1.0.1 ce2 65001 10.1.0.9","title":"BGP Neighbors"},{"location":"basic/8-aggregate/#ospf-setup-area-0000","text":"Router Interface IPv4 Address Neighbor(s) ce1 Loopback 10.0.0.1/32 Ethernet2 10.1.0.5/30 sw sw Loopback 10.42.42.1/32 swp1 10.1.0.6/30 ce1 swp3 10.42.42.129/25 passive","title":"OSPF Setup (Area 0.0.0.0)"},{"location":"basic/8-aggregate/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/8-aggregate Execute netlab up ( device requirements , other options ) Log into your devices with netlab connect and verify IP addresses, OSPF routing, and basic BGP configuration. Note netlab will configure IP addressing, OSPF routing, and EBGP sessions on your routers. If you\u2019re not using netlab , you must manually configure them.","title":"Start the Lab"},{"location":"basic/8-aggregate/#redistribute-ospf-into-bgp","text":"BGP will summarize (aggregate) only prefixes already in the BGP table. Your BGP tables are currently empty (you have not configured any prefixes to advertise). Redistribute OSPF into BGP on R1 to populate the BGP table with the prefixes from the 10.42.42.0/24 address space as you did in the Redistribute IGP Information Into BGP lab exercise. Note When you configure OSPF-to-BGP redistribution, some network devices redistribute only routes received from other OSPF routers, while other devices also redistribute local subnets on which you\u2019re running OSPF. This implementation difference will not impact our lab exercise but might result in slightly different printouts. After configuring the OSPF-to-BGP redistribution on R1 (running Arista cEOS), the BGP table on R1 contains numerous prefixes learned via OSPF 1 : ce1#show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.6 - - - 0 i * > 10.42.42.16/28 10.1.0.6 - - - 0 i * > 10.42.42.128/25 10.1.0.6 - - - 0 i R1 advertises all these prefixes to X1, which propagates them to R2. The BGP table on R2 (and the global Internet) thus contains internal prefixes from Site-1 (a bad idea, but we\u2019ll fix it). ce2>show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.10 0 - 100 0 65100 65000 i * > 10.42.42.16/28 10.1.0.10 0 - 100 0 65100 65000 i * > 10.42.42.128/25 10.1.0.10 0 - 100 0 65100 65000 i","title":"Redistribute OSPF into BGP"},{"location":"basic/8-aggregate/#configure-bgp-route-aggregation","text":"This step is the crux of this lab exercise: using a BGP configuration command similar to aggregate-address , create a summary prefix 10.42.42.0/24 that will be advertised if at least one more specific prefix is in the BGP table. The aggregate BGP prefix should appear in the BGP table on R1: ce1#show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.6 - - - 0 i * > 10.42.42.0/24 - 0 - - 0 i * > 10.42.42.16/28 10.1.0.6 - - - 0 i * > 10.42.42.128/25 10.1.0.6 - - - 0 i The aggregated prefix is propagated to X1 and R2 (the good part), but R1 still advertises more specific prefixes (the bad part) and a loopback prefix (the ugly part). ce2>show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.10 0 - 100 0 65100 65000 i * > 10.42.42.0/24 10.1.0.10 0 - 100 0 65100 65000 i * > 10.42.42.16/28 10.1.0.10 0 - 100 0 65100 65000 i * > 10.42.42.128/25 10.1.0.10 0 - 100 0 65100 65000 i","title":"Configure BGP Route Aggregation"},{"location":"basic/8-aggregate/#suppress-more-specific-prefixes","text":"Most BGP implementations can suppress more specific prefixes within an aggregate prefix. This functionality is often configured with the summary-only option of the aggregate-address BGP configuration command. To fix the bad part of your current implementation, suppress more specific prefixes of the prefix 10.42.42.0/24 on R1. After configuring the prefix suppression, examine the BGP table on R1. The more specific prefixes should be marked with s (suppressed): ce1#show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.6 - - - 0 i * > 10.42.42.0/24 - 0 - - 0 i *s> 10.42.42.16/28 10.1.0.6 - - - 0 i *s> 10.42.42.128/25 10.1.0.6 - - - 0 i The suppressed prefixes should not be visible on R2 (unless you\u2019re dealing with a nasty BGP bug ): ce2>show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.3/32 10.1.0.10 0 - 100 0 65100 65000 i * > 10.42.42.0/24 10.1.0.10 0 - 100 0 65100 65000 i","title":"Suppress More Specific Prefixes"},{"location":"basic/8-aggregate/#filter-outbound-updates","text":"Finally, let\u2019s fix the ugly part \u2013 deploy an outbound filter on the R1-X1 EBGP session that accepts only the prefixes you want to advertise ( 10.42.42.0/24 ) 2 . For more details, see the Filter Advertised Prefixes lab exercise. With the outbound filter in place, the BGP table on R2 should contain only the desired IP prefix assigned to Site-1. Mission Accomplished! ce2>show ip bgp|begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.42.42.0/24 10.1.0.10 0 - 100 0 65100 65000 i","title":"Filter Outbound Updates"},{"location":"basic/8-aggregate/#final-verification","text":"Disable the R1-SW link. Verify that the OSPF routes advertised by SW disappear from the BGP table on R1 Verify that R1 advertises no BGP prefixes to X1/R2. Next: Limit the Number of Accepted BGP Prefixes","title":"Final Verification"},{"location":"basic/8-aggregate/#automated-verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on CE1. The validation tests check: The state of CE1-X1 EBGP session Whether CE1 advertises the summary prefix and suppresses the more specific prefixes Whether CE1 filters the loopback prefixes from the outgoing EBGP updates. This is the printout you could get after configuring route aggregation but before configuring an outbound prefix filter:","title":"Automated Verification"},{"location":"basic/8-aggregate/#reference-information","text":"This lab uses the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"basic/8-aggregate/#req","text":"Use any device supported by the netlab BGP and OSPF configuration modules . You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on X1. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"basic/8-aggregate/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port ce1 Ethernet1 x1 swp1 ce1 Ethernet2 sw swp1 ce2 Ethernet1 x1 swp3","title":"Lab Wiring"},{"location":"basic/8-aggregate/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description ce1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 ce1 -> x1 Ethernet2 10.1.0.5/30 ce1 -> sw ce2 10.0.0.2/32 Loopback Ethernet1 10.1.0.9/30 ce2 -> x1 sw 10.0.0.3/32 Loopback swp1 10.1.0.6/30 sw -> ce1 lo1 10.42.42.129/25 Loopback lo2 10.42.42.17/28 Loopback x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> ce1 swp3 10.1.0.10/30 x1 -> ce2 I\u2019m using the |begin Network filter on the show ip bgp command to skip the printout legend. \u21a9 You should be a good Internet citizen and always do that anyway \u2013 you wouldn\u2019t want to make headline news when your upstream providers fail to do their job . \u21a9","title":"Lab Addressing"},{"location":"basic/9-ao/","text":"Protect BGP Sessions with TCP Authentication Option (TCP-AO) In a previous lab we used MD5 checksum to password-protect EBGP sessions . In this one we\u2019ll implement EBGP session protection using a newer mechanism: TCP Authentication Option defined in RFC 5925 . Lab Requirements This lab uses a slightly different supporting infrastructure than all other BGP labs. Linux kernel does not support TCP-AO (as of September 2023), which means that we cannot use virtual machines or containers running Cumulus Linux or Ubuntu/FRR as the external BGP routers. It\u2019s also impossible to use Arista cEOS container as it relies on the TCP/IP stack of the underlying Linux kernel. The only way to run this lab is to start external routers as virtual machines using Virtualbox or KVM/libvirt virtualization. netlab currently supports TCP-AO on these devices: Arista EOS virtual machines Cisco CSR 1000v Nokia SR-OS (virtual machine running in a container) Warning This lab was designed to be used with netlab . You need netlab release 1.6.3 or later to run it \u2013 we added TCP-AO support in that release. Adjusting Lab Topology The topology file ( topology.yml ) in the basic/9-ao directory uses Arista EOS virtual machines. You can use it as-is if: You\u2019re running labs with Virtualbox or KVM/libvirt and You installed Arista EOS Vagrant box (instructions: Virtualbox , KVM/libvirt ) If you created Cisco CSR1000v Vagrant box for your environment, replace device: eos in the external group in topology.yml with device: csr . If you want to run your labs with containers, you could use Nokia SR-OS as the external router 1 \u2013 replace the device: eos with device: sros . netlab uses containerlab provider to run Nokia SR-OS, so you might have to add provider: clab to the external group. Warning Nokia SR-OS runs as a virtual machine inside a container. You\u2019ll still need nested virtualization to run it if you\u2019re running your labs in a Ubuntu virtual machine. TCP-AO does not work on Arista EOS container as it uses underlying Linux TCP/IP stack. Start the Lab Assuming you already set up your lab infrastructure . Change directory to basic/9-ao Execute netlab up Log into your device (RTR) with netlab connect rtr and verify its configuration. If you\u2019re using a device supported by netlab , you\u2019ll get configured interfaces, IP addresses, BGP routing process, and BGP neighbors. If you\u2019re using an unsupported device, it\u2019s best if you do this lab exercise after the Advertise IPv4 Prefixes to BGP Neighbors one. If you\u2019re using your own lab infrastructure, use the wiring information from the protect EBGP sessions lab. Configuration Tasks The EBGP sessions with X1 and X2 will not be established because X1 and X2 use TCP-AO BGP session protection. They might be stuck in Connect , OpenSent or OpenConfirm state as illustrated by the following printout produced on Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc x1 10.1.0.2 4 65100 11 17 0 0 00:00:04 Connect x2 10.1.0.6 4 65101 11 15 0 0 00:00:07 Connect To make BGP sessions work, configure TCP-AO on both EBGP sessions on your router using the following parameters: BGP neighbor IP address TCP-AO secret Algorithm x1 10.1.0.2 BigSecret HMAC-SHA1-96 x2 10.1.0.6 GuessWhat HMAC-SHA1-96 Verification Check the state of the BGP sessions with a command similar to show ip bgp summary \u2013 the BGP sessions should be established, and you should have received several prefixes from both neighbors. This is a printout taken from Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc x1 10.1.0.2 4 65100 16 24 0 0 00:00:09 Estab 1 1 x2 10.1.0.6 4 65101 16 22 0 0 00:00:04 Estab 1 1 You can also inspect the TCP-AO details on some network devices. This is what Arista EOS displays as part of the show ip bgp neighbor command: rtr#show ip bgp neighbors 10.1.0.2|section TCP-AO TCP-AO Authentication: Profile: x1 MAC algorithm: hmac-sha1-96 Current key ID: 0 Next receive key ID: 0 Active receive key IDs: 0 Assuming you manage to get a license to do it from Nokia. \u21a9","title":"TCP Autentication Option (TCP-AO)"},{"location":"basic/9-ao/#protect-bgp-sessions-with-tcp-authentication-option-tcp-ao","text":"In a previous lab we used MD5 checksum to password-protect EBGP sessions . In this one we\u2019ll implement EBGP session protection using a newer mechanism: TCP Authentication Option defined in RFC 5925 .","title":"Protect BGP Sessions with TCP Authentication Option (TCP-AO)"},{"location":"basic/9-ao/#lab-requirements","text":"This lab uses a slightly different supporting infrastructure than all other BGP labs. Linux kernel does not support TCP-AO (as of September 2023), which means that we cannot use virtual machines or containers running Cumulus Linux or Ubuntu/FRR as the external BGP routers. It\u2019s also impossible to use Arista cEOS container as it relies on the TCP/IP stack of the underlying Linux kernel. The only way to run this lab is to start external routers as virtual machines using Virtualbox or KVM/libvirt virtualization. netlab currently supports TCP-AO on these devices: Arista EOS virtual machines Cisco CSR 1000v Nokia SR-OS (virtual machine running in a container) Warning This lab was designed to be used with netlab . You need netlab release 1.6.3 or later to run it \u2013 we added TCP-AO support in that release.","title":"Lab Requirements"},{"location":"basic/9-ao/#adjusting-lab-topology","text":"The topology file ( topology.yml ) in the basic/9-ao directory uses Arista EOS virtual machines. You can use it as-is if: You\u2019re running labs with Virtualbox or KVM/libvirt and You installed Arista EOS Vagrant box (instructions: Virtualbox , KVM/libvirt ) If you created Cisco CSR1000v Vagrant box for your environment, replace device: eos in the external group in topology.yml with device: csr . If you want to run your labs with containers, you could use Nokia SR-OS as the external router 1 \u2013 replace the device: eos with device: sros . netlab uses containerlab provider to run Nokia SR-OS, so you might have to add provider: clab to the external group. Warning Nokia SR-OS runs as a virtual machine inside a container. You\u2019ll still need nested virtualization to run it if you\u2019re running your labs in a Ubuntu virtual machine. TCP-AO does not work on Arista EOS container as it uses underlying Linux TCP/IP stack.","title":"Adjusting Lab Topology"},{"location":"basic/9-ao/#start-the-lab","text":"Assuming you already set up your lab infrastructure . Change directory to basic/9-ao Execute netlab up Log into your device (RTR) with netlab connect rtr and verify its configuration. If you\u2019re using a device supported by netlab , you\u2019ll get configured interfaces, IP addresses, BGP routing process, and BGP neighbors. If you\u2019re using an unsupported device, it\u2019s best if you do this lab exercise after the Advertise IPv4 Prefixes to BGP Neighbors one. If you\u2019re using your own lab infrastructure, use the wiring information from the protect EBGP sessions lab.","title":"Start the Lab"},{"location":"basic/9-ao/#configuration-tasks","text":"The EBGP sessions with X1 and X2 will not be established because X1 and X2 use TCP-AO BGP session protection. They might be stuck in Connect , OpenSent or OpenConfirm state as illustrated by the following printout produced on Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc x1 10.1.0.2 4 65100 11 17 0 0 00:00:04 Connect x2 10.1.0.6 4 65101 11 15 0 0 00:00:07 Connect To make BGP sessions work, configure TCP-AO on both EBGP sessions on your router using the following parameters: BGP neighbor IP address TCP-AO secret Algorithm x1 10.1.0.2 BigSecret HMAC-SHA1-96 x2 10.1.0.6 GuessWhat HMAC-SHA1-96","title":"Configuration Tasks"},{"location":"basic/9-ao/#verification","text":"Check the state of the BGP sessions with a command similar to show ip bgp summary \u2013 the BGP sessions should be established, and you should have received several prefixes from both neighbors. This is a printout taken from Arista EOS: rtr#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc x1 10.1.0.2 4 65100 16 24 0 0 00:00:09 Estab 1 1 x2 10.1.0.6 4 65101 16 22 0 0 00:00:04 Estab 1 1 You can also inspect the TCP-AO details on some network devices. This is what Arista EOS displays as part of the show ip bgp neighbor command: rtr#show ip bgp neighbors 10.1.0.2|section TCP-AO TCP-AO Authentication: Profile: x1 MAC algorithm: hmac-sha1-96 Current key ID: 0 Next receive key ID: 0 Active receive key IDs: 0 Assuming you manage to get a license to do it from Nokia. \u21a9","title":"Verification"},{"location":"basic/b-max-prefix/","text":"Limit the Number of Accepted BGP Prefixes Numerous global BGP routing incidents are caused by fat fingers, including those in which a network running BGP starts advertising an enormous amount of BGP prefixes 1 . Most BGP implementations contain mechanisms that shut down BGP sessions with neighbors that advertise excessive BGP prefixes; you\u2019ll practice them in this lab exercise. Warning Recent Ansible releases broke the Ansible playbook used within the netlab config command. You must use netlab release 1.7.2-post1 or later to run this lab. Upgrade netlab with the sudo pip3 install --upgrade networklab command or a similar command, depending on your Python setup. Existing BGP Configuration The routers in your lab use the following BGP AS numbers. The customer router advertises either a single prefix or over a dozen prefixes. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 10.0.0.1/32 AS65100 customer 192.168.100.1 192.168.100.0/24 Your router has a single EBGP neighbor (the customer router). netlab configures it automatically. Configure BGP manually if you\u2019re using some other lab infrastructure. Node Neighbor Neighbor AS Neighbor IPv4 rtr customer 65100 10.1.0.1 Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/b-max-prefix Execute netlab up ( device requirements , other options ) Log into your router (RTR) with netlab connect rtr and verify that the IP addresses and the EBGP sessions are properly configured. The Problem Log into your router and examine its BGP table. You should see two prefixes: a local one and one from the customer router. This is the printout you would get on Arista cEOS: rtr>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.1/32 - - - - 0 i * > 192.168.100.0/24 10.1.0.1 0 - 100 0 65100 i Now emulate a fat fingers incident in the customer network. Use sh to execute the start script, optionally specifying the number of prefixes you want the customer to generate: $ sh start 20 Generating 20 prefixes on the customer router PLAY 1: DEPLOY DEVICE CONFIGURATION task 9: customer task 12: customer Done Tip If you don\u2019t want to run a shell script, use netlab config addprefixes --limit customer Next, log into your router and examine its BGP table. You should see twenty additional prefixes advertised by the customer router: rtr>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.1/32 - - - - 0 i * > 10.42.1.0/24 10.1.0.1 0 - 100 0 65100 i * > 10.42.2.0/24 10.1.0.1 0 - 100 0 65100 i * > 10.42.3.0/24 10.1.0.1 0 - 100 0 65100 i * > 10.42.4.0/24 10.1.0.1 0 - 100 0 65100 i * > 10.42.5.0/24 10.1.0.1 0 - 100 0 65100 i * > 10.42.6.0/24 10.1.0.1 0 - 100 0 65100 i * > 10.42.7.0/24 10.1.0.1 0 - 100 0 65100 i * > 10.42.8.0/24 10.1.0.1 0 - 100 0 65100 i * > 10.42.9.0/24 10.1.0.1 0 - 100 0 65100 i ... The rest of the printout was deleted ... To stop the fat finger incident, run sh stop or netlab config removeprefixes --limit customer . $ sh stop Stop advertising extra BGP prefixes PLAY 1: DEPLOY DEVICE CONFIGURATION task 11: customer Done Let\u2019s make sure we\u2019re not affected by the customer\u2019s clumsiness. The best way to do that is to limit the number of BGP prefixes we accept from the customer. Configuration and Validation Configure BGP session logging on your router and ensure the logging messages are sent to the terminal window you\u2019re using to connect to the router. Limit the number of prefixes accepted from the customer router to 10 using a router configuration command similar to neighbor maximum-routes . Generate a warning if the number of prefixes is exceeded. In another window, execute the sh start 15 command 2 and check whether you got the expected warning. This is what you should get on Arista cEOS: %BGP-5-AFI_SAFI_MAX_ROUTES_WARNING: Peer 10.1.0.1 (VRF default AS 65100) has exceeded its configured maximum total number of routes (10) of address family IPv4 Unicast; ROUTING INFORMATION IS BEING LOST Tip Some BGP implementations generate a warning message while accepting all incoming prefixes. Arista EOS generates a warning message and drops random extraneous prefixes. Stop the fat finger incident with sh stop Limit the number of prefixes accepted from the customer router to 20, with a warning generated when the number of prefixes exceeds 10. Simulate a lower-impact incident with sh start 10 . You should see a warning message on your router; this is the message generated by Arista cEOS: %BGP-5-AFI_SAFI_MAX_ROUTES_EARLY_WARNING: Number of paths received from peer 10.1.0.1 (VRF default AS 65100) has exceeded the configured early warning limit (10) of address family IPv4 Unicast Increase the severity of the incident with sh start 20 . Your router should terminate the EBGP session with the customer router and generate an error message similar to the one generated by Arista cEOS: %BGP-5-ADJCHANGE: peer 10.1.0.1 (VRF default AS 65100) old state Established event MaxPath new state Idle %BGP-3-NOTIFICATION: sent to neighbor 10.1.0.1 (VRF default AS 65100) 6/1 (Cease/maximum number of prefixes reached) 0 bytes Inspect the state of the BGP sessions with a command similar to show ip bgp summary . The EBGP session with the customer router should be idle or shutdown : rtr#show ip bgp sum BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc customer 10.1.0.1 4 65100 257 288 0 0 00:01:02 Idle(MaxPath) Reset the session with the customer router with a command similar to clear ip bgp 10.1.0.1 . You should see a log message when the session is re-established and another a few moments later when the number of received prefixes yet again exceeds the specified limits. Arista cEOS generates these messages: rtr##clear ip bgp 10.1.0.1 %BGP-5-PEER_CLEAR: BGP peering for neighbor 10.1.0.1 (vrf default) was hard reset by admin on vty8 (192.168.121.1) %BGP-5-ADJCHANGE: peer 10.1.0.1 (VRF default AS 65100) old state OpenConfirm event Established new state Established %BGP-5-AFI_SAFI_MAX_ROUTES_EARLY_WARNING: Number of paths received from peer 10.1.0.1 (VRF default AS 65100) has exceeded the configured early warning limit (10) of address family IPv4 Unicast %BGP-5-AFI_SAFI_MAX_ROUTES_LIMIT: Peer 10.1.0.1 (VRF default AS 65100) has exceeded its configured maximum total number of routes (20) of address family IPv4 Unicast; Put into idle state forever %BGP-5-ADJCHANGE: peer 10.1.0.1 (VRF default AS 65100) old state Established event MaxPath new state Idle %BGP-3-NOTIFICATION: sent to neighbor 10.1.0.1 (VRF default AS 65100) 6/1 (Cease/maximum number of prefixes reached) 0 bytes Fix the customer router with the sh stop script and reset the EBGP session on your router. The EBGP session should be established and remain operational. Reference Information This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Use any device supported by the netlab BGP configuration module for your router. Use Arista EOS, Cumulus Linux, or FRR for the customer router to use the provided configuration scripts. You\u2019ll have to manually configure the origination of excessive BGP prefixes if you use any other netlab -supported device for the customer router. The Git repository contains the initial Cumulus Linux device configuration for the customer router. Lab Wiring Point-to-Point links: Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 customer swp1 Stub links: Origin Device Origin Port Description customer swp2 customer -> stub Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.2/30 rtr -> customer customer 192.168.100.1/24 Loopback swp1 10.1.0.1/30 customer -> rtr swp2 10.42.1.10/24 customer -> stub Most often caused by careless route redistribution and lack of output filters. \u21a9 Or netlab config addprefixes --limit customer -e pfx=15 \u21a9","title":"Limit the Number of Accepted BGP Prefixes"},{"location":"basic/b-max-prefix/#limit-the-number-of-accepted-bgp-prefixes","text":"Numerous global BGP routing incidents are caused by fat fingers, including those in which a network running BGP starts advertising an enormous amount of BGP prefixes 1 . Most BGP implementations contain mechanisms that shut down BGP sessions with neighbors that advertise excessive BGP prefixes; you\u2019ll practice them in this lab exercise. Warning Recent Ansible releases broke the Ansible playbook used within the netlab config command. You must use netlab release 1.7.2-post1 or later to run this lab. Upgrade netlab with the sudo pip3 install --upgrade networklab command or a similar command, depending on your Python setup.","title":"Limit the Number of Accepted BGP Prefixes"},{"location":"basic/b-max-prefix/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. The customer router advertises either a single prefix or over a dozen prefixes. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 10.0.0.1/32 AS65100 customer 192.168.100.1 192.168.100.0/24 Your router has a single EBGP neighbor (the customer router). netlab configures it automatically. Configure BGP manually if you\u2019re using some other lab infrastructure. Node Neighbor Neighbor AS Neighbor IPv4 rtr customer 65100 10.1.0.1","title":"Existing BGP Configuration"},{"location":"basic/b-max-prefix/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/b-max-prefix Execute netlab up ( device requirements , other options ) Log into your router (RTR) with netlab connect rtr and verify that the IP addresses and the EBGP sessions are properly configured.","title":"Start the Lab"},{"location":"basic/b-max-prefix/#the-problem","text":"Log into your router and examine its BGP table. You should see two prefixes: a local one and one from the customer router. This is the printout you would get on Arista cEOS: rtr>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.1/32 - - - - 0 i * > 192.168.100.0/24 10.1.0.1 0 - 100 0 65100 i Now emulate a fat fingers incident in the customer network. Use sh to execute the start script, optionally specifying the number of prefixes you want the customer to generate: $ sh start 20 Generating 20 prefixes on the customer router PLAY 1: DEPLOY DEVICE CONFIGURATION task 9: customer task 12: customer Done Tip If you don\u2019t want to run a shell script, use netlab config addprefixes --limit customer Next, log into your router and examine its BGP table. You should see twenty additional prefixes advertised by the customer router: rtr>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.1/32 - - - - 0 i * > 10.42.1.0/24 10.1.0.1 0 - 100 0 65100 i * > 10.42.2.0/24 10.1.0.1 0 - 100 0 65100 i * > 10.42.3.0/24 10.1.0.1 0 - 100 0 65100 i * > 10.42.4.0/24 10.1.0.1 0 - 100 0 65100 i * > 10.42.5.0/24 10.1.0.1 0 - 100 0 65100 i * > 10.42.6.0/24 10.1.0.1 0 - 100 0 65100 i * > 10.42.7.0/24 10.1.0.1 0 - 100 0 65100 i * > 10.42.8.0/24 10.1.0.1 0 - 100 0 65100 i * > 10.42.9.0/24 10.1.0.1 0 - 100 0 65100 i ... The rest of the printout was deleted ... To stop the fat finger incident, run sh stop or netlab config removeprefixes --limit customer . $ sh stop Stop advertising extra BGP prefixes PLAY 1: DEPLOY DEVICE CONFIGURATION task 11: customer Done Let\u2019s make sure we\u2019re not affected by the customer\u2019s clumsiness. The best way to do that is to limit the number of BGP prefixes we accept from the customer.","title":"The Problem"},{"location":"basic/b-max-prefix/#configuration-and-validation","text":"Configure BGP session logging on your router and ensure the logging messages are sent to the terminal window you\u2019re using to connect to the router. Limit the number of prefixes accepted from the customer router to 10 using a router configuration command similar to neighbor maximum-routes . Generate a warning if the number of prefixes is exceeded. In another window, execute the sh start 15 command 2 and check whether you got the expected warning. This is what you should get on Arista cEOS: %BGP-5-AFI_SAFI_MAX_ROUTES_WARNING: Peer 10.1.0.1 (VRF default AS 65100) has exceeded its configured maximum total number of routes (10) of address family IPv4 Unicast; ROUTING INFORMATION IS BEING LOST Tip Some BGP implementations generate a warning message while accepting all incoming prefixes. Arista EOS generates a warning message and drops random extraneous prefixes. Stop the fat finger incident with sh stop Limit the number of prefixes accepted from the customer router to 20, with a warning generated when the number of prefixes exceeds 10. Simulate a lower-impact incident with sh start 10 . You should see a warning message on your router; this is the message generated by Arista cEOS: %BGP-5-AFI_SAFI_MAX_ROUTES_EARLY_WARNING: Number of paths received from peer 10.1.0.1 (VRF default AS 65100) has exceeded the configured early warning limit (10) of address family IPv4 Unicast Increase the severity of the incident with sh start 20 . Your router should terminate the EBGP session with the customer router and generate an error message similar to the one generated by Arista cEOS: %BGP-5-ADJCHANGE: peer 10.1.0.1 (VRF default AS 65100) old state Established event MaxPath new state Idle %BGP-3-NOTIFICATION: sent to neighbor 10.1.0.1 (VRF default AS 65100) 6/1 (Cease/maximum number of prefixes reached) 0 bytes Inspect the state of the BGP sessions with a command similar to show ip bgp summary . The EBGP session with the customer router should be idle or shutdown : rtr#show ip bgp sum BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc customer 10.1.0.1 4 65100 257 288 0 0 00:01:02 Idle(MaxPath) Reset the session with the customer router with a command similar to clear ip bgp 10.1.0.1 . You should see a log message when the session is re-established and another a few moments later when the number of received prefixes yet again exceeds the specified limits. Arista cEOS generates these messages: rtr##clear ip bgp 10.1.0.1 %BGP-5-PEER_CLEAR: BGP peering for neighbor 10.1.0.1 (vrf default) was hard reset by admin on vty8 (192.168.121.1) %BGP-5-ADJCHANGE: peer 10.1.0.1 (VRF default AS 65100) old state OpenConfirm event Established new state Established %BGP-5-AFI_SAFI_MAX_ROUTES_EARLY_WARNING: Number of paths received from peer 10.1.0.1 (VRF default AS 65100) has exceeded the configured early warning limit (10) of address family IPv4 Unicast %BGP-5-AFI_SAFI_MAX_ROUTES_LIMIT: Peer 10.1.0.1 (VRF default AS 65100) has exceeded its configured maximum total number of routes (20) of address family IPv4 Unicast; Put into idle state forever %BGP-5-ADJCHANGE: peer 10.1.0.1 (VRF default AS 65100) old state Established event MaxPath new state Idle %BGP-3-NOTIFICATION: sent to neighbor 10.1.0.1 (VRF default AS 65100) 6/1 (Cease/maximum number of prefixes reached) 0 bytes Fix the customer router with the sh stop script and reset the EBGP session on your router. The EBGP session should be established and remain operational.","title":"Configuration and Validation"},{"location":"basic/b-max-prefix/#reference-information","text":"This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"basic/b-max-prefix/#req","text":"Use any device supported by the netlab BGP configuration module for your router. Use Arista EOS, Cumulus Linux, or FRR for the customer router to use the provided configuration scripts. You\u2019ll have to manually configure the origination of excessive BGP prefixes if you use any other netlab -supported device for the customer router. The Git repository contains the initial Cumulus Linux device configuration for the customer router.","title":"Device Requirements"},{"location":"basic/b-max-prefix/#lab-wiring","text":"Point-to-Point links: Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 customer swp1 Stub links: Origin Device Origin Port Description customer swp2 customer -> stub","title":"Lab Wiring"},{"location":"basic/b-max-prefix/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.2/30 rtr -> customer customer 192.168.100.1/24 Loopback swp1 10.1.0.1/30 customer -> rtr swp2 10.42.1.10/24 customer -> stub Most often caused by careless route redistribution and lack of output filters. \u21a9 Or netlab config addprefixes --limit customer -e pfx=15 \u21a9","title":"Lab Addressing"},{"location":"basic/c-default-route/","text":"Advertise Default Route in BGP In environments without a reliable link-layer failure detection mechanism, you might rely on a routing protocol (and BFD) to detect link failures. BGP is often used as a routing protocol between Service Providers and their customers (or between data center fabric switches and servers) because it has sufficient security mechanisms to make it safe to use with untrusted devices. However, it might not make sense to advertise the whole Internet routing table to every customer running BGP; it\u2019s often good enough to advertise local prefixes and the default route, and that\u2019s what you\u2019ll do in this lab exercise. Existing BGP Configuration The routers in your lab use the following BGP AS numbers. X1 and R2 advertise an IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 r1 10.0.0.1 r2 10.0.0.2 192.168.42.0/24 AS65100 x1 10.0.0.10 172.16.37.0/24 Your router has these BGP neighbors and runs OSPF in area 0 with R2. netlab configures BGP and OSPF automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure them manually. Node Neighbor Neighbor AS Neighbor IPv4 r1 r2 65000 10.0.0.2 x1 65100 10.1.0.2 Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/c-default-route Execute netlab up ( device requirements , other options ) Log into your router (RTR) with netlab connect r1 and verify that the IP addresses and the EBGP sessions are properly configured. The Problem R1 sends its whole BGP table to the customer router (X1). Within this lab, that\u2019s just a single BGP prefix, but it could be close to a million prefixes on the public Internet. $ netlab connect x1 --show ip bgp Connecting to clab-default-x1 using SSH port 22, executing show ip bgp BGP routing table information for VRF default Router identifier 172.16.37.1, local AS number 65100 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 172.16.37.0/24 - - - - 0 i * > 192.168.42.0/24 10.1.0.1 0 - 100 0 65000 i While it\u2019s relatively easy to filter the outbound BGP updates on R1 and send nothing to X1, that would break connectivity as X1 would have no usable routing information. Before filtering BGP updates, R1 should advertise the default route to X1. Configuration Tasks Configure R1 to advertise the default route to X1 using a command similar to neighbor default-originate . Tip Usually, you have to configure the default route advertisement within the address-family configuration. When configured to do so, some BGP implementations unconditionally advertise the default route to BGP neighbors. Other implementations might advertise the default route only if the default route is present in the local BGP table. You might have to use the default-originate always configuration command with such implementations, as R1 does not have a default route. Use an outbound filter on R1 to stop the propagation of any other information to X1. You\u2019ll find more details in the Filter Advertised Prefixes lab exercise. Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on the external routers. The validation tests check: The state of the EBGP sessions between R1 and X1 and between R1 and R2 Whether R1 sends the default route to X1 Whether R1 sends any other prefixes to X1 Whether R1 propagates the X1 prefix to R2 For example, this is the result you\u2019d get if you configured the default route origination on R1 but not the outbound route filters. If the netlab validate command fails or you\u2019re using another network operating system on your devices, inspect the BGP table on X1 \u2013 it should contain the local prefix and the default route. $ netlab connect x1 --show ip bgp Connecting to container clab-default-x1, executing sudo vtysh -c \"show ip bgp\" BGP table version is 3, local router ID is 172.16.37.1, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 0.0.0.0/0 10.1.0.1 0 65000 ? *> 172.16.37.0/24 0.0.0.0 0 32768 i Displayed 2 routes and 2 total paths You should also check the BGP table on R2 \u2013 it should contain the local prefix ( 172.16.37.0/24 ) and the prefix advertised by X1 ( 192.168.42.0/24 ). $ netlab connect r2 --show ip bgp Connecting to container clab-default-r2, executing sudo vtysh -c \"show ip bgp\" BGP table version is 2, local router ID is 192.168.42.1, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *>i172.16.37.0/24 10.0.0.1 0 100 0 65100 i *> 192.168.42.0/24 0.0.0.0 0 32768 i Displayed 2 routes and 2 total paths Reference Information This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Use any device supported by the netlab BGP and OSPF configuration modules . You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on X1 and R2. Git repository contains external router initial device configurations for Cumulus Linux. Lab Wiring Link Name Origin Device Origin Port Destination Device Destination Port Link with the customer r1 Ethernet1 x1 swp1 Intra-ISP link r1 Ethernet2 r2 swp1 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description r1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 Link with the customer Ethernet2 10.1.0.5/30 Intra-ISP link r2 192.168.42.1/24 Loopback swp1 10.1.0.6/30 Intra-ISP link x1 172.16.37.1/24 Loopback swp1 10.1.0.2/30 Link with the customer","title":"Advertise Default Route in BGP"},{"location":"basic/c-default-route/#advertise-default-route-in-bgp","text":"In environments without a reliable link-layer failure detection mechanism, you might rely on a routing protocol (and BFD) to detect link failures. BGP is often used as a routing protocol between Service Providers and their customers (or between data center fabric switches and servers) because it has sufficient security mechanisms to make it safe to use with untrusted devices. However, it might not make sense to advertise the whole Internet routing table to every customer running BGP; it\u2019s often good enough to advertise local prefixes and the default route, and that\u2019s what you\u2019ll do in this lab exercise.","title":"Advertise Default Route in BGP"},{"location":"basic/c-default-route/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. X1 and R2 advertise an IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 r1 10.0.0.1 r2 10.0.0.2 192.168.42.0/24 AS65100 x1 10.0.0.10 172.16.37.0/24 Your router has these BGP neighbors and runs OSPF in area 0 with R2. netlab configures BGP and OSPF automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure them manually. Node Neighbor Neighbor AS Neighbor IPv4 r1 r2 65000 10.0.0.2 x1 65100 10.1.0.2","title":"Existing BGP Configuration"},{"location":"basic/c-default-route/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/c-default-route Execute netlab up ( device requirements , other options ) Log into your router (RTR) with netlab connect r1 and verify that the IP addresses and the EBGP sessions are properly configured.","title":"Start the Lab"},{"location":"basic/c-default-route/#the-problem","text":"R1 sends its whole BGP table to the customer router (X1). Within this lab, that\u2019s just a single BGP prefix, but it could be close to a million prefixes on the public Internet. $ netlab connect x1 --show ip bgp Connecting to clab-default-x1 using SSH port 22, executing show ip bgp BGP routing table information for VRF default Router identifier 172.16.37.1, local AS number 65100 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 172.16.37.0/24 - - - - 0 i * > 192.168.42.0/24 10.1.0.1 0 - 100 0 65000 i While it\u2019s relatively easy to filter the outbound BGP updates on R1 and send nothing to X1, that would break connectivity as X1 would have no usable routing information. Before filtering BGP updates, R1 should advertise the default route to X1.","title":"The Problem"},{"location":"basic/c-default-route/#configuration-tasks","text":"Configure R1 to advertise the default route to X1 using a command similar to neighbor default-originate . Tip Usually, you have to configure the default route advertisement within the address-family configuration. When configured to do so, some BGP implementations unconditionally advertise the default route to BGP neighbors. Other implementations might advertise the default route only if the default route is present in the local BGP table. You might have to use the default-originate always configuration command with such implementations, as R1 does not have a default route. Use an outbound filter on R1 to stop the propagation of any other information to X1. You\u2019ll find more details in the Filter Advertised Prefixes lab exercise.","title":"Configuration Tasks"},{"location":"basic/c-default-route/#verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on the external routers. The validation tests check: The state of the EBGP sessions between R1 and X1 and between R1 and R2 Whether R1 sends the default route to X1 Whether R1 sends any other prefixes to X1 Whether R1 propagates the X1 prefix to R2 For example, this is the result you\u2019d get if you configured the default route origination on R1 but not the outbound route filters. If the netlab validate command fails or you\u2019re using another network operating system on your devices, inspect the BGP table on X1 \u2013 it should contain the local prefix and the default route. $ netlab connect x1 --show ip bgp Connecting to container clab-default-x1, executing sudo vtysh -c \"show ip bgp\" BGP table version is 3, local router ID is 172.16.37.1, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 0.0.0.0/0 10.1.0.1 0 65000 ? *> 172.16.37.0/24 0.0.0.0 0 32768 i Displayed 2 routes and 2 total paths You should also check the BGP table on R2 \u2013 it should contain the local prefix ( 172.16.37.0/24 ) and the prefix advertised by X1 ( 192.168.42.0/24 ). $ netlab connect r2 --show ip bgp Connecting to container clab-default-r2, executing sudo vtysh -c \"show ip bgp\" BGP table version is 2, local router ID is 192.168.42.1, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *>i172.16.37.0/24 10.0.0.1 0 100 0 65100 i *> 192.168.42.0/24 0.0.0.0 0 32768 i Displayed 2 routes and 2 total paths","title":"Verification"},{"location":"basic/c-default-route/#reference-information","text":"This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"basic/c-default-route/#req","text":"Use any device supported by the netlab BGP and OSPF configuration modules . You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on X1 and R2. Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"basic/c-default-route/#lab-wiring","text":"Link Name Origin Device Origin Port Destination Device Destination Port Link with the customer r1 Ethernet1 x1 swp1 Intra-ISP link r1 Ethernet2 r2 swp1","title":"Lab Wiring"},{"location":"basic/c-default-route/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description r1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 Link with the customer Ethernet2 10.1.0.5/30 Intra-ISP link r2 192.168.42.1/24 Loopback swp1 10.1.0.6/30 Intra-ISP link x1 172.16.37.1/24 Loopback swp1 10.1.0.2/30 Link with the customer","title":"Lab Addressing"},{"location":"basic/d-interface/","text":"EBGP Sessions over IPv6 LLA Interfaces BGP needs TCP sessions to run, and every TCP session needs a remote IP address to be established. That\u2019s why we always had to configure the IPv4 or IPv6 addresses of the BGP neighbors. A few years ago, Cumulus Networks engineers got an interesting idea : IPv6 ICMP messages could be used on an IPv6 interface to find the IPv6 link-local address (LLA) of the peer router 1 , and the remote IPv6 LLA could be used to establish an EBGP session with that router. Throw RFC 8950 into the mix, and you have a solution in which you could specify interfaces on which you want to run EBGP, not the neighbors\u2019 IP addresses ( more details ). That\u2019s what you\u2019ll practice in this lab exercise. Tip This lab focuses on a somewhat advanced trick usually encountered in data centers that use EBGP instead of an IGP. EBGP over IPv6 LLA is rarely used in Service Provider environments, so you might want to skip it if you\u2019re just starting your BGP journey. Existing BGP Configuration The routers in your lab use the following BGP AS numbers. Each router advertises an IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 10.0.0.1/32 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 X1 and X2 expect your router to initiate an EBGP over IPv6 link-local addresses and negotiate IPv4 address family over that session. Tip Your router has an interface with an IPv4 address and an unnumbered IPv4 interface. X1 and X2 have unnumbered IPv4 interfaces ( more details ). EBGP over IPv6 LLA is thus the only way to establish BGP sessions between them. Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/d-interface Execute netlab up ( device requirements , other options ) Log into your device (RTR) with netlab connect rtr and verify its configuration. Configuration Tasks The interface EBGP sessions are usually established between IPv6 link-local addresses (LLA); the routers find their neighbor\u2019s IPv6 LLA from the IPv6 Router Advertisement messages. Before configuring the EBGP sessions: Enable IPv6 processing on the desired interfaces. A typical command to use is ipv6 enable ; on FRRouting containers, you\u2019ll have to use the bash command sysctl -w net.ipv6.conf. interface .disable_ipv6=0 . configure IPv6 router advertisement messages. That should be the default setting, but some devices might need a command similar to \u200cno ipv6 nd suppress-ra . Tweak the RA timer to a low value to ensure BGP does not wait too long for an RA message. Some devices try to establish an IPv4 session if they find a /30 or a /31 subnet on the interface. Ensure the interface is an unnumbered IPv4 interface (on FRRouting, set the interface address to the loopback IPv4 address). The rest of the configuration process is reasonably simple on Cumulus Linux and FRR: Configure interface EBGP neighbors with neighbor name interface remote-as asn Add neighbor descriptions and BGP neighbor status logging Activate the EBGP neighbor within the IPv4 address family. Other platforms might have more convoluted requirements. For example, you must enable IPv6 routing and create a BGP peer group on Arista EOS . Warning If your device happens to be fully compliant with RFC 8212 (example: Cisco IOS XR), you\u2019ll have to configure a permit everything incoming- and outgoing filters on all EBGP neighbors. Verification You can use the netlab validate command if you use netlab release 1.8.3 or later and Cumulus Linux or FRR on the external routers. You can also check the state of BGP sessions on your router. A command similar to show ip bgp summary should display two BGP sessions with IPv6 link-local addresses. This is a printout taken from Arista EOS: rtr>show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc fe80::a8c1:abff:fe16:692b%Et2 4 65101 8 11 0 0 00:00:08 Estab 1 1 fe80::a8c1:abff:fe35:de9%Et1 4 65100 8 11 0 0 00:00:08 Estab 1 1 The show ip bgp (or similar) command should display IPv4 prefixes with IPv6 next hops (or bogus IPv4 next hops). This is how the BGP table looks on Arista EOS: rtr>show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending best path selection Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.1/32 - - - - 0 i * > 192.168.100.0/24 fe80::a8c1:abff:fe35:de9%Et1 0 - 100 0 65100 i * > 192.168.101.0/24 fe80::a8c1:abff:fe16:692b%Et2 0 - 100 0 65101 i IPv6 LLA next hops could also appear in the IPv4 routing table: rtr>show ip route | begin Gateway Gateway of last resort is not set C 10.0.0.1/32 [0/0] via Loopback0, directly connected C 10.1.0.0/30 [0/0] via Ethernet1, directly connected B E 192.168.100.0/24 [200/0] via fe80::a8c1:abff:fe35:de9, Ethernet1 B E 192.168.101.0/24 [200/0] via fe80::a8c1:abff:fe16:692b, Ethernet2 Device Requirements While you can use any device supported by the netlab BGP configuration module as the customer router, it does not make sense to try to do the lab with devices that do not support EBGP sessions over IPv6 link-local addresses External routers have to support EBGP over IPv6 LLA and RFC 8950. netlab releases up to (and including) 1.8.0 can use Cumulus Linux, Dell OS10, FRR, Nokia SR Linux, or VyOS as external routers. Use the netlab show modules -m bgp command to display the BGP features supported by various network devices in your netlab release; the device you want to use as an external router has to support ipv6_lla and rfc8950 features. You can do automated lab validation when running Cumulus Linux or FRR on the external router. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux. Reference Information This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Lab Wiring Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 True rtr -> x2 x1 192.168.100.1/24 Loopback swp1 True x1 -> rtr x2 192.168.101.1/24 Loopback swp1 True True x2 -> rtr Automatic discovery of remote endpoints of EBGP sessions usually works only on point-to-point links. \u21a9","title":"EBGP Sessions over IPv6 LLA Interfaces"},{"location":"basic/d-interface/#ebgp-sessions-over-ipv6-lla-interfaces","text":"BGP needs TCP sessions to run, and every TCP session needs a remote IP address to be established. That\u2019s why we always had to configure the IPv4 or IPv6 addresses of the BGP neighbors. A few years ago, Cumulus Networks engineers got an interesting idea : IPv6 ICMP messages could be used on an IPv6 interface to find the IPv6 link-local address (LLA) of the peer router 1 , and the remote IPv6 LLA could be used to establish an EBGP session with that router. Throw RFC 8950 into the mix, and you have a solution in which you could specify interfaces on which you want to run EBGP, not the neighbors\u2019 IP addresses ( more details ). That\u2019s what you\u2019ll practice in this lab exercise. Tip This lab focuses on a somewhat advanced trick usually encountered in data centers that use EBGP instead of an IGP. EBGP over IPv6 LLA is rarely used in Service Provider environments, so you might want to skip it if you\u2019re just starting your BGP journey.","title":"EBGP Sessions over IPv6 LLA Interfaces"},{"location":"basic/d-interface/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. Each router advertises an IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 10.0.0.1/32 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 X1 and X2 expect your router to initiate an EBGP over IPv6 link-local addresses and negotiate IPv4 address family over that session. Tip Your router has an interface with an IPv4 address and an unnumbered IPv4 interface. X1 and X2 have unnumbered IPv4 interfaces ( more details ). EBGP over IPv6 LLA is thus the only way to establish BGP sessions between them.","title":"Existing BGP Configuration"},{"location":"basic/d-interface/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/d-interface Execute netlab up ( device requirements , other options ) Log into your device (RTR) with netlab connect rtr and verify its configuration.","title":"Start the Lab"},{"location":"basic/d-interface/#configuration-tasks","text":"The interface EBGP sessions are usually established between IPv6 link-local addresses (LLA); the routers find their neighbor\u2019s IPv6 LLA from the IPv6 Router Advertisement messages. Before configuring the EBGP sessions: Enable IPv6 processing on the desired interfaces. A typical command to use is ipv6 enable ; on FRRouting containers, you\u2019ll have to use the bash command sysctl -w net.ipv6.conf. interface .disable_ipv6=0 . configure IPv6 router advertisement messages. That should be the default setting, but some devices might need a command similar to \u200cno ipv6 nd suppress-ra . Tweak the RA timer to a low value to ensure BGP does not wait too long for an RA message. Some devices try to establish an IPv4 session if they find a /30 or a /31 subnet on the interface. Ensure the interface is an unnumbered IPv4 interface (on FRRouting, set the interface address to the loopback IPv4 address). The rest of the configuration process is reasonably simple on Cumulus Linux and FRR: Configure interface EBGP neighbors with neighbor name interface remote-as asn Add neighbor descriptions and BGP neighbor status logging Activate the EBGP neighbor within the IPv4 address family. Other platforms might have more convoluted requirements. For example, you must enable IPv6 routing and create a BGP peer group on Arista EOS . Warning If your device happens to be fully compliant with RFC 8212 (example: Cisco IOS XR), you\u2019ll have to configure a permit everything incoming- and outgoing filters on all EBGP neighbors.","title":"Configuration Tasks"},{"location":"basic/d-interface/#verification","text":"You can use the netlab validate command if you use netlab release 1.8.3 or later and Cumulus Linux or FRR on the external routers. You can also check the state of BGP sessions on your router. A command similar to show ip bgp summary should display two BGP sessions with IPv6 link-local addresses. This is a printout taken from Arista EOS: rtr>show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc fe80::a8c1:abff:fe16:692b%Et2 4 65101 8 11 0 0 00:00:08 Estab 1 1 fe80::a8c1:abff:fe35:de9%Et1 4 65100 8 11 0 0 00:00:08 Estab 1 1 The show ip bgp (or similar) command should display IPv4 prefixes with IPv6 next hops (or bogus IPv4 next hops). This is how the BGP table looks on Arista EOS: rtr>show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending best path selection Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.1/32 - - - - 0 i * > 192.168.100.0/24 fe80::a8c1:abff:fe35:de9%Et1 0 - 100 0 65100 i * > 192.168.101.0/24 fe80::a8c1:abff:fe16:692b%Et2 0 - 100 0 65101 i IPv6 LLA next hops could also appear in the IPv4 routing table: rtr>show ip route | begin Gateway Gateway of last resort is not set C 10.0.0.1/32 [0/0] via Loopback0, directly connected C 10.1.0.0/30 [0/0] via Ethernet1, directly connected B E 192.168.100.0/24 [200/0] via fe80::a8c1:abff:fe35:de9, Ethernet1 B E 192.168.101.0/24 [200/0] via fe80::a8c1:abff:fe16:692b, Ethernet2","title":"Verification"},{"location":"basic/d-interface/#req","text":"While you can use any device supported by the netlab BGP configuration module as the customer router, it does not make sense to try to do the lab with devices that do not support EBGP sessions over IPv6 link-local addresses External routers have to support EBGP over IPv6 LLA and RFC 8950. netlab releases up to (and including) 1.8.0 can use Cumulus Linux, Dell OS10, FRR, Nokia SR Linux, or VyOS as external routers. Use the netlab show modules -m bgp command to display the BGP features supported by various network devices in your netlab release; the device you want to use as an external router has to support ipv6_lla and rfc8950 features. You can do automated lab validation when running Cumulus Linux or FRR on the external router. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"basic/d-interface/#reference-information","text":"This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"basic/d-interface/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1","title":"Lab Wiring"},{"location":"basic/d-interface/#addr","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 True rtr -> x2 x1 192.168.100.1/24 Loopback swp1 True x1 -> rtr x2 192.168.101.1/24 Loopback swp1 True True x2 -> rtr Automatic discovery of remote endpoints of EBGP sessions usually works only on point-to-point links. \u21a9","title":"Lab Addressing"},{"location":"basic/e-ebgp-multihop/","text":"Running EBGP Across a Firewall Sometimes, you have to exchange BGP prefixes across a path containing intermediate devices not running BGP 1 . The intermediate devices could (for example) be high-speed switches with limited software support 2 , devices with small routing tables, or firewalls using static routing for security reasons. In this lab exercise, you\u2019ll establish an EBGP session across a firewall between an internal (campus core) router and a WAN edge router and advertise the campus prefix to the WAN edge router. Existing Device Configuration The devices in your lab have the following IPv4 addresses: Node/Interface IPv4 Address IPv6 Address Description ext Ethernet1 172.16.0.3/24 ext -> fw fw eth1 172.16.0.1/24 fw -> ext eth2 192.168.42.1/24 fw -> int int Ethernet1 192.168.42.2/24 int -> fw The routers use these BGP AS numbers. INT is advertising its LAN IPv4 prefix. Node/ASN Router ID Advertised prefixes AS64501 ext 10.0.0.3 AS65000 int 10.0.0.2 192.168.42.0/24 The firewall has static routes for all netlab address pools pointing to the EXT router 3 . You can inspect them with the netlab connect fw ip route command: $ netlab connect -q fw ip route default via 192.168.121.1 dev eth0 10.0.0.0/24 via 172.16.0.3 dev eth1 10.1.0.0/16 via 172.16.0.3 dev eth1 10.2.0.0/24 via 172.16.0.3 dev eth1 172.16.0.0/24 dev eth1 scope link src 172.16.0.1 172.16.0.0/16 via 172.16.0.3 dev eth1 192.168.42.0/24 dev eth2 scope link src 192.168.42.1 192.168.121.0/24 dev eth0 scope link src 192.168.121.101 netlab automatically configures interface IP addresses, static routes on the firewall, and BGP routing processes; you\u2019ll have to configure them manually if you\u2019re using some other lab infrastructure. Start the Lab You can start the lab on your own lab infrastructure or in GitHub Codespaces ( more details ): Use any device supported by the netlab BGP configuration module for your routers. Change directory to basic/e-ebgp-multihop Execute netlab up Log into your devices with netlab connect and verify that the IP addresses and the EBGP sessions are properly configured. Tip The lab topology uses a Linux host instead of a firewall. If you want to use a real firewall instead, use the -s option of the netlab up command to set the device type for the fw node. For example, to use ASAv, start the lab with netlab up -s nodes.fw.device=asav . Please note that netlab won\u2019t configure static routing on devices other than a Linux host. Configuration Tasks You must establish an EBGP session between the Ethernet interfaces of INT and EXT routers. These routers do not know how to reach each other, so you have to create static routes to help them get started: On INT, create a static route for 172.16.0.3/32 pointing to 192.168.42.1. Most network devices use a configuration command similar to ip route prefix nexthop . On EXT, create a static route for 192.168.42.2/32 pointing to 172.16.0.1 Tip It\u2019s best to use host routes for the remote endpoints of multihop EBGP sessions, allowing remote routers to advertise their directly connected prefixes dynamically. With the static routes in place: On INT, add 172.16.0.3 as a BGP neighbor in AS 64501 On EXT, add 172.16.42.2 as a BGP neighbor in AS 65000 Advertise the default route from EXT to INT. Tip For more details, review the Configure a Single EBGP Session and Advertise Default Route in BGP lab exercises. Most BGP implementations will refuse to establish the EBGP session you just configured, as they expect EBGP neighbors to be directly connected . Use a command similar to neighbor ebgp-multihop to tell your devices that the EBGP neighbor is further away. That command: Disables the directly connected neighbor check Increases the TTL of the EBGP IP packets to ensure they reach the distant neighbor (some devices allow you to specify how far away the neighbor is). Tip Please note that you can\u2019t use fake (overly large) IP subnets on INT and EXT to make them believe the neighbor is directly connected. The EBGP session would still not be established because the firewall decreases the TTL of forwarded IP packets, and most BGP implementations send EBGP IP packets with TTL=1. Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on your routers. The validation tests check: The state of the EBGP session between INT and EXT Whether EXT receives the prefix 192.168.42.0/24 from INT Whether INT receives the default route from EXT This is the result you should get after completing the lab exercise: You can also do manual verification: Check the state of the EBGP session on INT with a command similar to show ip bgp summary . The session with EXT should be in the established state: int>show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.2, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 172.16.0.3 4 64501 33 33 0 0 00:20:44 Estab 1 1 Check the BGP table on INT with a command similar to show ip bgp . You should see the local prefix and the default route 4 : int>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 172.16.0.3 0 - 100 0 64501 ? * > 192.168.42.0/24 - - - - 0 i Check the BGP table on EXT. You should see the 192.168.42.0/24 prefix advertised by INT: ext>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 192.168.42.0/24 192.168.42.2 0 - 100 0 65000 i They might not be capable of running BGP, or someone made an administrative/design decision not to run BGP on them. \u21a9 Or a crazy licensing scheme \u21a9 netlab configures several static routes instead of a default route. The default route usually points to the management network ( more details ). \u21a9 The | begin Network filter removes the legend from the show ip bgp command on Arista EOS. \u21a9","title":"Running EBGP Across a Firewall"},{"location":"basic/e-ebgp-multihop/#running-ebgp-across-a-firewall","text":"Sometimes, you have to exchange BGP prefixes across a path containing intermediate devices not running BGP 1 . The intermediate devices could (for example) be high-speed switches with limited software support 2 , devices with small routing tables, or firewalls using static routing for security reasons. In this lab exercise, you\u2019ll establish an EBGP session across a firewall between an internal (campus core) router and a WAN edge router and advertise the campus prefix to the WAN edge router.","title":"Running EBGP Across a Firewall"},{"location":"basic/e-ebgp-multihop/#existing-device-configuration","text":"The devices in your lab have the following IPv4 addresses: Node/Interface IPv4 Address IPv6 Address Description ext Ethernet1 172.16.0.3/24 ext -> fw fw eth1 172.16.0.1/24 fw -> ext eth2 192.168.42.1/24 fw -> int int Ethernet1 192.168.42.2/24 int -> fw The routers use these BGP AS numbers. INT is advertising its LAN IPv4 prefix. Node/ASN Router ID Advertised prefixes AS64501 ext 10.0.0.3 AS65000 int 10.0.0.2 192.168.42.0/24 The firewall has static routes for all netlab address pools pointing to the EXT router 3 . You can inspect them with the netlab connect fw ip route command: $ netlab connect -q fw ip route default via 192.168.121.1 dev eth0 10.0.0.0/24 via 172.16.0.3 dev eth1 10.1.0.0/16 via 172.16.0.3 dev eth1 10.2.0.0/24 via 172.16.0.3 dev eth1 172.16.0.0/24 dev eth1 scope link src 172.16.0.1 172.16.0.0/16 via 172.16.0.3 dev eth1 192.168.42.0/24 dev eth2 scope link src 192.168.42.1 192.168.121.0/24 dev eth0 scope link src 192.168.121.101 netlab automatically configures interface IP addresses, static routes on the firewall, and BGP routing processes; you\u2019ll have to configure them manually if you\u2019re using some other lab infrastructure.","title":"Existing Device Configuration"},{"location":"basic/e-ebgp-multihop/#start-the-lab","text":"You can start the lab on your own lab infrastructure or in GitHub Codespaces ( more details ): Use any device supported by the netlab BGP configuration module for your routers. Change directory to basic/e-ebgp-multihop Execute netlab up Log into your devices with netlab connect and verify that the IP addresses and the EBGP sessions are properly configured. Tip The lab topology uses a Linux host instead of a firewall. If you want to use a real firewall instead, use the -s option of the netlab up command to set the device type for the fw node. For example, to use ASAv, start the lab with netlab up -s nodes.fw.device=asav . Please note that netlab won\u2019t configure static routing on devices other than a Linux host.","title":"Start the Lab"},{"location":"basic/e-ebgp-multihop/#configuration-tasks","text":"You must establish an EBGP session between the Ethernet interfaces of INT and EXT routers. These routers do not know how to reach each other, so you have to create static routes to help them get started: On INT, create a static route for 172.16.0.3/32 pointing to 192.168.42.1. Most network devices use a configuration command similar to ip route prefix nexthop . On EXT, create a static route for 192.168.42.2/32 pointing to 172.16.0.1 Tip It\u2019s best to use host routes for the remote endpoints of multihop EBGP sessions, allowing remote routers to advertise their directly connected prefixes dynamically. With the static routes in place: On INT, add 172.16.0.3 as a BGP neighbor in AS 64501 On EXT, add 172.16.42.2 as a BGP neighbor in AS 65000 Advertise the default route from EXT to INT. Tip For more details, review the Configure a Single EBGP Session and Advertise Default Route in BGP lab exercises. Most BGP implementations will refuse to establish the EBGP session you just configured, as they expect EBGP neighbors to be directly connected . Use a command similar to neighbor ebgp-multihop to tell your devices that the EBGP neighbor is further away. That command: Disables the directly connected neighbor check Increases the TTL of the EBGP IP packets to ensure they reach the distant neighbor (some devices allow you to specify how far away the neighbor is). Tip Please note that you can\u2019t use fake (overly large) IP subnets on INT and EXT to make them believe the neighbor is directly connected. The EBGP session would still not be established because the firewall decreases the TTL of forwarded IP packets, and most BGP implementations send EBGP IP packets with TTL=1.","title":"Configuration Tasks"},{"location":"basic/e-ebgp-multihop/#verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on your routers. The validation tests check: The state of the EBGP session between INT and EXT Whether EXT receives the prefix 192.168.42.0/24 from INT Whether INT receives the default route from EXT This is the result you should get after completing the lab exercise: You can also do manual verification: Check the state of the EBGP session on INT with a command similar to show ip bgp summary . The session with EXT should be in the established state: int>show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.2, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 172.16.0.3 4 64501 33 33 0 0 00:20:44 Estab 1 1 Check the BGP table on INT with a command similar to show ip bgp . You should see the local prefix and the default route 4 : int>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 172.16.0.3 0 - 100 0 64501 ? * > 192.168.42.0/24 - - - - 0 i Check the BGP table on EXT. You should see the 192.168.42.0/24 prefix advertised by INT: ext>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 192.168.42.0/24 192.168.42.2 0 - 100 0 65000 i They might not be capable of running BGP, or someone made an administrative/design decision not to run BGP on them. \u21a9 Or a crazy licensing scheme \u21a9 netlab configures several static routes instead of a default route. The default route usually points to the management network ( more details ). \u21a9 The | begin Network filter removes the legend from the show ip bgp command on Arista EOS. \u21a9","title":"Verification"},{"location":"challenge/01-bird-rr/","text":"Using Bird BGP Daemon as a BGP Route Reflector In a previous lab exercise, you used BGP route reflectors on core routers to reduce the number of IBGP sessions in your network. BGP route reflection is a pure control plane functionality and does not have to run on a router (or a layer-3 switch). In this lab, you\u2019ll use the Bird BGP daemon as a BGP route reflector. Expert This is an expert-level challenge lab. We expect you to know what you\u2019re doing \u2013 all you\u2019ll get from us are a few basic Bird setup tricks and the verification guidelines. Tip This lab is still under development. Follow blog.ipspace.net or Ivan Pepelnjak on LinkedIn to find out when it will be ready.","title":"Using Bird BGP Daemon as a BGP Route Reflector"},{"location":"challenge/01-bird-rr/#using-bird-bgp-daemon-as-a-bgp-route-reflector","text":"In a previous lab exercise, you used BGP route reflectors on core routers to reduce the number of IBGP sessions in your network. BGP route reflection is a pure control plane functionality and does not have to run on a router (or a layer-3 switch). In this lab, you\u2019ll use the Bird BGP daemon as a BGP route reflector. Expert This is an expert-level challenge lab. We expect you to know what you\u2019re doing \u2013 all you\u2019ll get from us are a few basic Bird setup tricks and the verification guidelines. Tip This lab is still under development. Follow blog.ipspace.net or Ivan Pepelnjak on LinkedIn to find out when it will be ready.","title":"Using Bird BGP Daemon as a BGP Route Reflector"},{"location":"challenge/02-anycast/","text":"Implement Anycast Services with BGP In this lab exercise, you\u2019ll build a DNS server farm with multiple servers connected to the same layer-3 access switch 1 . Enterprise architects would recommend using a load balancer in a typical scale-out architecture. As DNS is connectionless 2 and has no concept of sessions, we don\u2019t need a load balancer; equal-cost multipathing on the access switch will do the job just fine. Regardless of the underlying load balancing mechanism, the solution must track individual servers\u2019 health and availability. In our design 3 , we\u2019ll use BGP to track server availability. All servers will advertise the same IP address 4 to the access switch and offer DNS services on that IP address 5 . Tip This lab is still under development. Follow blog.ipspace.net or Ivan Pepelnjak on LinkedIn to find out when it will be ready. A device formerly known as router \u21a9 We\u2019re assuming UDP-based DNS. Implementing TCP-based services with anycast is more complex but doable; many large-scale web properties use anycast web servers. \u21a9 This design is used in many large-scale DNS implementations. \u21a9 Technically, a /32 IPv4 or a /128 IPv6 prefix \u21a9 We won\u2019t go as far as configuring the DNS servers. We\u2019ll declare mission accomplished as soon as we ping the anycast IP address. \u21a9","title":"Implement Anycast Services with BGP"},{"location":"challenge/02-anycast/#implement-anycast-services-with-bgp","text":"In this lab exercise, you\u2019ll build a DNS server farm with multiple servers connected to the same layer-3 access switch 1 . Enterprise architects would recommend using a load balancer in a typical scale-out architecture. As DNS is connectionless 2 and has no concept of sessions, we don\u2019t need a load balancer; equal-cost multipathing on the access switch will do the job just fine. Regardless of the underlying load balancing mechanism, the solution must track individual servers\u2019 health and availability. In our design 3 , we\u2019ll use BGP to track server availability. All servers will advertise the same IP address 4 to the access switch and offer DNS services on that IP address 5 . Tip This lab is still under development. Follow blog.ipspace.net or Ivan Pepelnjak on LinkedIn to find out when it will be ready. A device formerly known as router \u21a9 We\u2019re assuming UDP-based DNS. Implementing TCP-based services with anycast is more complex but doable; many large-scale web properties use anycast web servers. \u21a9 This design is used in many large-scale DNS implementations. \u21a9 Technically, a /32 IPv4 or a /128 IPv6 prefix \u21a9 We won\u2019t go as far as configuring the DNS servers. We\u2019ll declare mission accomplished as soon as we ping the anycast IP address. \u21a9","title":"Implement Anycast Services with BGP"},{"location":"challenge/03-graceful-shutdown/","text":"BGP Graceful Shutdown Imagine you have to perform maintenance of the primary uplink of your mission-critical site. You could shut down the link (or power off the router) and wait for a few minutes for the global Internet to adapt to the change 1 , or you could do the right thing and try to shift the traffic to the backup link before shutting down the primary one. Shifting the traffic away from a link scheduled for maintenance has two components: Telling everyone in your autonomous system not to use the affected link, usually by setting the BGP local preference of all prefixes received over that link to zero. Telling the upstream provider not to use the link. RFC 8326 defines the recommended tool for the job: the GRACEFUL_SHUTDOWN community. In this lab exercise, you\u2019ll implement the configuration changes needed to support the BGP Graceful Shutdown functionality on a customer and a provider router and test the graceful shutdown procedure. Expert We expect you to have completed most of the foundational labs and know what you\u2019re doing. The lab instructions contain only high-level guidelines. Existing Router Configurations The routers in your lab use the following BGP AS numbers and advertise one prefix per autonomous system. Node/ASN Router ID Advertised prefixes AS65000 c1 10.0.0.1 192.168.42.0/24 c2 10.0.0.2 192.168.42.0/24 AS65100 x1 10.0.0.10 172.18.12.0/24 x2 10.0.0.11 172.18.12.0/24 The routers you\u2019re configuring have these BGP neighbors: Node Router ID/ Neighbor Router AS/ Neighbor AS Neighbor IPv4 c1 10.0.0.1 65000 c2 65000 10.0.0.2 x1 65100 10.1.0.6 x1 10.0.0.10 65100 x2 65100 10.0.0.11 c1 65000 10.1.0.5 The routers you\u2019re configuring run OSPF in the backbone area with the other routers in the same autonomous system: Router Interface IPv4 Address Neighbor(s) c1 Loopback 10.0.0.1/32 eth1 192.168.42.1/24 c2 c2 Loopback 10.0.0.2/32 eth1 192.168.42.2/24 c1 x1 Loopback 10.0.0.10/32 eth2 172.18.12.1/24 x2 x2 Loopback 10.0.0.11/32 eth3 172.18.12.2/24 x1 netlab automatically configures all lab devices; if you\u2019re using another lab infrastructure, you\u2019ll have to manually configure C1 and X1. Start the Lab Assuming you already set up your lab infrastructure : Change directory to challenge/03-graceful-shutdown Execute netlab up ( device requirements , other options ) Log into your routers with netlab connect and verify that their IP addresses and routing protocols are properly configured. The Problem Log into C1 and X1 and check their BGP tables. Assuming your devices use the default local preference value of 100, they should not use any inter-AS routes propagated by C2 or X2. This is the printout you would get on C1 running FRRouting: $ netlab connect -q c1 --show ip bgp BGP table version is 2, local router ID is 10.0.0.1, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *> 172.18.12.0/24 10.1.0.6(x1) 0 0 65100 i * i192.168.42.0/24 10.0.0.2(c2) 0 100 0 i *> 0.0.0.0(c1) 0 32768 i Displayed 2 routes and 3 total paths On the other hand, C2 and X2 prefer IBGP routes advertised by C1 and X1. This is the printout you would get on C2 running FRRouting: $ netlab connect -q c2 --show ip bgp BGP table version is 4, local router ID is 10.0.0.2, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *>i172.18.12.0/24 10.0.0.1(c1) 0 100 0 65100 i * 10.1.0.2(x2) 0 50 0 65100 i * i192.168.42.0/24 10.0.0.1(c1) 0 100 0 i *> 0.0.0.0(c2) 0 32768 i Displayed 2 routes and 4 total paths Shutting down the C1-X1 link would cause a lab-wide outage until the BGP session between C1 and X1 is brought down and the routers update their BGP tables. As you\u2019re not using BFD or reduced BGP timers , it could take up to three minutes for the network to converge. Configuration Tasks RFC 8326 defines the Graceful Shutdown BGP community that you can use to drain traffic from a link before it\u2019s brought down for maintenance. The routers using the procedures from that RFC should set BGP Local Preference of prefixes carrying the GRACEFUL_SHUTDOWN community to a low value Some vendors (for example, Arista) recognize the GRACEFUL_SHUTDOWN community without extra configuration and set BGP Local Preference to zero. On other devices, you have to create: Configure a route map on X1 that matches the GRACEFUL_SHUTDOWN community and sets BGP Local Preference as low as possible. Apply the route map to all EBGP sessions. Before starting the maintenance process, the customer router (C1) has to: Set the GRACEFUL_SHUTDOWN community on all EBGP updates Set the local preference on all incoming EBGP updates to as low as possible. Some vendors (for example, Arista) implemented BGP maintenance mode that performs those tasks automatically. On other devices, you have to modify the C1 configuration: Configure an outbound route map that sets the GRACEFUL_SHUTDOWN community Configure an inbound route map that sets the BGP local preference to zero Before shutting down the C1-X1 link, apply both route maps to the EBGP session with X1. Newer BGP implementations automatically lower BGP local preference on routes with the GRACEFUL_SHUTDOWN community. On older implementations, you have to modify the X1 configuration: Configure an inbound route map that matches the GRACEFUL_SHUTDOWN community and sets the BGP local preference to zero. It should permit all other routes. Apply the route map as an inbound route map to the EBGP session with C1. Tip You\u2019ll find more details in these lab exercises: Attach BGP Communities to Outgoing BGP Updates lab exercise. Select Preferred Uplink with BGP Local Preference Use BGP Communities in Routing Policies Verification After configuring and applying route maps on C1 and X1, the BGP table on C1 should contain routes advertised by X1 (with local preference set to a very low value) and those advertised by C2 (with higher local preference). C1 should prefer the routes to AS 65100 advertised by C2: $ netlab connect -q c1 --show ip bgp 172.18.12.0/24 BGP routing table entry for 172.18.12.0/24, version 4 Paths: (2 available, best #1, table default) Advertised to non peer-group peers: x1(10.1.0.6) 65100 10.0.0.2(c2) (metric 10) from c2(10.0.0.2) (10.0.0.2) Origin IGP, metric 0, localpref 50, valid, internal, bestpath-from-AS 65100, best (Local Pref) Last update: Tue Oct 1 06:47:04 2024 65100 10.1.0.6(x1) from x1(10.1.0.6) (10.0.0.10) Origin IGP, metric 0, localpref 0, valid, external Last update: Tue Oct 1 06:47:04 2024 Similarly, X1 should prefer routes to AS 65000 advertised by X2: $ netlab connect -q x1 --show ip bgp 192.168.42.0/24 BGP routing table entry for 192.168.42.0/24, version 4 Paths: (2 available, best #1, table default) Advertised to non peer-group peers: c1(10.1.0.5) 65000 10.0.0.11(x2) (metric 10) from x2(10.0.0.11) (10.0.0.11) Origin IGP, metric 0, localpref 50, valid, internal, bestpath-from-AS 65000, best (Local Pref) Last update: Tue Oct 1 06:47:07 2024 65000 10.1.0.5(c1) from c1(10.1.0.5) (10.0.0.1) Origin IGP, metric 0, localpref 0, valid, external Community: graceful-shutdown Last update: Tue Oct 1 06:47:07 2024 Reference Information This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Use any device supported by the netlab BGP and OSPF configuration module for the C1 and X1. Use devices supported by the netlab bgp.policy plugin for C2 and X2. Git repository contains external router initial device configurations for Cumulus Linux. Lab Wiring Link Name Origin Device Origin Port Destination Device Destination Port Intra-customer link c1 eth1 c2 eth1 Unused link c1 eth2 x2 eth1 C2 uplink c2 eth2 x2 eth2 Unused link x1 eth1 c2 eth3 Intra-ISP link x1 eth2 x2 eth3 C1 uplink c1 eth3 x1 eth3 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback eth1 192.168.42.1/24 Intra-customer link eth2 Unused link eth3 10.1.0.5/30 C1 uplink c2 10.0.0.2/32 Loopback eth1 192.168.42.2/24 Intra-customer link eth2 10.1.0.1/30 C2 uplink eth3 Unused link x1 10.0.0.10/32 Loopback eth1 Unused link eth2 172.18.12.1/24 Intra-ISP link eth3 10.1.0.6/30 C1 uplink x2 10.0.0.11/32 Loopback eth1 Unused link eth2 10.1.0.2/30 C2 uplink eth3 172.18.12.2/24 Intra-ISP link While enjoying listening to the sounds of a million alerts and the screaming VP of Marketing. \u21a9","title":"BGP Graceful Shutdown"},{"location":"challenge/03-graceful-shutdown/#bgp-graceful-shutdown","text":"Imagine you have to perform maintenance of the primary uplink of your mission-critical site. You could shut down the link (or power off the router) and wait for a few minutes for the global Internet to adapt to the change 1 , or you could do the right thing and try to shift the traffic to the backup link before shutting down the primary one. Shifting the traffic away from a link scheduled for maintenance has two components: Telling everyone in your autonomous system not to use the affected link, usually by setting the BGP local preference of all prefixes received over that link to zero. Telling the upstream provider not to use the link. RFC 8326 defines the recommended tool for the job: the GRACEFUL_SHUTDOWN community. In this lab exercise, you\u2019ll implement the configuration changes needed to support the BGP Graceful Shutdown functionality on a customer and a provider router and test the graceful shutdown procedure. Expert We expect you to have completed most of the foundational labs and know what you\u2019re doing. The lab instructions contain only high-level guidelines.","title":"BGP Graceful Shutdown"},{"location":"challenge/03-graceful-shutdown/#existing-router-configurations","text":"The routers in your lab use the following BGP AS numbers and advertise one prefix per autonomous system. Node/ASN Router ID Advertised prefixes AS65000 c1 10.0.0.1 192.168.42.0/24 c2 10.0.0.2 192.168.42.0/24 AS65100 x1 10.0.0.10 172.18.12.0/24 x2 10.0.0.11 172.18.12.0/24 The routers you\u2019re configuring have these BGP neighbors: Node Router ID/ Neighbor Router AS/ Neighbor AS Neighbor IPv4 c1 10.0.0.1 65000 c2 65000 10.0.0.2 x1 65100 10.1.0.6 x1 10.0.0.10 65100 x2 65100 10.0.0.11 c1 65000 10.1.0.5 The routers you\u2019re configuring run OSPF in the backbone area with the other routers in the same autonomous system: Router Interface IPv4 Address Neighbor(s) c1 Loopback 10.0.0.1/32 eth1 192.168.42.1/24 c2 c2 Loopback 10.0.0.2/32 eth1 192.168.42.2/24 c1 x1 Loopback 10.0.0.10/32 eth2 172.18.12.1/24 x2 x2 Loopback 10.0.0.11/32 eth3 172.18.12.2/24 x1 netlab automatically configures all lab devices; if you\u2019re using another lab infrastructure, you\u2019ll have to manually configure C1 and X1.","title":"Existing Router Configurations"},{"location":"challenge/03-graceful-shutdown/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to challenge/03-graceful-shutdown Execute netlab up ( device requirements , other options ) Log into your routers with netlab connect and verify that their IP addresses and routing protocols are properly configured.","title":"Start the Lab"},{"location":"challenge/03-graceful-shutdown/#the-problem","text":"Log into C1 and X1 and check their BGP tables. Assuming your devices use the default local preference value of 100, they should not use any inter-AS routes propagated by C2 or X2. This is the printout you would get on C1 running FRRouting: $ netlab connect -q c1 --show ip bgp BGP table version is 2, local router ID is 10.0.0.1, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *> 172.18.12.0/24 10.1.0.6(x1) 0 0 65100 i * i192.168.42.0/24 10.0.0.2(c2) 0 100 0 i *> 0.0.0.0(c1) 0 32768 i Displayed 2 routes and 3 total paths On the other hand, C2 and X2 prefer IBGP routes advertised by C1 and X1. This is the printout you would get on C2 running FRRouting: $ netlab connect -q c2 --show ip bgp BGP table version is 4, local router ID is 10.0.0.2, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *>i172.18.12.0/24 10.0.0.1(c1) 0 100 0 65100 i * 10.1.0.2(x2) 0 50 0 65100 i * i192.168.42.0/24 10.0.0.1(c1) 0 100 0 i *> 0.0.0.0(c2) 0 32768 i Displayed 2 routes and 4 total paths Shutting down the C1-X1 link would cause a lab-wide outage until the BGP session between C1 and X1 is brought down and the routers update their BGP tables. As you\u2019re not using BFD or reduced BGP timers , it could take up to three minutes for the network to converge.","title":"The Problem"},{"location":"challenge/03-graceful-shutdown/#configuration-tasks","text":"RFC 8326 defines the Graceful Shutdown BGP community that you can use to drain traffic from a link before it\u2019s brought down for maintenance. The routers using the procedures from that RFC should set BGP Local Preference of prefixes carrying the GRACEFUL_SHUTDOWN community to a low value Some vendors (for example, Arista) recognize the GRACEFUL_SHUTDOWN community without extra configuration and set BGP Local Preference to zero. On other devices, you have to create: Configure a route map on X1 that matches the GRACEFUL_SHUTDOWN community and sets BGP Local Preference as low as possible. Apply the route map to all EBGP sessions. Before starting the maintenance process, the customer router (C1) has to: Set the GRACEFUL_SHUTDOWN community on all EBGP updates Set the local preference on all incoming EBGP updates to as low as possible. Some vendors (for example, Arista) implemented BGP maintenance mode that performs those tasks automatically. On other devices, you have to modify the C1 configuration: Configure an outbound route map that sets the GRACEFUL_SHUTDOWN community Configure an inbound route map that sets the BGP local preference to zero Before shutting down the C1-X1 link, apply both route maps to the EBGP session with X1. Newer BGP implementations automatically lower BGP local preference on routes with the GRACEFUL_SHUTDOWN community. On older implementations, you have to modify the X1 configuration: Configure an inbound route map that matches the GRACEFUL_SHUTDOWN community and sets the BGP local preference to zero. It should permit all other routes. Apply the route map as an inbound route map to the EBGP session with C1. Tip You\u2019ll find more details in these lab exercises: Attach BGP Communities to Outgoing BGP Updates lab exercise. Select Preferred Uplink with BGP Local Preference Use BGP Communities in Routing Policies","title":"Configuration Tasks"},{"location":"challenge/03-graceful-shutdown/#verification","text":"After configuring and applying route maps on C1 and X1, the BGP table on C1 should contain routes advertised by X1 (with local preference set to a very low value) and those advertised by C2 (with higher local preference). C1 should prefer the routes to AS 65100 advertised by C2: $ netlab connect -q c1 --show ip bgp 172.18.12.0/24 BGP routing table entry for 172.18.12.0/24, version 4 Paths: (2 available, best #1, table default) Advertised to non peer-group peers: x1(10.1.0.6) 65100 10.0.0.2(c2) (metric 10) from c2(10.0.0.2) (10.0.0.2) Origin IGP, metric 0, localpref 50, valid, internal, bestpath-from-AS 65100, best (Local Pref) Last update: Tue Oct 1 06:47:04 2024 65100 10.1.0.6(x1) from x1(10.1.0.6) (10.0.0.10) Origin IGP, metric 0, localpref 0, valid, external Last update: Tue Oct 1 06:47:04 2024 Similarly, X1 should prefer routes to AS 65000 advertised by X2: $ netlab connect -q x1 --show ip bgp 192.168.42.0/24 BGP routing table entry for 192.168.42.0/24, version 4 Paths: (2 available, best #1, table default) Advertised to non peer-group peers: c1(10.1.0.5) 65000 10.0.0.11(x2) (metric 10) from x2(10.0.0.11) (10.0.0.11) Origin IGP, metric 0, localpref 50, valid, internal, bestpath-from-AS 65000, best (Local Pref) Last update: Tue Oct 1 06:47:07 2024 65000 10.1.0.5(c1) from c1(10.1.0.5) (10.0.0.1) Origin IGP, metric 0, localpref 0, valid, external Community: graceful-shutdown Last update: Tue Oct 1 06:47:07 2024","title":"Verification"},{"location":"challenge/03-graceful-shutdown/#reference-information","text":"This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"challenge/03-graceful-shutdown/#req","text":"Use any device supported by the netlab BGP and OSPF configuration module for the C1 and X1. Use devices supported by the netlab bgp.policy plugin for C2 and X2. Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"challenge/03-graceful-shutdown/#lab-wiring","text":"Link Name Origin Device Origin Port Destination Device Destination Port Intra-customer link c1 eth1 c2 eth1 Unused link c1 eth2 x2 eth1 C2 uplink c2 eth2 x2 eth2 Unused link x1 eth1 c2 eth3 Intra-ISP link x1 eth2 x2 eth3 C1 uplink c1 eth3 x1 eth3","title":"Lab Wiring"},{"location":"challenge/03-graceful-shutdown/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback eth1 192.168.42.1/24 Intra-customer link eth2 Unused link eth3 10.1.0.5/30 C1 uplink c2 10.0.0.2/32 Loopback eth1 192.168.42.2/24 Intra-customer link eth2 10.1.0.1/30 C2 uplink eth3 Unused link x1 10.0.0.10/32 Loopback eth1 Unused link eth2 172.18.12.1/24 Intra-ISP link eth3 10.1.0.6/30 C1 uplink x2 10.0.0.11/32 Loopback eth1 Unused link eth2 10.1.0.2/30 C2 uplink eth3 172.18.12.2/24 Intra-ISP link While enjoying listening to the sounds of a million alerts and the screaming VP of Marketing. \u21a9","title":"Lab Addressing"},{"location":"challenge/04-block-fat-fingers/","text":"Stop the Propagation of Configuration Errors Nobody is perfect , including the networking engineers configuring BGP in your customers\u2019 networks. Still, it\u2019s your job as a responsible Internet Service Provider to filter the results of those mistakes before they reach the wider Internet. 1 In the ideal world, you\u2019d use RPKI and accept only valid prefixes belonging to your customers. Failing that, you could get valid customer prefixes from internet routing registries, but that\u2019s extra unpaid work. There\u2019s no excuse, however, for not deploying basic sanity checks, and that\u2019s what you\u2019ll configure in this exercise. Start the Lab Assuming you already set up your lab infrastructure : Change directory to challenge/04-block-fat-fingers Execute netlab up ( device requirements ) Log into your router (RTR) with the netlab connect rtr command and verify that the IP addresses and the EBGP sessions are properly configured. The Problem Your customers (C1 and C2) are advertising a plethora of prefixes that should not be advertised on the global Internet: IPv4 prefixes belonging to the private (RFC 1918) address space; Too-short prefixes (prefixes more specific than /24) Transit prefixes (prefixes originating in third-party autonomous systems) Prefixes with too-long AS paths A default route Log into your router and explore its BGP table. You\u2019ll find at least one prefix matching one of the above criteria. This is the BGP table on RTR as displayed by Cumulus Linux: rtr# show ip bgp BGP table version is 14, local router ID is 10.0.0.1, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 0.0.0.0/0 10.1.0.1 0 0 65100 i *> 10.0.0.2/32 10.1.0.1 0 0 65100 i *> 10.0.0.3/32 10.1.0.5 0 0 65101 i *> 100.64.1.1/32 10.1.0.5 0 0 65101 i *> 100.68.0.0/15 10.1.0.5 0 0 65101 i *> 100.73.16.0/22 10.1.0.1 0 0 65100 i *> 100.75.42.0/23 10.1.0.1 0 0 65100 65303 i *> 100.75.142.0/24 10.1.0.5 0 0 65101 65101 65101 65101 65101 65101 65101 65101 65101 65101 65101 i *> 100.78.43.0/24 10.1.0.5 0 0 65101 i *> 169.254.7.0/24 10.1.0.5 0 0 65101 i *> 172.16.1.0/24 10.1.0.1 0 0 65100 i *> 172.30.30.0/24 10.1.0.5 0 0 65101 i *> 192.168.1.0/24 10.1.0.1 0 0 65100 i *> 198.51.100.0/24 10.1.0.9 0 0 65107 i Tip Using public IPv4 prefixes in a lab is bad form, so we\u2019ll pretend the Shared Address Space prefix (100.64.0.0/10) belongs to public address space. Configuration Tasks Using a policy template , create a generic customer-facing routing policy that will drop: prefixes from the RFC 1918 address space, prefixes that are more specific than /24 or less specific than /16 (that would include the default route), prefixes that have more than one autonomous system in the AS path, prefixes that have an AS path with more than five elements. You should also only accept up to five prefixes from a customer. Once you created the policy template, apply it to all EBGP sessions with your customers. Use these lab exercises to master individual filtering- or configuration mechanisms you\u2019ll need to complete the configuration tasks: Limit the Number of Accepted BGP Prefixes Filter Transit Routes Filter Advertised Prefixes Minimize the Size of Your BGP Table BGP Session Templates BGP Policy Templates Verification Once you have deployed all the required input filters, you should see the following prefixes in the BGP table on your router: rtr# show ip bgp BGP table version is 14, local router ID is 10.0.0.1, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 100.73.16.0/22 10.1.0.1 0 0 65100 i *> 100.78.43.0/24 10.1.0.5 0 0 65101 i *> 198.51.100.0/24 10.1.0.9 0 0 65107 i Device Requirements Use any device supported by the netlab BGP configuration module for your router. Use Cumulus Linux or FRR for the customer- and peer routers. Git repository contains initial device configurations for Cumulus Linux. A concept totally foreign to some very large ISPs . \u21a9","title":"Stop the Propagation of Configuration Errors"},{"location":"challenge/04-block-fat-fingers/#stop-the-propagation-of-configuration-errors","text":"Nobody is perfect , including the networking engineers configuring BGP in your customers\u2019 networks. Still, it\u2019s your job as a responsible Internet Service Provider to filter the results of those mistakes before they reach the wider Internet. 1 In the ideal world, you\u2019d use RPKI and accept only valid prefixes belonging to your customers. Failing that, you could get valid customer prefixes from internet routing registries, but that\u2019s extra unpaid work. There\u2019s no excuse, however, for not deploying basic sanity checks, and that\u2019s what you\u2019ll configure in this exercise.","title":"Stop the Propagation of Configuration Errors"},{"location":"challenge/04-block-fat-fingers/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to challenge/04-block-fat-fingers Execute netlab up ( device requirements ) Log into your router (RTR) with the netlab connect rtr command and verify that the IP addresses and the EBGP sessions are properly configured.","title":"Start the Lab"},{"location":"challenge/04-block-fat-fingers/#the-problem","text":"Your customers (C1 and C2) are advertising a plethora of prefixes that should not be advertised on the global Internet: IPv4 prefixes belonging to the private (RFC 1918) address space; Too-short prefixes (prefixes more specific than /24) Transit prefixes (prefixes originating in third-party autonomous systems) Prefixes with too-long AS paths A default route Log into your router and explore its BGP table. You\u2019ll find at least one prefix matching one of the above criteria. This is the BGP table on RTR as displayed by Cumulus Linux: rtr# show ip bgp BGP table version is 14, local router ID is 10.0.0.1, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 0.0.0.0/0 10.1.0.1 0 0 65100 i *> 10.0.0.2/32 10.1.0.1 0 0 65100 i *> 10.0.0.3/32 10.1.0.5 0 0 65101 i *> 100.64.1.1/32 10.1.0.5 0 0 65101 i *> 100.68.0.0/15 10.1.0.5 0 0 65101 i *> 100.73.16.0/22 10.1.0.1 0 0 65100 i *> 100.75.42.0/23 10.1.0.1 0 0 65100 65303 i *> 100.75.142.0/24 10.1.0.5 0 0 65101 65101 65101 65101 65101 65101 65101 65101 65101 65101 65101 i *> 100.78.43.0/24 10.1.0.5 0 0 65101 i *> 169.254.7.0/24 10.1.0.5 0 0 65101 i *> 172.16.1.0/24 10.1.0.1 0 0 65100 i *> 172.30.30.0/24 10.1.0.5 0 0 65101 i *> 192.168.1.0/24 10.1.0.1 0 0 65100 i *> 198.51.100.0/24 10.1.0.9 0 0 65107 i Tip Using public IPv4 prefixes in a lab is bad form, so we\u2019ll pretend the Shared Address Space prefix (100.64.0.0/10) belongs to public address space.","title":"The Problem"},{"location":"challenge/04-block-fat-fingers/#configuration-tasks","text":"Using a policy template , create a generic customer-facing routing policy that will drop: prefixes from the RFC 1918 address space, prefixes that are more specific than /24 or less specific than /16 (that would include the default route), prefixes that have more than one autonomous system in the AS path, prefixes that have an AS path with more than five elements. You should also only accept up to five prefixes from a customer. Once you created the policy template, apply it to all EBGP sessions with your customers. Use these lab exercises to master individual filtering- or configuration mechanisms you\u2019ll need to complete the configuration tasks: Limit the Number of Accepted BGP Prefixes Filter Transit Routes Filter Advertised Prefixes Minimize the Size of Your BGP Table BGP Session Templates BGP Policy Templates","title":"Configuration Tasks"},{"location":"challenge/04-block-fat-fingers/#verification","text":"Once you have deployed all the required input filters, you should see the following prefixes in the BGP table on your router: rtr# show ip bgp BGP table version is 14, local router ID is 10.0.0.1, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 100.73.16.0/22 10.1.0.1 0 0 65100 i *> 100.78.43.0/24 10.1.0.5 0 0 65101 i *> 198.51.100.0/24 10.1.0.9 0 0 65107 i","title":"Verification"},{"location":"challenge/04-block-fat-fingers/#req","text":"Use any device supported by the netlab BGP configuration module for your router. Use Cumulus Linux or FRR for the customer- and peer routers. Git repository contains initial device configurations for Cumulus Linux. A concept totally foreign to some very large ISPs . \u21a9","title":"Device Requirements"},{"location":"challenge/05-ebgp-dc/","text":"EBGP-Only Data Center Design In this lab exercise, you\u2019ll build a modern layer-3-only leaf-and-spine data center fabric using EBGP as the sole routing protocol within the fabric and between the leaf (top-of-rack) switches and the servers. The fabric you\u2019ll build has these characteristics: It has no VLANs. All links are point-to-point layer-3 links. It supports only IPv6. Implementing a single layer-3 protocol within the data center and having multiprotocol address translation (NAT64) or proxy web servers at the data center edge is more manageable than running a dual-stack fabric. Point-to-point links have only IPv6 link-local addresses. The fabric uses EBGP as the only routing protocol. EBGP sessions are established between IPv6 link-local addresses. The fabric uses EBGP to implement redundant server connectivity. Servers use EBGP to advertise their loopback addresses to adjacent leaf switches. Expert This is an expert-level challenge lab \u2013 you are on your own. Good luck and Godspeed! Tip This lab is still under development. Follow blog.ipspace.net or Ivan Pepelnjak on LinkedIn to find out when it will be ready.","title":"EBGP-Only Data Center Design"},{"location":"challenge/05-ebgp-dc/#ebgp-only-data-center-design","text":"In this lab exercise, you\u2019ll build a modern layer-3-only leaf-and-spine data center fabric using EBGP as the sole routing protocol within the fabric and between the leaf (top-of-rack) switches and the servers. The fabric you\u2019ll build has these characteristics: It has no VLANs. All links are point-to-point layer-3 links. It supports only IPv6. Implementing a single layer-3 protocol within the data center and having multiprotocol address translation (NAT64) or proxy web servers at the data center edge is more manageable than running a dual-stack fabric. Point-to-point links have only IPv6 link-local addresses. The fabric uses EBGP as the only routing protocol. EBGP sessions are established between IPv6 link-local addresses. The fabric uses EBGP to implement redundant server connectivity. Servers use EBGP to advertise their loopback addresses to adjacent leaf switches. Expert This is an expert-level challenge lab \u2013 you are on your own. Good luck and Godspeed! Tip This lab is still under development. Follow blog.ipspace.net or Ivan Pepelnjak on LinkedIn to find out when it will be ready.","title":"EBGP-Only Data Center Design"},{"location":"challenge/20-merge-as/","text":"Merge Networks Using Different BGP AS Numbers When dealing with the networking aspects of mergers and acquisitions, you might encounter a scenario in which you\u2019ll have to merge two networks running BGP: Two organizations (ORG-1 and ORG-2) have built large BGP networks. Each one is using a different BGP AS number. ORG-1 is running OSPF, ORG-2 is running IS-IS as their IGP. The first physical link between the two networks (PE2-PE3) has been delivered. You decided to use the IPv4 prefix 172.29.42.0/24 on that link. Now, you have to connect the two networks with a minimum disruption of existing network operations: The only change you can make is a new BGP session between PE2 and PE3. Do not advertise the interconnect prefix (172.29.42.0/24) into either IGP. Tip You can change other aspects of device configuration on PE2 and PE3; for example, you\u2019ll have to assign IP addresses to the network interconnect. You cannot change configurations on other routers or redesign the routing protocols (even though that would be the best way to proceed). At the end of the migration project: ORG-1 and ORG-2 must announce all BGP prefixes belonging to the merged network to the external BGP peers. The external BGP peers have AS-path filters in place. ORG-1 AS should not appear in the AS path advertised by routers in ORG-2 and vice versa. As you plan to add more connections between the two networks, you must implement optimal end-to-end routing across the merged network. The BGP next hop of every prefix in the BGP table must be the final egress router of the merged network. Expert This is an expert-level challenge lab \u2013 you are on your own. Good luck and Godspeed! Existing Lab Configuration The routers in your lab use the following BGP AS numbers. Some of them advertise an IPv4 prefix. Node/ASN Router ID BGP RR Advertised prefixes AS65000 pe1 10.0.0.1 192.168.1.0/24 pe2 10.0.0.3 rr1 10.0.0.2 \u2705 AS65003 pe3 10.0.0.4 pe4 10.0.0.6 192.168.3.0/24 rr2 10.0.0.5 \u2705 AS65100 x1 10.0.0.10 192.168.100.1/24 AS65107 x2 10.0.0.11 192.168.101.1/24 Your routers have these BGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 pe1 10.0.0.1 65000 rr1 65000 10.0.0.2 x1 65100 10.1.0.2 pe2 10.0.0.3 65000 rr1 65000 10.0.0.2 pe3 10.0.0.4 65003 rr2 65003 10.0.0.5 pe4 10.0.0.6 65003 rr2 65003 10.0.0.5 x2 65107 10.1.0.18 rr1 10.0.0.2 65000 pe1 65000 10.0.0.1 pe2 65000 10.0.0.3 rr2 10.0.0.5 65003 pe3 65003 10.0.0.4 pe4 65003 10.0.0.6 IGP configuration: Routers in AS 65000 run OSPF. Routers in AS 65003 run IS-IS. Start the Lab Assuming you already set up your lab infrastructure : Change directory to challenge/20-merge-as Execute netlab up ( device requirements ) Log into your devices with netlab connect and verify that the IP addresses and the BGP sessions are properly configured. Verification The BGP table on X1 should contain four prefixes. None of the prefixes should have AS 65003 in the AS path: x1# show ip bgp BGP table version is 4, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 192.168.1.0/24 10.1.0.1 0 65000 ? *> 192.168.3.0/24 10.1.0.1 0 65000 ? *> 192.168.100.0/24 0.0.0.0 0 32768 i *> 192.168.101.0/24 10.1.0.1 0 65000 65107 i The BGP table on X2 should contain four prefixes. None of the prefixes should have AS 65000 in the AS path: x2# show ip bgp BGP table version is 4, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 65107 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 192.168.1.0/24 10.1.0.17 0 65003 ? *> 192.168.3.0/24 10.1.0.17 0 65003 ? *> 192.168.100.0/24 10.1.0.17 0 65003 65100 i *> 192.168.101.0/24 0.0.0.0 0 32768 i Displayed 4 routes and 4 total paths On PE1, the next hop of the BGP prefix 192.168.3.0/24 (or 192.168.101.0/24) should be 10.0.0.6: pe1>show ip bgp 192.168.3.0 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 192.168.3.0/24 Paths: 1 available Local 10.0.0.6 from 10.0.0.2 (10.0.0.2) Origin INCOMPLETE, metric 0, localpref 100, IGP metric 0, weight 0, tag 0 Received 00:06:14 ago, valid, internal, best ... Device Requirements Use any device supported by the netlab BGP, OSPF, and IS-IS configuration modules for the customer routers. If your preferred device does not support IS-IS (for example, Cumulus Linux), replace the org_2 group setting module: [ bgp, isis ] in the lab topology file with module: [ bgp, ospf ] . Use any device supported by the BGP configuration module for the external routers.","title":"Merge Networks Using Different BGP AS Numbers"},{"location":"challenge/20-merge-as/#merge-networks-using-different-bgp-as-numbers","text":"When dealing with the networking aspects of mergers and acquisitions, you might encounter a scenario in which you\u2019ll have to merge two networks running BGP: Two organizations (ORG-1 and ORG-2) have built large BGP networks. Each one is using a different BGP AS number. ORG-1 is running OSPF, ORG-2 is running IS-IS as their IGP. The first physical link between the two networks (PE2-PE3) has been delivered. You decided to use the IPv4 prefix 172.29.42.0/24 on that link. Now, you have to connect the two networks with a minimum disruption of existing network operations: The only change you can make is a new BGP session between PE2 and PE3. Do not advertise the interconnect prefix (172.29.42.0/24) into either IGP. Tip You can change other aspects of device configuration on PE2 and PE3; for example, you\u2019ll have to assign IP addresses to the network interconnect. You cannot change configurations on other routers or redesign the routing protocols (even though that would be the best way to proceed). At the end of the migration project: ORG-1 and ORG-2 must announce all BGP prefixes belonging to the merged network to the external BGP peers. The external BGP peers have AS-path filters in place. ORG-1 AS should not appear in the AS path advertised by routers in ORG-2 and vice versa. As you plan to add more connections between the two networks, you must implement optimal end-to-end routing across the merged network. The BGP next hop of every prefix in the BGP table must be the final egress router of the merged network. Expert This is an expert-level challenge lab \u2013 you are on your own. Good luck and Godspeed!","title":"Merge Networks Using Different BGP AS Numbers"},{"location":"challenge/20-merge-as/#existing-lab-configuration","text":"The routers in your lab use the following BGP AS numbers. Some of them advertise an IPv4 prefix. Node/ASN Router ID BGP RR Advertised prefixes AS65000 pe1 10.0.0.1 192.168.1.0/24 pe2 10.0.0.3 rr1 10.0.0.2 \u2705 AS65003 pe3 10.0.0.4 pe4 10.0.0.6 192.168.3.0/24 rr2 10.0.0.5 \u2705 AS65100 x1 10.0.0.10 192.168.100.1/24 AS65107 x2 10.0.0.11 192.168.101.1/24 Your routers have these BGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 pe1 10.0.0.1 65000 rr1 65000 10.0.0.2 x1 65100 10.1.0.2 pe2 10.0.0.3 65000 rr1 65000 10.0.0.2 pe3 10.0.0.4 65003 rr2 65003 10.0.0.5 pe4 10.0.0.6 65003 rr2 65003 10.0.0.5 x2 65107 10.1.0.18 rr1 10.0.0.2 65000 pe1 65000 10.0.0.1 pe2 65000 10.0.0.3 rr2 10.0.0.5 65003 pe3 65003 10.0.0.4 pe4 65003 10.0.0.6 IGP configuration: Routers in AS 65000 run OSPF. Routers in AS 65003 run IS-IS.","title":"Existing Lab Configuration"},{"location":"challenge/20-merge-as/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to challenge/20-merge-as Execute netlab up ( device requirements ) Log into your devices with netlab connect and verify that the IP addresses and the BGP sessions are properly configured.","title":"Start the Lab"},{"location":"challenge/20-merge-as/#verification","text":"The BGP table on X1 should contain four prefixes. None of the prefixes should have AS 65003 in the AS path: x1# show ip bgp BGP table version is 4, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 192.168.1.0/24 10.1.0.1 0 65000 ? *> 192.168.3.0/24 10.1.0.1 0 65000 ? *> 192.168.100.0/24 0.0.0.0 0 32768 i *> 192.168.101.0/24 10.1.0.1 0 65000 65107 i The BGP table on X2 should contain four prefixes. None of the prefixes should have AS 65000 in the AS path: x2# show ip bgp BGP table version is 4, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 65107 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 192.168.1.0/24 10.1.0.17 0 65003 ? *> 192.168.3.0/24 10.1.0.17 0 65003 ? *> 192.168.100.0/24 10.1.0.17 0 65003 65100 i *> 192.168.101.0/24 0.0.0.0 0 32768 i Displayed 4 routes and 4 total paths On PE1, the next hop of the BGP prefix 192.168.3.0/24 (or 192.168.101.0/24) should be 10.0.0.6: pe1>show ip bgp 192.168.3.0 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 192.168.3.0/24 Paths: 1 available Local 10.0.0.6 from 10.0.0.2 (10.0.0.2) Origin INCOMPLETE, metric 0, localpref 100, IGP metric 0, weight 0, tag 0 Received 00:06:14 ago, valid, internal, best ...","title":"Verification"},{"location":"challenge/20-merge-as/#req","text":"Use any device supported by the netlab BGP, OSPF, and IS-IS configuration modules for the customer routers. If your preferred device does not support IS-IS (for example, Cumulus Linux), replace the org_2 group setting module: [ bgp, isis ] in the lab topology file with module: [ bgp, ospf ] . Use any device supported by the BGP configuration module for the external routers.","title":"Device Requirements"},{"location":"challenge/21-loopback-vrf/","text":"Run EBGP Between VRF Instances on a Single Router In the Running EBGP Across a Firewall lab exercise, you learned how to establish a multihop EBGP session across a layer-3 firewall between an internal router and a WAN edge router. In small networks, you might not have two dedicated routers to work with; you will have to use routing instances (commonly called Virtual Routing and Forwarding tables \u2013 VRFs) to reuse the WAN edge router as the internal router. In this lab exercise, you\u2019ll connect your internal network to the Internet through a firewall using a single router . You\u2019ll have to: Create a WAN VRF on your router Establish an EBGP multihop session across the firewall between an interface in the global routing table and another interface in the WAN VRF. Establish an EBGP session in the WAN VRF with the upstream ISP. Advertise the internal IP prefix across the firewall and through the WAN VRF to the ISP router Advertise the default route from the WAN VRF to the global BGP instance. Tip This lab is still under development. Follow blog.ipspace.net or Ivan Pepelnjak on LinkedIn to find out when it will be ready.","title":"Run EBGP Between VRF Instances on a Single Router"},{"location":"challenge/21-loopback-vrf/#run-ebgp-between-vrf-instances-on-a-single-router","text":"In the Running EBGP Across a Firewall lab exercise, you learned how to establish a multihop EBGP session across a layer-3 firewall between an internal router and a WAN edge router. In small networks, you might not have two dedicated routers to work with; you will have to use routing instances (commonly called Virtual Routing and Forwarding tables \u2013 VRFs) to reuse the WAN edge router as the internal router. In this lab exercise, you\u2019ll connect your internal network to the Internet through a firewall using a single router . You\u2019ll have to: Create a WAN VRF on your router Establish an EBGP multihop session across the firewall between an interface in the global routing table and another interface in the WAN VRF. Establish an EBGP session in the WAN VRF with the upstream ISP. Advertise the internal IP prefix across the firewall and through the WAN VRF to the ISP router Advertise the default route from the WAN VRF to the global BGP instance. Tip This lab is still under development. Follow blog.ipspace.net or Ivan Pepelnjak on LinkedIn to find out when it will be ready.","title":"Run EBGP Between VRF Instances on a Single Router"},{"location":"challenge/22-bgp-ha-protocol/","text":"BGP as a High Availability Protocol In the Running EBGP Across a Firewall lab exercise, you learned how to establish a multihop EBGP session across a layer-3 firewall between an internal router and a WAN edge router. In this lab exercise, you\u2019ll use that concept to run BGP across two firewalls, using one of them as the primary and the other as the backup instance. Tip This lab is still under development. Follow blog.ipspace.net or Ivan Pepelnjak on LinkedIn to find out when it will be ready.","title":"BGP as a High Availability Protocol"},{"location":"challenge/22-bgp-ha-protocol/#bgp-as-a-high-availability-protocol","text":"In the Running EBGP Across a Firewall lab exercise, you learned how to establish a multihop EBGP session across a layer-3 firewall between an internal router and a WAN edge router. In this lab exercise, you\u2019ll use that concept to run BGP across two firewalls, using one of them as the primary and the other as the backup instance. Tip This lab is still under development. Follow blog.ipspace.net or Ivan Pepelnjak on LinkedIn to find out when it will be ready.","title":"BGP as a High Availability Protocol"},{"location":"challenge/30-reduce-fib/","text":"Minimize the Forwarding Table on BGP Routers The global Internet BGP routing table has close to a million entries, and even though most of them would be reachable from the same small set of exit points from your network, you still have to store them in the forwarding tables of your routers, making your devices more expensive than necessary. A more innovative design would use default routing toward the network core and store only the locally significant routes in the forwarding tables of the routers facing the end customers. You would still have to use expensive gear for the core routers and devices peering with upstream Service Providers, but you could use more optimized equipment on the customer-facing devices. Many modern BGP implementations provide filters between the BGP table and the main IP routing table or between the IP routing table and the forwarding table. In this exercise, you will use that functionality to remove the routes the upstream Service Providers advertised from the forwarding table on a Provider Edge router. Expert This is an expert-level challenge lab \u2013 you are on your own. Good luck and Godspeed! Existing Routing Protocol Configuration The routers in your lab use the following BGP AS numbers. Each customer router advertises an IPv4 prefix; upstream routers advertise numerous prefixes. Node/ASN Router ID Advertised prefixes AS65001 ce1 10.17.1.1 10.17.1.0/24 AS65002 ce2 10.22.2.1 10.22.2.0/24 AS65003 ce3 10.15.3.1 10.15.3.0/24 AS65100 c1 10.0.0.1 pe1 10.0.0.2 AS65200 xa 10.0.0.3 172.18.3.0/24 172.18.12.0/22 172.18.32.0/21 192.168.200.0/22 AS65201 xb 10.0.0.4 172.19.7.0/24 172.20.32.0/22 172.19.40.0/21 192.168.77.0/24 Your routers run OSPF on the intra-AS link and have the following BGP neighbors. netlab configures OSPF and BGP on your devices automatically; you\u2019ll have to configure them manually if you\u2019re using another lab infrastructure. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 c1 10.0.0.1 65100 pe1 65100 10.0.0.2 ce2 65002 10.1.0.14 xa 65200 10.1.0.18 xb 65201 10.1.0.22 pe1 10.0.0.2 65100 c1 65100 10.0.0.1 ce1 65001 10.1.0.1 ce3 65003 10.1.0.5 Device Requirements While you can use any device supported by the netlab BGP configuration module for the customer- and provider routers, not all devices supported BGP-to-RIB filters: Cumulus Linux and FRR work as expected, but the FRR containers don\u2019t use the BGP default route. They don\u2019t have a management VRF and have a static default route configured by the virtualization system in the global routing table. While Arista EOS documentation claims Arista EOS supports this feature, I couldn\u2019t make it work. Start the Lab Assuming you already set up your lab infrastructure : Change directory to challenge/30-reduce-fib Execute netlab up Log into your router (RTR) with netlab connect rtr and verify that the IP addresses and the EBGP sessions are properly configured. Tip The Git repository contains external router initial device configurations for Cumulus Linux. The Problem Log into PE1 and inspect its BGP table and routing table. Its routing table contains all BGP prefixes received from the upstream ISPs. pe1# show ip route bgp Codes: K - kernel route, C - connected, S - static, R - RIP, O - OSPF, I - IS-IS, B - BGP, E - EIGRP, N - NHRP, T - Table, v - VNC, V - VNC-Direct, A - Babel, D - SHARP, F - PBR, f - OpenFabric, > - selected route, * - FIB route, q - queued, r - rejected, b - backup t - trapped, o - offload failure * via 10.1.0.9, swp3, weight 1, 00:00:11 B>* 10.15.3.0/24 [20/0] via 10.1.0.5, swp2, weight 1, 00:00:11 B>* 10.17.1.0/24 [20/0] via 10.1.0.1, swp1, weight 1, 00:00:11 B> 10.22.2.0/24 [200/0] via 10.0.0.1 (recursive), weight 1, 00:00:11 * via 10.1.0.9, swp3, weight 1, 00:00:11 B> 172.18.3.0/24 [200/0] via 10.0.0.1 (recursive), weight 1, 00:00:11 * via 10.1.0.9, swp3, weight 1, 00:00:11 B> 172.18.12.0/22 [200/0] via 10.0.0.1 (recursive), weight 1, 00:00:11 * via 10.1.0.9, swp3, weight 1, 00:00:11 B> 172.18.32.0/21 [200/0] via 10.0.0.1 (recursive), weight 1, 00:00:11 * via 10.1.0.9, swp3, weight 1, 00:00:11 B> 172.19.7.0/24 [200/0] via 10.0.0.1 (recursive), weight 1, 00:00:11 * via 10.1.0.9, swp3, weight 1, 00:00:11 B> 172.19.40.0/21 [200/0] via 10.0.0.1 (recursive), weight 1, 00:00:11 * via 10.1.0.9, swp3, weight 1, 00:00:11 B> 172.20.32.0/22 [200/0] via 10.0.0.1 (recursive), weight 1, 00:00:11 * via 10.1.0.9, swp3, weight 1, 00:00:11 B> 192.168.77.0/24 [200/0] via 10.0.0.1 (recursive), weight 1, 00:00:11 * via 10.1.0.9, swp3, weight 1, 00:00:11 B> 192.168.200.0/22 [200/0] via 10.0.0.1 (recursive), weight 1, 00:00:11 * via 10.1.0.9, swp3, weight 1, 00:00:11 Configuration Guidelines On the PE router, use the filter between the BGP table and the main routing table to remove routes advertised by AS 65200 and AS 65201 (the upstream providers) from the forwarding table. Alternatively, you could remove all BGP routes with C1 as the next hop from the forwarding table. After you remove those routes from the forwarding table, your customers can no longer reach upstream destinations (because they are not in the PE router FIB) even though the PE router is still advertising them. Use BGP default routing to give the PE router a default exit point through C1. However, you should not advertise that default to the customers. Verification Log into the lab routers and verify that: The routing table on PE1 no longer contains prefixes from AS 65200 or AS 65201: pe1# show ip route bgp Codes: K - kernel route, C - connected, S - static, R - RIP, O - OSPF, I - IS-IS, B - BGP, E - EIGRP, N - NHRP, T - Table, v - VNC, V - VNC-Direct, A - Babel, D - SHARP, F - PBR, f - OpenFabric, > - selected route, * - FIB route, q - queued, r - rejected, b - backup t - trapped, o - offload failure B> 0.0.0.0/0 [200/0] via 10.0.0.1 (recursive), weight 1, 00:00:03 * via 10.1.0.9, swp3, weight 1, 00:00:03 B>* 10.15.3.0/24 [20/0] via 10.1.0.5, swp2, weight 1, 00:00:03 B>* 10.17.1.0/24 [20/0] via 10.1.0.1, swp1, weight 1, 00:00:03 B> 10.22.2.0/24 [200/0] via 10.0.0.1 (recursive), weight 1, 00:00:03 * via 10.1.0.9, swp3, weight 1, 00:00:03 The BGP table on CE1 contains all prefixes from AS 65200 and AS 65201 but not the default route. ce1# show ip bgp BGP table version is 12, local router ID is 10.17.1.1, vrf id 0 Default local pref 100, local AS 65001 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 10.15.3.0/24 10.1.0.2 0 65100 65003 i *> 10.17.1.0/24 0.0.0.0 0 32768 i *> 10.22.2.0/24 10.1.0.2 0 65100 65002 i *> 172.18.3.0/24 10.1.0.2 0 65100 65200 i *> 172.18.12.0/22 10.1.0.2 0 65100 65200 i *> 172.18.32.0/21 10.1.0.2 0 65100 65200 i *> 172.19.7.0/24 10.1.0.2 0 65100 65201 i *> 172.19.40.0/21 10.1.0.2 0 65100 65201 i *> 172.20.32.0/22 10.1.0.2 0 65100 65201 i *> 192.168.77.0/24 10.1.0.2 0 65100 65201 i *> 192.168.200.0/22 10.1.0.2 0 65100 65200 i CE1 can ping 172.18.3.1 , a destination in AS 65200 1 : ce1(bash)#ping -I 10.17.1.1 172.18.3.1 PING 172.18.3.1 (172.18.3.1) from 10.17.1.1 : 56(84) bytes of data. 64 bytes from 172.18.3.1: icmp_seq=1 ttl=62 time=0.089 ms 64 bytes from 172.18.3.1: icmp_seq=2 ttl=62 time=0.052 ms 64 bytes from 172.18.3.1: icmp_seq=3 ttl=62 time=0.058 ms 64 bytes from 172.18.3.1: icmp_seq=4 ttl=62 time=0.074 ms ^C That\u2019s the only destination you can ping in the upstream autonomous systems. \u21a9","title":"Minimize the Forwarding Table on BGP Routers"},{"location":"challenge/30-reduce-fib/#minimize-the-forwarding-table-on-bgp-routers","text":"The global Internet BGP routing table has close to a million entries, and even though most of them would be reachable from the same small set of exit points from your network, you still have to store them in the forwarding tables of your routers, making your devices more expensive than necessary. A more innovative design would use default routing toward the network core and store only the locally significant routes in the forwarding tables of the routers facing the end customers. You would still have to use expensive gear for the core routers and devices peering with upstream Service Providers, but you could use more optimized equipment on the customer-facing devices. Many modern BGP implementations provide filters between the BGP table and the main IP routing table or between the IP routing table and the forwarding table. In this exercise, you will use that functionality to remove the routes the upstream Service Providers advertised from the forwarding table on a Provider Edge router. Expert This is an expert-level challenge lab \u2013 you are on your own. Good luck and Godspeed!","title":"Minimize the Forwarding Table on BGP Routers"},{"location":"challenge/30-reduce-fib/#existing-routing-protocol-configuration","text":"The routers in your lab use the following BGP AS numbers. Each customer router advertises an IPv4 prefix; upstream routers advertise numerous prefixes. Node/ASN Router ID Advertised prefixes AS65001 ce1 10.17.1.1 10.17.1.0/24 AS65002 ce2 10.22.2.1 10.22.2.0/24 AS65003 ce3 10.15.3.1 10.15.3.0/24 AS65100 c1 10.0.0.1 pe1 10.0.0.2 AS65200 xa 10.0.0.3 172.18.3.0/24 172.18.12.0/22 172.18.32.0/21 192.168.200.0/22 AS65201 xb 10.0.0.4 172.19.7.0/24 172.20.32.0/22 172.19.40.0/21 192.168.77.0/24 Your routers run OSPF on the intra-AS link and have the following BGP neighbors. netlab configures OSPF and BGP on your devices automatically; you\u2019ll have to configure them manually if you\u2019re using another lab infrastructure. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 c1 10.0.0.1 65100 pe1 65100 10.0.0.2 ce2 65002 10.1.0.14 xa 65200 10.1.0.18 xb 65201 10.1.0.22 pe1 10.0.0.2 65100 c1 65100 10.0.0.1 ce1 65001 10.1.0.1 ce3 65003 10.1.0.5","title":"Existing Routing Protocol Configuration"},{"location":"challenge/30-reduce-fib/#device-requirements","text":"While you can use any device supported by the netlab BGP configuration module for the customer- and provider routers, not all devices supported BGP-to-RIB filters: Cumulus Linux and FRR work as expected, but the FRR containers don\u2019t use the BGP default route. They don\u2019t have a management VRF and have a static default route configured by the virtualization system in the global routing table. While Arista EOS documentation claims Arista EOS supports this feature, I couldn\u2019t make it work.","title":"Device Requirements"},{"location":"challenge/30-reduce-fib/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to challenge/30-reduce-fib Execute netlab up Log into your router (RTR) with netlab connect rtr and verify that the IP addresses and the EBGP sessions are properly configured. Tip The Git repository contains external router initial device configurations for Cumulus Linux.","title":"Start the Lab"},{"location":"challenge/30-reduce-fib/#the-problem","text":"Log into PE1 and inspect its BGP table and routing table. Its routing table contains all BGP prefixes received from the upstream ISPs. pe1# show ip route bgp Codes: K - kernel route, C - connected, S - static, R - RIP, O - OSPF, I - IS-IS, B - BGP, E - EIGRP, N - NHRP, T - Table, v - VNC, V - VNC-Direct, A - Babel, D - SHARP, F - PBR, f - OpenFabric, > - selected route, * - FIB route, q - queued, r - rejected, b - backup t - trapped, o - offload failure * via 10.1.0.9, swp3, weight 1, 00:00:11 B>* 10.15.3.0/24 [20/0] via 10.1.0.5, swp2, weight 1, 00:00:11 B>* 10.17.1.0/24 [20/0] via 10.1.0.1, swp1, weight 1, 00:00:11 B> 10.22.2.0/24 [200/0] via 10.0.0.1 (recursive), weight 1, 00:00:11 * via 10.1.0.9, swp3, weight 1, 00:00:11 B> 172.18.3.0/24 [200/0] via 10.0.0.1 (recursive), weight 1, 00:00:11 * via 10.1.0.9, swp3, weight 1, 00:00:11 B> 172.18.12.0/22 [200/0] via 10.0.0.1 (recursive), weight 1, 00:00:11 * via 10.1.0.9, swp3, weight 1, 00:00:11 B> 172.18.32.0/21 [200/0] via 10.0.0.1 (recursive), weight 1, 00:00:11 * via 10.1.0.9, swp3, weight 1, 00:00:11 B> 172.19.7.0/24 [200/0] via 10.0.0.1 (recursive), weight 1, 00:00:11 * via 10.1.0.9, swp3, weight 1, 00:00:11 B> 172.19.40.0/21 [200/0] via 10.0.0.1 (recursive), weight 1, 00:00:11 * via 10.1.0.9, swp3, weight 1, 00:00:11 B> 172.20.32.0/22 [200/0] via 10.0.0.1 (recursive), weight 1, 00:00:11 * via 10.1.0.9, swp3, weight 1, 00:00:11 B> 192.168.77.0/24 [200/0] via 10.0.0.1 (recursive), weight 1, 00:00:11 * via 10.1.0.9, swp3, weight 1, 00:00:11 B> 192.168.200.0/22 [200/0] via 10.0.0.1 (recursive), weight 1, 00:00:11 * via 10.1.0.9, swp3, weight 1, 00:00:11","title":"The Problem"},{"location":"challenge/30-reduce-fib/#configuration-guidelines","text":"On the PE router, use the filter between the BGP table and the main routing table to remove routes advertised by AS 65200 and AS 65201 (the upstream providers) from the forwarding table. Alternatively, you could remove all BGP routes with C1 as the next hop from the forwarding table. After you remove those routes from the forwarding table, your customers can no longer reach upstream destinations (because they are not in the PE router FIB) even though the PE router is still advertising them. Use BGP default routing to give the PE router a default exit point through C1. However, you should not advertise that default to the customers.","title":"Configuration Guidelines"},{"location":"challenge/30-reduce-fib/#verification","text":"Log into the lab routers and verify that: The routing table on PE1 no longer contains prefixes from AS 65200 or AS 65201: pe1# show ip route bgp Codes: K - kernel route, C - connected, S - static, R - RIP, O - OSPF, I - IS-IS, B - BGP, E - EIGRP, N - NHRP, T - Table, v - VNC, V - VNC-Direct, A - Babel, D - SHARP, F - PBR, f - OpenFabric, > - selected route, * - FIB route, q - queued, r - rejected, b - backup t - trapped, o - offload failure B> 0.0.0.0/0 [200/0] via 10.0.0.1 (recursive), weight 1, 00:00:03 * via 10.1.0.9, swp3, weight 1, 00:00:03 B>* 10.15.3.0/24 [20/0] via 10.1.0.5, swp2, weight 1, 00:00:03 B>* 10.17.1.0/24 [20/0] via 10.1.0.1, swp1, weight 1, 00:00:03 B> 10.22.2.0/24 [200/0] via 10.0.0.1 (recursive), weight 1, 00:00:03 * via 10.1.0.9, swp3, weight 1, 00:00:03 The BGP table on CE1 contains all prefixes from AS 65200 and AS 65201 but not the default route. ce1# show ip bgp BGP table version is 12, local router ID is 10.17.1.1, vrf id 0 Default local pref 100, local AS 65001 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 10.15.3.0/24 10.1.0.2 0 65100 65003 i *> 10.17.1.0/24 0.0.0.0 0 32768 i *> 10.22.2.0/24 10.1.0.2 0 65100 65002 i *> 172.18.3.0/24 10.1.0.2 0 65100 65200 i *> 172.18.12.0/22 10.1.0.2 0 65100 65200 i *> 172.18.32.0/21 10.1.0.2 0 65100 65200 i *> 172.19.7.0/24 10.1.0.2 0 65100 65201 i *> 172.19.40.0/21 10.1.0.2 0 65100 65201 i *> 172.20.32.0/22 10.1.0.2 0 65100 65201 i *> 192.168.77.0/24 10.1.0.2 0 65100 65201 i *> 192.168.200.0/22 10.1.0.2 0 65100 65200 i CE1 can ping 172.18.3.1 , a destination in AS 65200 1 : ce1(bash)#ping -I 10.17.1.1 172.18.3.1 PING 172.18.3.1 (172.18.3.1) from 10.17.1.1 : 56(84) bytes of data. 64 bytes from 172.18.3.1: icmp_seq=1 ttl=62 time=0.089 ms 64 bytes from 172.18.3.1: icmp_seq=2 ttl=62 time=0.052 ms 64 bytes from 172.18.3.1: icmp_seq=3 ttl=62 time=0.058 ms 64 bytes from 172.18.3.1: icmp_seq=4 ttl=62 time=0.074 ms ^C That\u2019s the only destination you can ping in the upstream autonomous systems. \u21a9","title":"Verification"},{"location":"challenge/40-mpls-core/","text":"BGP-Free Core in a Transit Network In the \u200c Build a Transit Network with IBGP lab exercise, you discovered why you must run BGP on every router in the forwarding path between two external autonomous systems. Some Internet Service Providers don\u2019t want to have full Internet routing tables on their core routers and use a different approach: hide the transit traffic from the core routers by encapsulating it into a GRE/VXLAN tunnel or by sending it across the network in an MPLS virtual circuit (Label Switched Path \u2013 LSP). That\u2019s what you\u2019ll practice in this lab exercise. Expert This is an expert-level challenge lab \u2013 you are on your own. Good luck and Godspeed! Device Requirements Use any device supported by the netlab BGP configuration module for the external routers. Use any router/switch supported by the netlab BGP and OSPF configuration modules for your devices. Check that the device you plan to use supports MPLS. Git repository contains external router initial device configurations for Cumulus Linux. Warning Use cEOS release 4.31.2F or later and netlab release 1.9.0 or later to use MPLS with Arista EOS containers. SR Linux needs a license file to run MPLS. You cannot use MPLS with FRRouting, Cumulus Linux, or VyOS containers within Github Codespaces. Existing Routing Protocol Configuration The routers in your lab use the following BGP AS numbers. All routers advertise their loopbacks 1 . Node/ASN Router ID Advertised prefixes AS65000 pe1 10.0.0.1 pe2 10.0.0.2 AS65101 e1 192.168.101.1 192.168.101.0/24 AS65102 e2 192.168.102.1 192.168.102.0/24 Your devices have these BGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 pe1 10.0.0.1 65000 pe2 65000 10.0.0.2 e1 65101 10.1.0.1 pe2 10.0.0.2 65000 pe1 65000 10.0.0.1 e2 65102 10.1.0.13 Your devices are running OSPF on intra-AS links. OSPF uses area 0 (the backbone area). Router Interface IPv4 Address Neighbor(s) pe1 Loopback 10.0.0.1/32 Ethernet2 10.1.0.6/30 core pe2 Loopback 10.0.0.2/32 Ethernet1 10.1.0.10/30 core core Loopback 10.0.0.3/32 Ethernet1 10.1.0.5/30 pe1 Ethernet2 10.1.0.9/30 pe2 netlab automatically configures IP addresses, OSPF, and BGP on your devices; if you\u2019re using other lab infrastructure, you\u2019ll have to configure them manually. Start the Lab Assuming you already set up your lab infrastructure : Change directory to challenge/40-mpls-core Execute netlab up ( other options ) Log into your devices with netlab connect and verify that the IP addresses, OSPF routing, and the BGP sessions are properly configured. The Problem After the OSPF adjacencies in the transit autonomous system are established, E1 receives the BGP prefix advertised by E2 (and vice versa): e1# show ip bgp BGP table version is 4, local router ID is 192.168.101.1, vrf id 0 Default local pref 100, local AS 65101 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 192.168.101.0/24 0.0.0.0(e1) 0 32768 i *> 192.168.102.0/24 10.1.0.2 0 65000 65102 i Displayed 4 routes and 4 total paths However, you can\u2019t ping E2 from the loopback address of E1: e1(bash)#ping -I 192.168.101.1 192.168.102.1 PING 192.168.102.1 (192.168.102.1) from 192.168.101.1: 56 data bytes ^C --- 192.168.102.1 ping statistics --- 8 packets transmitted, 0 packets received, 100% packet loss A traceroute executed on E1 indicates that the probe packets arrive at PE1 and then get dropped by the CORE router. You shouldn\u2019t be surprised by that behavior; the CORE router is not running BGP and has no route to E1 or E2. e1(bash)#traceroute -s 192.168.101.1 192.168.102.1 traceroute to 192.168.102.1 (192.168.102.1) from 192.168.101.1, 30 hops max, 46 byte packets 1 10.1.0.2 (10.1.0.2) 0.002 ms 0.002 ms 0.001 ms 2 * * * Tip You must execute ping and traceroute between loopback IP addresses of E1 and E2. The syntax of extended ping and traceroute commands differs across network devices; on Linux, use ping -I $locip $remoteip and traceroute -s $locip $remoteip . Configuration Hint You must configure MPLS transport across AS 65000 to hide transit traffic into an MPLS LSP. To do this, you can use the Label Distribution Protocol or MPLS-based Segment Routing (SR/MPLS) using OSPF. Warning If you\u2019re using FRRouting containers, execute sudo modprobe mpls-router mpls-iptunnel before starting the lab. You must use sysctl commands to enable MPLS on FRRouting interfaces (see FRRouting OSPF Segment Routing documentation for more details). Verification After setting up MPLS transport across AS 65000, you should see MPLS labels attached to BGP routes on PE1 and PE2 (printout from Arista vEOS): pe1#show ip route bgp ... B E 192.168.101.0/24 [200/0] via 10.1.0.1, Ethernet1 B I 192.168.102.0/24 [200/0] via 10.0.0.2/32, LDP tunnel index 2 via 10.1.0.5, Ethernet2, label 100001 ping and traceroute between E1 and E2 should work. Depending on how you configured the CORE device, you might not see it in the traceroute printout: vagrant@e1:mgmt:~$ ping 192.168.102.1 -I 192.168.101.1 vrf-wrapper.sh: switching to vrf \"default\"; use '--no-vrf-switch' to disable PING 192.168.102.1 (192.168.102.1) from 192.168.101.1 : 56(84) bytes of data. 64 bytes from 192.168.102.1: icmp_seq=1 ttl=61 time=11.9 ms 64 bytes from 192.168.102.1: icmp_seq=2 ttl=61 time=9.78 ms 64 bytes from 192.168.102.1: icmp_seq=3 ttl=61 time=9.47 ms 64 bytes from 192.168.102.1: icmp_seq=4 ttl=61 time=11.2 ms 64 bytes from 192.168.102.1: icmp_seq=5 ttl=61 time=10.3 ms ^C --- 192.168.102.1 ping statistics --- 5 packets transmitted, 5 received, 0% packet loss, time 11ms rtt min/avg/max/mdev = 9.470/10.557/11.949/0.930 ms vagrant@e1:mgmt:~$ traceroute 192.168.102.1 -s 192.168.101.1 vrf-wrapper.sh: switching to vrf \"default\"; use '--no-vrf-switch' to disable traceroute to 192.168.102.1 (192.168.102.1), 30 hops max, 60 byte packets 1 10.1.0.2 (10.1.0.2) 2.066 ms 2.227 ms 2.810 ms 2 * * * 3 10.1.0.10 (10.1.0.10) 13.077 ms 14.636 ms 16.515 ms 4 10.1.0.13 (192.168.102.1) 18.186 ms 20.036 ms 22.695 ms Reference Information Lab Wiring Origin Device Origin Port Destination Device Destination Port e1 swp1 pe1 Ethernet1 pe1 Ethernet2 core Ethernet1 core Ethernet2 pe2 Ethernet1 pe2 Ethernet2 e2 swp1 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description core 10.0.0.3/32 Loopback Ethernet1 10.1.0.5/30 core -> pe1 Ethernet2 10.1.0.9/30 core -> pe2 e1 192.168.101.1/24 Loopback swp1 10.1.0.1/30 e1 -> pe1 e2 192.168.102.1/24 Loopback swp1 10.1.0.13/30 e2 -> pe2 pe1 10.0.0.1/32 Loopback Ethernet1 10.1.0.2/30 pe1 -> e1 Ethernet2 10.1.0.6/30 pe1 -> core pe2 10.0.0.2/32 Loopback Ethernet1 10.1.0.10/30 pe2 -> core Ethernet2 10.1.0.14/30 pe2 -> e2 Loopbacks of PE1 and PE2 won\u2019t be advertised to adjacent autonomous systems if you\u2019re running a recent version of FRRouting ( more details ). \u21a9","title":"BGP-Free Core in a Transit Network"},{"location":"challenge/40-mpls-core/#bgp-free-core-in-a-transit-network","text":"In the \u200c Build a Transit Network with IBGP lab exercise, you discovered why you must run BGP on every router in the forwarding path between two external autonomous systems. Some Internet Service Providers don\u2019t want to have full Internet routing tables on their core routers and use a different approach: hide the transit traffic from the core routers by encapsulating it into a GRE/VXLAN tunnel or by sending it across the network in an MPLS virtual circuit (Label Switched Path \u2013 LSP). That\u2019s what you\u2019ll practice in this lab exercise. Expert This is an expert-level challenge lab \u2013 you are on your own. Good luck and Godspeed!","title":"BGP-Free Core in a Transit Network"},{"location":"challenge/40-mpls-core/#req","text":"Use any device supported by the netlab BGP configuration module for the external routers. Use any router/switch supported by the netlab BGP and OSPF configuration modules for your devices. Check that the device you plan to use supports MPLS. Git repository contains external router initial device configurations for Cumulus Linux. Warning Use cEOS release 4.31.2F or later and netlab release 1.9.0 or later to use MPLS with Arista EOS containers. SR Linux needs a license file to run MPLS. You cannot use MPLS with FRRouting, Cumulus Linux, or VyOS containers within Github Codespaces.","title":"Device Requirements"},{"location":"challenge/40-mpls-core/#existing-routing-protocol-configuration","text":"The routers in your lab use the following BGP AS numbers. All routers advertise their loopbacks 1 . Node/ASN Router ID Advertised prefixes AS65000 pe1 10.0.0.1 pe2 10.0.0.2 AS65101 e1 192.168.101.1 192.168.101.0/24 AS65102 e2 192.168.102.1 192.168.102.0/24 Your devices have these BGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 pe1 10.0.0.1 65000 pe2 65000 10.0.0.2 e1 65101 10.1.0.1 pe2 10.0.0.2 65000 pe1 65000 10.0.0.1 e2 65102 10.1.0.13 Your devices are running OSPF on intra-AS links. OSPF uses area 0 (the backbone area). Router Interface IPv4 Address Neighbor(s) pe1 Loopback 10.0.0.1/32 Ethernet2 10.1.0.6/30 core pe2 Loopback 10.0.0.2/32 Ethernet1 10.1.0.10/30 core core Loopback 10.0.0.3/32 Ethernet1 10.1.0.5/30 pe1 Ethernet2 10.1.0.9/30 pe2 netlab automatically configures IP addresses, OSPF, and BGP on your devices; if you\u2019re using other lab infrastructure, you\u2019ll have to configure them manually.","title":"Existing Routing Protocol Configuration"},{"location":"challenge/40-mpls-core/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to challenge/40-mpls-core Execute netlab up ( other options ) Log into your devices with netlab connect and verify that the IP addresses, OSPF routing, and the BGP sessions are properly configured.","title":"Start the Lab"},{"location":"challenge/40-mpls-core/#the-problem","text":"After the OSPF adjacencies in the transit autonomous system are established, E1 receives the BGP prefix advertised by E2 (and vice versa): e1# show ip bgp BGP table version is 4, local router ID is 192.168.101.1, vrf id 0 Default local pref 100, local AS 65101 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 192.168.101.0/24 0.0.0.0(e1) 0 32768 i *> 192.168.102.0/24 10.1.0.2 0 65000 65102 i Displayed 4 routes and 4 total paths However, you can\u2019t ping E2 from the loopback address of E1: e1(bash)#ping -I 192.168.101.1 192.168.102.1 PING 192.168.102.1 (192.168.102.1) from 192.168.101.1: 56 data bytes ^C --- 192.168.102.1 ping statistics --- 8 packets transmitted, 0 packets received, 100% packet loss A traceroute executed on E1 indicates that the probe packets arrive at PE1 and then get dropped by the CORE router. You shouldn\u2019t be surprised by that behavior; the CORE router is not running BGP and has no route to E1 or E2. e1(bash)#traceroute -s 192.168.101.1 192.168.102.1 traceroute to 192.168.102.1 (192.168.102.1) from 192.168.101.1, 30 hops max, 46 byte packets 1 10.1.0.2 (10.1.0.2) 0.002 ms 0.002 ms 0.001 ms 2 * * * Tip You must execute ping and traceroute between loopback IP addresses of E1 and E2. The syntax of extended ping and traceroute commands differs across network devices; on Linux, use ping -I $locip $remoteip and traceroute -s $locip $remoteip .","title":"The Problem"},{"location":"challenge/40-mpls-core/#configuration-hint","text":"You must configure MPLS transport across AS 65000 to hide transit traffic into an MPLS LSP. To do this, you can use the Label Distribution Protocol or MPLS-based Segment Routing (SR/MPLS) using OSPF. Warning If you\u2019re using FRRouting containers, execute sudo modprobe mpls-router mpls-iptunnel before starting the lab. You must use sysctl commands to enable MPLS on FRRouting interfaces (see FRRouting OSPF Segment Routing documentation for more details).","title":"Configuration Hint"},{"location":"challenge/40-mpls-core/#verification","text":"After setting up MPLS transport across AS 65000, you should see MPLS labels attached to BGP routes on PE1 and PE2 (printout from Arista vEOS): pe1#show ip route bgp ... B E 192.168.101.0/24 [200/0] via 10.1.0.1, Ethernet1 B I 192.168.102.0/24 [200/0] via 10.0.0.2/32, LDP tunnel index 2 via 10.1.0.5, Ethernet2, label 100001 ping and traceroute between E1 and E2 should work. Depending on how you configured the CORE device, you might not see it in the traceroute printout: vagrant@e1:mgmt:~$ ping 192.168.102.1 -I 192.168.101.1 vrf-wrapper.sh: switching to vrf \"default\"; use '--no-vrf-switch' to disable PING 192.168.102.1 (192.168.102.1) from 192.168.101.1 : 56(84) bytes of data. 64 bytes from 192.168.102.1: icmp_seq=1 ttl=61 time=11.9 ms 64 bytes from 192.168.102.1: icmp_seq=2 ttl=61 time=9.78 ms 64 bytes from 192.168.102.1: icmp_seq=3 ttl=61 time=9.47 ms 64 bytes from 192.168.102.1: icmp_seq=4 ttl=61 time=11.2 ms 64 bytes from 192.168.102.1: icmp_seq=5 ttl=61 time=10.3 ms ^C --- 192.168.102.1 ping statistics --- 5 packets transmitted, 5 received, 0% packet loss, time 11ms rtt min/avg/max/mdev = 9.470/10.557/11.949/0.930 ms vagrant@e1:mgmt:~$ traceroute 192.168.102.1 -s 192.168.101.1 vrf-wrapper.sh: switching to vrf \"default\"; use '--no-vrf-switch' to disable traceroute to 192.168.102.1 (192.168.102.1), 30 hops max, 60 byte packets 1 10.1.0.2 (10.1.0.2) 2.066 ms 2.227 ms 2.810 ms 2 * * * 3 10.1.0.10 (10.1.0.10) 13.077 ms 14.636 ms 16.515 ms 4 10.1.0.13 (192.168.102.1) 18.186 ms 20.036 ms 22.695 ms","title":"Verification"},{"location":"challenge/40-mpls-core/#reference-information","text":"","title":"Reference Information"},{"location":"challenge/40-mpls-core/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port e1 swp1 pe1 Ethernet1 pe1 Ethernet2 core Ethernet1 core Ethernet2 pe2 Ethernet1 pe2 Ethernet2 e2 swp1","title":"Lab Wiring"},{"location":"challenge/40-mpls-core/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description core 10.0.0.3/32 Loopback Ethernet1 10.1.0.5/30 core -> pe1 Ethernet2 10.1.0.9/30 core -> pe2 e1 192.168.101.1/24 Loopback swp1 10.1.0.1/30 e1 -> pe1 e2 192.168.102.1/24 Loopback swp1 10.1.0.13/30 e2 -> pe2 pe1 10.0.0.1/32 Loopback Ethernet1 10.1.0.2/30 pe1 -> e1 Ethernet2 10.1.0.6/30 pe1 -> core pe2 10.0.0.2/32 Loopback Ethernet1 10.1.0.10/30 pe2 -> core Ethernet2 10.1.0.14/30 pe2 -> e2 Loopbacks of PE1 and PE2 won\u2019t be advertised to adjacent autonomous systems if you\u2019re running a recent version of FRRouting ( more details ). \u21a9","title":"Lab Addressing"},{"location":"external/","text":"Manual Setup You don\u2019t have to use netlab to create your labs; you can build them with any other tool, or use physical devices or a mix of physical- and virtual devices. Lab Topologies Lab instructions contain wiring tables that you can use to set up your infrastructure, and I tried to use the same setup for as many labs as possible to reduce your hassle. For the moment, all exercises use the 4-router lab. External BGP Routers The labs rely on preconfigured external BGP routers using Cumulus Linux. They are automatically configured by netlab ; if you decide to use some other infrastructure you\u2019ll have to configure them yourself. Lab directories in the GitHub repository contain config subdirectory with /etc/frr/frr.conf and /etc/network/interfaces files. I would use git clone to clone the GitHub repository to the local disk; GitHub also offers ZIP download. If you prefer point-and-click approach feel free to download individual files from the GitHub web UI. Finally, you could use curl on Cumulus Linux to pull them into the devices straight from GitHub. Whatever you decide to do, in the end you have to get the configuration files to individual Cumulus Linux devices, reconfigure interfaces with ifreload -a , and restart FRR. Initial Device Configurations When using netlab , you\u2019ll get IP addressing configured on your devices. Most labs (apart from the configure BGP sessions ones) also configure basic BGP setup on your devices. Without netlab you\u2019ll have to start from scratch; the information you need is in the lab instructions but it might become tedious. Long story short: Use netlab \ud83d\ude09","title":"Manual Setup"},{"location":"external/#manual-setup","text":"You don\u2019t have to use netlab to create your labs; you can build them with any other tool, or use physical devices or a mix of physical- and virtual devices.","title":"Manual Setup"},{"location":"external/#lab-topologies","text":"Lab instructions contain wiring tables that you can use to set up your infrastructure, and I tried to use the same setup for as many labs as possible to reduce your hassle. For the moment, all exercises use the 4-router lab.","title":"Lab Topologies"},{"location":"external/#external-bgp-routers","text":"The labs rely on preconfigured external BGP routers using Cumulus Linux. They are automatically configured by netlab ; if you decide to use some other infrastructure you\u2019ll have to configure them yourself. Lab directories in the GitHub repository contain config subdirectory with /etc/frr/frr.conf and /etc/network/interfaces files. I would use git clone to clone the GitHub repository to the local disk; GitHub also offers ZIP download. If you prefer point-and-click approach feel free to download individual files from the GitHub web UI. Finally, you could use curl on Cumulus Linux to pull them into the devices straight from GitHub. Whatever you decide to do, in the end you have to get the configuration files to individual Cumulus Linux devices, reconfigure interfaces with ifreload -a , and restart FRR.","title":"External BGP Routers"},{"location":"external/#initial-device-configurations","text":"When using netlab , you\u2019ll get IP addressing configured on your devices. Most labs (apart from the configure BGP sessions ones) also configure basic BGP setup on your devices. Without netlab you\u2019ll have to start from scratch; the information you need is in the lab instructions but it might become tedious. Long story short: Use netlab \ud83d\ude09","title":"Initial Device Configurations"},{"location":"external/4-router/","text":"Small (4-Router) Lab Topology The exercises that have one or two configurable devices use the following 4-router lab topology: C1 and C2 are the lab devices you\u2019ll configure in the hands-on labs. C1 is usually named rtr ; when a lab uses both routers they\u2019re usually named r1 and r2 . X1 and X2 are external BGP routers. The individual labs assume you\u2019re using Cumulus Linux 4.x as external BGP routers (FRR running on a Ubuntu VM/container would work as well) and provide initial interface- and FRR configurations for them as well as extra configuration needed in your lab. You can use any device you want for the external BGP routers, but you\u2019ll have to create your own initial configuration files (if you\u2019re not using netlab ) and extra device configuration templates. Should you decide to go down this route, we\u2019d appreciate if you\u2019d submit your changes as a pull request. Lab Wiring Creating a full mesh of links between four devices is not hard, but please do retain the interface sequence if you plan to use netlab to configure the devices. Link Name Origin Device Origin Port Destination Device Destination Port C1-to-X1 c1 Ethernet1 x1 swp1 C1-to-X2 c1 Ethernet2 x2 swp1 X1-to-X2 x1 swp2 x2 swp2 C2-to-X1 c2 Ethernet1 x1 swp3 C2-to-X2 c2 Ethernet2 x2 swp3 C1-C2 LAN c1 Ethernet3 c2 Ethernet3 IP Addressing The initial device configurations supplied with individual labs assume you\u2019re using the following IP addressing on the lab links: Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 C1-to-X1 Ethernet2 10.1.0.5/30 C1-to-X2 Ethernet3 172.16.0.1/24 C1-C2 LAN c2 10.0.0.2/32 Loopback Ethernet1 10.1.0.13/30 C2-to-X1 Ethernet2 10.1.0.17/30 C2-to-X2 Ethernet3 172.16.0.2/24 C1-C2 LAN x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 C1-to-X1 swp2 10.1.0.9/30 X1-to-X2 swp3 10.1.0.14/30 C2-to-X1 x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 C1-to-X2 swp2 10.1.0.10/30 X1-to-X2 swp3 10.1.0.18/30 C2-to-X2","title":"Small (4-Router) Lab Topology"},{"location":"external/4-router/#small-4-router-lab-topology","text":"The exercises that have one or two configurable devices use the following 4-router lab topology: C1 and C2 are the lab devices you\u2019ll configure in the hands-on labs. C1 is usually named rtr ; when a lab uses both routers they\u2019re usually named r1 and r2 . X1 and X2 are external BGP routers. The individual labs assume you\u2019re using Cumulus Linux 4.x as external BGP routers (FRR running on a Ubuntu VM/container would work as well) and provide initial interface- and FRR configurations for them as well as extra configuration needed in your lab. You can use any device you want for the external BGP routers, but you\u2019ll have to create your own initial configuration files (if you\u2019re not using netlab ) and extra device configuration templates. Should you decide to go down this route, we\u2019d appreciate if you\u2019d submit your changes as a pull request.","title":"Small (4-Router) Lab Topology"},{"location":"external/4-router/#lab-wiring","text":"Creating a full mesh of links between four devices is not hard, but please do retain the interface sequence if you plan to use netlab to configure the devices. Link Name Origin Device Origin Port Destination Device Destination Port C1-to-X1 c1 Ethernet1 x1 swp1 C1-to-X2 c1 Ethernet2 x2 swp1 X1-to-X2 x1 swp2 x2 swp2 C2-to-X1 c2 Ethernet1 x1 swp3 C2-to-X2 c2 Ethernet2 x2 swp3 C1-C2 LAN c1 Ethernet3 c2 Ethernet3","title":"Lab Wiring"},{"location":"external/4-router/#ip-addressing","text":"The initial device configurations supplied with individual labs assume you\u2019re using the following IP addressing on the lab links: Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 C1-to-X1 Ethernet2 10.1.0.5/30 C1-to-X2 Ethernet3 172.16.0.1/24 C1-C2 LAN c2 10.0.0.2/32 Loopback Ethernet1 10.1.0.13/30 C2-to-X1 Ethernet2 10.1.0.17/30 C2-to-X2 Ethernet3 172.16.0.2/24 C1-C2 LAN x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 C1-to-X1 swp2 10.1.0.9/30 X1-to-X2 swp3 10.1.0.14/30 C2-to-X1 x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 C1-to-X2 swp2 10.1.0.10/30 X1-to-X2 swp3 10.1.0.18/30 C2-to-X2","title":"IP Addressing"},{"location":"ibgp/1-edge/","text":"Establish an IBGP Session Between WAN Edge Routers The Setting Up BGP lab exercises covered the simplest possible scenario: your site has a single WAN edge router running BGP with one or more upstream Internet Service Providers (ISPs). That scenario is implausible \u2013 an organization investing in its own IP address space and AS number usually does that to achieve higher resilience of its Internet connectivity, and having a single WAN edge router is not good enough for that. In this lab exercise, you\u2019ll build a more realistic solution: your organization uses two WAN edge routers running BGP with two upstream ISPs. Most organizations want to optimize the utilization of their (still relatively expensive) WAN links. To do so, you\u2019ll have to ensure that all your routers reach the destinations in ISP-1 via the R1-X1 uplink (and similarly for ISP-2). Existing Lab Configuration When starting the lab with netlab , you\u2019ll get a preconfigured lab with EBGP sessions between the three autonomous systems and OSPF running between R1 and R2. BGP Configuration The routers in your lab use the following BGP AS numbers. Each upstream router advertises an IPv4 prefix; your routers advertise the IPv4 prefix of the LAN subnet connecting them. Node/ASN Router ID Advertised prefixes AS65000 r1 10.0.0.1 10.0.100.0/24 r2 10.0.0.2 10.0.100.0/24 AS65100 x1 192.168.100.1 192.168.100.0/24 AS65101 x2 172.16.101.1 172.16.101.0/24 netlab configures these EBGP sessions when starting the lab; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Node Neighbor Neighbor AS Neighbor IPv4 r1 x1 65100 10.1.0.2 r2 x2 65101 10.1.0.10 x1 r1 65000 10.1.0.1 x2 65101 10.1.0.6 x2 x1 65100 10.1.0.5 r2 65000 10.1.0.9 OSPF Configuration OSPF running in the backbone area is configured on the following routers: Router Interface IPv4 Address Neighbor(s) r1 Loopback 10.0.0.1/32 Ethernet3 10.0.100.1/24 r2 r2 Loopback 10.0.0.2/32 Ethernet3 10.0.100.2/24 r1 Start the Lab Assuming you already set up your lab infrastructure : Change directory to ibgp/1-edge Execute netlab up ( device requirements , other options ) Log into your devices (R1, R2) with netlab connect and verify that netlab correctly configured their IP addresses, OSPF routing, and EBGP sessions. Warning If you\u2019re not using netlab , you must configure R1 and R2 yourself. Why Do We Need IBGP? Inspect the BGP tables on R1 and R2. They contain the routes received from upstream ISPs but not those received by the other WAN router \u2013 R1 cannot use the R2-X2 uplink to reach ISP-2 (and vice versa for R2). The following printouts contain BGP tables on R1 and R2 (Arista vEOS generated all printouts in this lab exercise): BGP table on R1 r1>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.100.0/24 - - - - 0 i * > 172.16.101.0/24 10.1.0.2 0 - 100 0 65100 65101 i * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i BGP table on R2 r2>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.100.0/24 - - - - 0 i * > 172.16.101.0/24 10.1.0.10 0 - 100 0 65101 i * > 192.168.100.0/24 10.1.0.10 0 - 100 0 65101 65100 i The content of the BGP tables on R1 and R2 shouldn\u2019t surprise you; R1 and R2 are exchanging internal routes (using OSPF) but not external routes. We could \u201csolve\u201d the challenge by redistributing external routes into OSPF (hint: don\u2019t do that ), but then we\u2019d lose the BGP information like the AS path the routers need to compare the routes. The only sensible way forward is establishing a BGP session between R1 and R2. Because that session is set up between two routers in the same autonomous system, we call it an internal BGP (IBGP) session. Establish IBGP Session Configuration tasks: Configure an IBGP session between the loopback interfaces of R1 and R2 (10.0.0.1 and 10.0.0.2) using a BGP configuration command similar to neighbor address remote-as 65000 . Tip You\u2019ll find more details in the Configure a Single EBGP Session lab exercise. On some devices, you\u2019ll have to activate the IBGP session within the IPv4 address family Verification: Check the status of the IBGP session with a command similar to show ip bgp summary or show ip bgp neighbors The following printout contains the BGP summary information on R1 after configuring the IBGP session. As you can see, the router tries to establish the IBGP session but fails. EBGP and IBGP neighbors on R1 (IBGP is not working) r1#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc r2 10.0.0.2 4 65000 0 0 0 0 00:06:03 Active x1 10.1.0.2 4 65100 2616 3068 0 0 02:10:34 Estab 2 2 Fix the Source IP Address of the IBGP Session BGP uses TCP as the transport protocol, and without further configuration, the TCP session\u2019s source IP address becomes the outgoing interface\u2019s IP address. Attempts to establish an IBGP session using the source IP address of the LAN interface are rejected by the IBGP neighbor as the source IP address in the TCP SYN packet does not match the neighbor IP address configured on the remote router. Configuration task: Configure the source address of the IBGP TCP session with a BGP configuration command similar to neighbor update-source . Note You could also configure the IBGP session between LAN IP addresses to make the lab work but never do that in a real-life network. You want the IBGP sessions to be stable, and the best way to achieve that goal is to use loopbacks as the endpoints of the TCP sessions (and rely on IGP to figure out how to reach remote loopbacks). Verification: After configuring the source IP address of the IBGP session on R1 and R2, the routers should be able to establish the IBGP session, as illustrated by the following printout: EBGP and IBGP neighbors on R1 (after fixing the BGP source interface) r1#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc r2 10.0.0.2 4 65000 8 8 0 0 00:00:07 Estab 2 2 x1 10.1.0.2 4 65100 2795 3276 0 0 02:19:28 Estab 2 2 After the IBGP session has been established, R1 and R2 exchange BGP prefixes received from X1 and X2, but the prefixes advertised by R2 are not selected as the best routes by R1 (and vice versa): BGP table on R1 with a working IBGP session r1#show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.100.0/24 - - - - 0 i * 10.0.100.0/24 10.0.0.2 0 - 100 0 i * > 172.16.101.0/24 10.1.0.2 0 - 100 0 65100 65101 i 172.16.101.0/24 10.1.0.10 0 - 100 0 65101 i * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i 192.168.100.0/24 10.1.0.10 0 - 100 0 65101 65100 i Further investigation shows that the IBGP prefixes are not used because they are considered invalid . A BGP prefix advertised by EBGP and IBGP neighbors r1#show ip bgp 172.16.101.0 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 172.16.101.0/24 Paths: 2 available 65100 65101 10.1.0.2 from 10.1.0.2 (192.168.100.1) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 0, tag 0 Received 00:07:37 ago, valid, external, best Rx SAFI: Unicast 65101 10.1.0.10 from 10.0.0.2 (10.0.0.2) Origin IGP, metric 0, localpref 100, IGP metric -, weight 0, tag 0 Received 00:05:29 ago, invalid, internal Rx SAFI: Unicast Arista EOS is not helpful in this scenario; you have to guess that the underlying root cause is that the BGP next hop is unreachable 1 . Fix the BGP Next Hop of IBGP Prefixes BGP routers do not change the BGP next hop of EBGP routes when advertising them over IBGP \u2013 the BGP next hop of routes in AS 65101 as advertised by R2 to R1 is thus the IP address of X2 on the R2-X1 link ( more details ). R1 does not have a route to that IP subnet in its IP routing table, so it considers the IBGP prefix using that BGP next hop invalid. There are two approaches to make the BGP next hop of IBGP prefixes valid: You can include the external subnets in the IGP process (for example, making them part of the OSPF area). Warning When using this approach, you must make the external subnets passive \u2013 you don\u2019t want to run IGP routing with another autonomous system. You can change the BGP next hop of the prefixes advertised over IBGP to the IP address of the advertising router. We\u2019ll use this approach. Configuration task: Change the BGP next hop of prefixes advertised over IBGP sessions with a BGP configuration command similar to neighbor next-hop-self . Verification: Inspect the BGP tables and IP routing tables on R1 and R2 and verify that: R1 and R2 use BGP prefixes with the shortest AS path as the best BGP routes BGP-derived IP prefixes in the IP routing tables point to the WAN uplinks or the LAN link between R1 and R2. You should get printouts similar to the ones generated by Arista EOS on R1: BGP table on R1 with fixed BGP next hops r1#show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.100.0/24 - - - - 0 i * 10.0.100.0/24 10.0.0.2 0 - 100 0 i * > 172.16.101.0/24 10.0.0.2 0 - 100 0 65101 i * 172.16.101.0/24 10.1.0.2 0 - 100 0 65100 65101 i * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i A BGP prefix advertised over IBGP has the correct BGP next hop r1#show ip bgp 172.16.101.0 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 172.16.101.0/24 Paths: 2 available 65101 10.0.0.2 from 10.0.0.2 (10.0.0.2) Origin IGP, metric 0, localpref 100, IGP metric 20, weight 0, tag 0 Received 00:00:29 ago, valid, internal, best Rx SAFI: Unicast 65100 65101 10.1.0.2 from 10.1.0.2 (192.168.100.1) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 0, tag 0 Received 00:51:03 ago, valid, external Rx SAFI: Unicast The final IP routing table on R1 r1#show ip route | begin Gateway Gateway of last resort is not set C 10.0.0.1/32 is directly connected, Loopback0 O 10.0.0.2/32 [110/20] via 10.0.100.2, Ethernet3 C 10.0.100.0/24 is directly connected, Ethernet3 C 10.1.0.0/30 is directly connected, Ethernet1 B I 172.16.101.0/24 [200/0] via 10.0.100.2, Ethernet3 B E 192.168.100.0/24 [200/0] via 10.1.0.2, Ethernet1 Next: Build a Transit Network with IBGP Automated Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on R1 and R2. The validation tests check whether R1 and R2 propagate the X1/X2 prefixes over the IBGP session and whether they change the BGP next hop to their loopback IPv4 addresses. This is the printout you should get after completing the lab exercise: Reference Information This lab uses the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Customer routers: use any device supported by the netlab BGP and OSPF configuration modules . Provider routers: use any device supported by the netlab BGP configuration module . You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on R1 and R2. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains provider routers\u2019 initial device configurations for Cumulus Linux. Lab Wiring Link Name Origin Device Origin Port Destination Device Destination Port WAN uplink R1-to-X1 r1 Ethernet1 x1 swp1 WAN uplink R2-to-X2 r2 Ethernet2 x2 swp3 Inter-ISP link X1-to-X2 x1 swp2 x2 swp2 Intra-site LAN C1-C2 r1 Ethernet3 r2 Ethernet3 Note : Some interfaces are not used to conform with the predefined 4-router lab topology. Lab Addressing Node/Interface IPv4 Address IPv6 Address Description r1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 WAN uplink R1-to-X1 Ethernet2 Ethernet3 10.0.100.1/24 Intra-site LAN C1-C2 r2 10.0.0.2/32 Loopback Ethernet1 Ethernet2 10.1.0.9/30 WAN uplink R2-to-X2 Ethernet3 10.0.100.2/24 Intra-site LAN C1-C2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 WAN uplink R1-to-X1 swp2 10.1.0.5/30 Inter-ISP link X1-to-X2 swp3 x2 172.16.101.1/24 Loopback swp1 swp2 10.1.0.6/30 Inter-ISP link X1-to-X2 swp3 10.1.0.10/30 WAN uplink R2-to-X2 Note : Some interfaces are not configured with IP addresses to conform with the predefined 4-router lab topology. Some network devices consider any BGP next hop reachable if they have a default route. That can happen in a virtual lab if the lab device does not use a management VRF \u2013 most lab environments use DHCP to add the default route pointing to the management interface. When that default route appears in the global IP routing table, the IBGP prefix could be considered valid, but the resulting route would point to the management interface. \u21a9","title":"Establish an IBGP Session"},{"location":"ibgp/1-edge/#establish-an-ibgp-session-between-wan-edge-routers","text":"The Setting Up BGP lab exercises covered the simplest possible scenario: your site has a single WAN edge router running BGP with one or more upstream Internet Service Providers (ISPs). That scenario is implausible \u2013 an organization investing in its own IP address space and AS number usually does that to achieve higher resilience of its Internet connectivity, and having a single WAN edge router is not good enough for that. In this lab exercise, you\u2019ll build a more realistic solution: your organization uses two WAN edge routers running BGP with two upstream ISPs. Most organizations want to optimize the utilization of their (still relatively expensive) WAN links. To do so, you\u2019ll have to ensure that all your routers reach the destinations in ISP-1 via the R1-X1 uplink (and similarly for ISP-2).","title":"Establish an IBGP Session Between WAN Edge Routers"},{"location":"ibgp/1-edge/#existing-lab-configuration","text":"When starting the lab with netlab , you\u2019ll get a preconfigured lab with EBGP sessions between the three autonomous systems and OSPF running between R1 and R2.","title":"Existing Lab Configuration"},{"location":"ibgp/1-edge/#bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. Each upstream router advertises an IPv4 prefix; your routers advertise the IPv4 prefix of the LAN subnet connecting them. Node/ASN Router ID Advertised prefixes AS65000 r1 10.0.0.1 10.0.100.0/24 r2 10.0.0.2 10.0.100.0/24 AS65100 x1 192.168.100.1 192.168.100.0/24 AS65101 x2 172.16.101.1 172.16.101.0/24 netlab configures these EBGP sessions when starting the lab; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Node Neighbor Neighbor AS Neighbor IPv4 r1 x1 65100 10.1.0.2 r2 x2 65101 10.1.0.10 x1 r1 65000 10.1.0.1 x2 65101 10.1.0.6 x2 x1 65100 10.1.0.5 r2 65000 10.1.0.9","title":"BGP Configuration"},{"location":"ibgp/1-edge/#ospf-configuration","text":"OSPF running in the backbone area is configured on the following routers: Router Interface IPv4 Address Neighbor(s) r1 Loopback 10.0.0.1/32 Ethernet3 10.0.100.1/24 r2 r2 Loopback 10.0.0.2/32 Ethernet3 10.0.100.2/24 r1","title":"OSPF Configuration"},{"location":"ibgp/1-edge/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to ibgp/1-edge Execute netlab up ( device requirements , other options ) Log into your devices (R1, R2) with netlab connect and verify that netlab correctly configured their IP addresses, OSPF routing, and EBGP sessions. Warning If you\u2019re not using netlab , you must configure R1 and R2 yourself.","title":"Start the Lab"},{"location":"ibgp/1-edge/#why-do-we-need-ibgp","text":"Inspect the BGP tables on R1 and R2. They contain the routes received from upstream ISPs but not those received by the other WAN router \u2013 R1 cannot use the R2-X2 uplink to reach ISP-2 (and vice versa for R2). The following printouts contain BGP tables on R1 and R2 (Arista vEOS generated all printouts in this lab exercise): BGP table on R1 r1>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.100.0/24 - - - - 0 i * > 172.16.101.0/24 10.1.0.2 0 - 100 0 65100 65101 i * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i BGP table on R2 r2>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.100.0/24 - - - - 0 i * > 172.16.101.0/24 10.1.0.10 0 - 100 0 65101 i * > 192.168.100.0/24 10.1.0.10 0 - 100 0 65101 65100 i The content of the BGP tables on R1 and R2 shouldn\u2019t surprise you; R1 and R2 are exchanging internal routes (using OSPF) but not external routes. We could \u201csolve\u201d the challenge by redistributing external routes into OSPF (hint: don\u2019t do that ), but then we\u2019d lose the BGP information like the AS path the routers need to compare the routes. The only sensible way forward is establishing a BGP session between R1 and R2. Because that session is set up between two routers in the same autonomous system, we call it an internal BGP (IBGP) session.","title":"Why Do We Need IBGP?"},{"location":"ibgp/1-edge/#establish-ibgp-session","text":"Configuration tasks: Configure an IBGP session between the loopback interfaces of R1 and R2 (10.0.0.1 and 10.0.0.2) using a BGP configuration command similar to neighbor address remote-as 65000 . Tip You\u2019ll find more details in the Configure a Single EBGP Session lab exercise. On some devices, you\u2019ll have to activate the IBGP session within the IPv4 address family Verification: Check the status of the IBGP session with a command similar to show ip bgp summary or show ip bgp neighbors The following printout contains the BGP summary information on R1 after configuring the IBGP session. As you can see, the router tries to establish the IBGP session but fails. EBGP and IBGP neighbors on R1 (IBGP is not working) r1#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc r2 10.0.0.2 4 65000 0 0 0 0 00:06:03 Active x1 10.1.0.2 4 65100 2616 3068 0 0 02:10:34 Estab 2 2","title":"Establish IBGP Session"},{"location":"ibgp/1-edge/#fix-the-source-ip-address-of-the-ibgp-session","text":"BGP uses TCP as the transport protocol, and without further configuration, the TCP session\u2019s source IP address becomes the outgoing interface\u2019s IP address. Attempts to establish an IBGP session using the source IP address of the LAN interface are rejected by the IBGP neighbor as the source IP address in the TCP SYN packet does not match the neighbor IP address configured on the remote router. Configuration task: Configure the source address of the IBGP TCP session with a BGP configuration command similar to neighbor update-source . Note You could also configure the IBGP session between LAN IP addresses to make the lab work but never do that in a real-life network. You want the IBGP sessions to be stable, and the best way to achieve that goal is to use loopbacks as the endpoints of the TCP sessions (and rely on IGP to figure out how to reach remote loopbacks). Verification: After configuring the source IP address of the IBGP session on R1 and R2, the routers should be able to establish the IBGP session, as illustrated by the following printout: EBGP and IBGP neighbors on R1 (after fixing the BGP source interface) r1#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc r2 10.0.0.2 4 65000 8 8 0 0 00:00:07 Estab 2 2 x1 10.1.0.2 4 65100 2795 3276 0 0 02:19:28 Estab 2 2 After the IBGP session has been established, R1 and R2 exchange BGP prefixes received from X1 and X2, but the prefixes advertised by R2 are not selected as the best routes by R1 (and vice versa): BGP table on R1 with a working IBGP session r1#show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.100.0/24 - - - - 0 i * 10.0.100.0/24 10.0.0.2 0 - 100 0 i * > 172.16.101.0/24 10.1.0.2 0 - 100 0 65100 65101 i 172.16.101.0/24 10.1.0.10 0 - 100 0 65101 i * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i 192.168.100.0/24 10.1.0.10 0 - 100 0 65101 65100 i Further investigation shows that the IBGP prefixes are not used because they are considered invalid . A BGP prefix advertised by EBGP and IBGP neighbors r1#show ip bgp 172.16.101.0 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 172.16.101.0/24 Paths: 2 available 65100 65101 10.1.0.2 from 10.1.0.2 (192.168.100.1) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 0, tag 0 Received 00:07:37 ago, valid, external, best Rx SAFI: Unicast 65101 10.1.0.10 from 10.0.0.2 (10.0.0.2) Origin IGP, metric 0, localpref 100, IGP metric -, weight 0, tag 0 Received 00:05:29 ago, invalid, internal Rx SAFI: Unicast Arista EOS is not helpful in this scenario; you have to guess that the underlying root cause is that the BGP next hop is unreachable 1 .","title":"Fix the Source IP Address of the IBGP Session"},{"location":"ibgp/1-edge/#fix-the-bgp-next-hop-of-ibgp-prefixes","text":"BGP routers do not change the BGP next hop of EBGP routes when advertising them over IBGP \u2013 the BGP next hop of routes in AS 65101 as advertised by R2 to R1 is thus the IP address of X2 on the R2-X1 link ( more details ). R1 does not have a route to that IP subnet in its IP routing table, so it considers the IBGP prefix using that BGP next hop invalid. There are two approaches to make the BGP next hop of IBGP prefixes valid: You can include the external subnets in the IGP process (for example, making them part of the OSPF area). Warning When using this approach, you must make the external subnets passive \u2013 you don\u2019t want to run IGP routing with another autonomous system. You can change the BGP next hop of the prefixes advertised over IBGP to the IP address of the advertising router. We\u2019ll use this approach. Configuration task: Change the BGP next hop of prefixes advertised over IBGP sessions with a BGP configuration command similar to neighbor next-hop-self . Verification: Inspect the BGP tables and IP routing tables on R1 and R2 and verify that: R1 and R2 use BGP prefixes with the shortest AS path as the best BGP routes BGP-derived IP prefixes in the IP routing tables point to the WAN uplinks or the LAN link between R1 and R2. You should get printouts similar to the ones generated by Arista EOS on R1: BGP table on R1 with fixed BGP next hops r1#show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.100.0/24 - - - - 0 i * 10.0.100.0/24 10.0.0.2 0 - 100 0 i * > 172.16.101.0/24 10.0.0.2 0 - 100 0 65101 i * 172.16.101.0/24 10.1.0.2 0 - 100 0 65100 65101 i * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i A BGP prefix advertised over IBGP has the correct BGP next hop r1#show ip bgp 172.16.101.0 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 172.16.101.0/24 Paths: 2 available 65101 10.0.0.2 from 10.0.0.2 (10.0.0.2) Origin IGP, metric 0, localpref 100, IGP metric 20, weight 0, tag 0 Received 00:00:29 ago, valid, internal, best Rx SAFI: Unicast 65100 65101 10.1.0.2 from 10.1.0.2 (192.168.100.1) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 0, tag 0 Received 00:51:03 ago, valid, external Rx SAFI: Unicast The final IP routing table on R1 r1#show ip route | begin Gateway Gateway of last resort is not set C 10.0.0.1/32 is directly connected, Loopback0 O 10.0.0.2/32 [110/20] via 10.0.100.2, Ethernet3 C 10.0.100.0/24 is directly connected, Ethernet3 C 10.1.0.0/30 is directly connected, Ethernet1 B I 172.16.101.0/24 [200/0] via 10.0.100.2, Ethernet3 B E 192.168.100.0/24 [200/0] via 10.1.0.2, Ethernet1 Next: Build a Transit Network with IBGP","title":"Fix the BGP Next Hop of IBGP Prefixes"},{"location":"ibgp/1-edge/#automated-verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on R1 and R2. The validation tests check whether R1 and R2 propagate the X1/X2 prefixes over the IBGP session and whether they change the BGP next hop to their loopback IPv4 addresses. This is the printout you should get after completing the lab exercise:","title":"Automated Verification"},{"location":"ibgp/1-edge/#reference-information","text":"This lab uses the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"ibgp/1-edge/#req","text":"Customer routers: use any device supported by the netlab BGP and OSPF configuration modules . Provider routers: use any device supported by the netlab BGP configuration module . You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on R1 and R2. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains provider routers\u2019 initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"ibgp/1-edge/#lab-wiring","text":"Link Name Origin Device Origin Port Destination Device Destination Port WAN uplink R1-to-X1 r1 Ethernet1 x1 swp1 WAN uplink R2-to-X2 r2 Ethernet2 x2 swp3 Inter-ISP link X1-to-X2 x1 swp2 x2 swp2 Intra-site LAN C1-C2 r1 Ethernet3 r2 Ethernet3 Note : Some interfaces are not used to conform with the predefined 4-router lab topology.","title":"Lab Wiring"},{"location":"ibgp/1-edge/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description r1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 WAN uplink R1-to-X1 Ethernet2 Ethernet3 10.0.100.1/24 Intra-site LAN C1-C2 r2 10.0.0.2/32 Loopback Ethernet1 Ethernet2 10.1.0.9/30 WAN uplink R2-to-X2 Ethernet3 10.0.100.2/24 Intra-site LAN C1-C2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 WAN uplink R1-to-X1 swp2 10.1.0.5/30 Inter-ISP link X1-to-X2 swp3 x2 172.16.101.1/24 Loopback swp1 swp2 10.1.0.6/30 Inter-ISP link X1-to-X2 swp3 10.1.0.10/30 WAN uplink R2-to-X2 Note : Some interfaces are not configured with IP addresses to conform with the predefined 4-router lab topology. Some network devices consider any BGP next hop reachable if they have a default route. That can happen in a virtual lab if the lab device does not use a management VRF \u2013 most lab environments use DHCP to add the default route pointing to the management interface. When that default route appears in the global IP routing table, the IBGP prefix could be considered valid, but the resulting route would point to the management interface. \u21a9","title":"Lab Addressing"},{"location":"ibgp/2-transit/","text":"Build a Transit Network with IBGP In the Establish an IBGP Session Between WAN Edge Routers lab exercise, you built a simple network with two adjacent BGP routers. In this exercise, you\u2019ll explore the impact of adding a core router between edge routers running BGP. After starting the lab, you\u2019ll have to configure all the IBGP sessions needed to establish connectivity between the prefixes advertised by the PE2 and EXT routers. You MUST NOT use route redistribution between OSPF and BGP to solve the connectivity issues (there\u2019s an excellent reason for that restriction). Existing Lab Configuration When starting the lab with netlab , you\u2019ll get a preconfigured lab: All routers will have their interfaces and IP addresses configured OSPF will be running between PE1, PE2, and CORE routers. BGP will be configured on PE1, PE2 and EXT routers. PE2 and EXT will advertise their assigned IP prefixes in BGP. There will be an EBGP session between PE1 and EXT routers. Warning The lab topology uses an unnumbered IPv4 link between PE2 and CORE routers. If your devices don\u2019t support unnumbered IPv4 links or cannot run OSPF over unnumbered IPv4 links that link will be changed to a regular IPv4 subnet, resulting in a slight change in IP routing tables and printouts. The following tables summarize the existing lab configuration. BGP Configuration The routers in your lab use the following BGP AS numbers. The external router advertises an IPv4 prefix; your PE routers advertise their loopback IPv4 addresses. Node/ASN Router ID Advertised prefixes AS65000 pe1 10.0.0.2 pe2 10.0.0.3 192.168.43.0/24 AS65100 ext 10.0.0.10 172.16.42.0/24 netlab also configures the EBGP session between PE1 and EXT routers. Node Neighbor Neighbor AS Neighbor IPv4 ext pe1 65000 10.1.0.6 pe1 ext 65100 10.1.0.5 OSPF Configuration OSPF backbone area is configured on the following routers in AS 65000: Router Interface IPv4 Address Neighbor(s) core Loopback 10.0.0.1/32 Ethernet1 10.1.0.1/30 pe1 Ethernet3 True pe2 pe1 Loopback 10.0.0.2/32 swp1 10.1.0.2/30 core pe2 Loopback 10.0.0.3/32 Ethernet3 True core Start the Lab Assuming you already set up your lab infrastructure : Change directory to ibgp/2-transit Execute netlab up ( device requirements , other options ) Log into your devices (R1, R2) with netlab connect and verify that netlab correctly configured their IP addresses, OSPF routing, and EBGP sessions. Warning This lab requires netlab release 1.7.0 or higher. If you\u2019re not using netlab , you must configure CORE and PE2 routers yourself. Configurations for PE1 and EXT routers are in the config subdirectory. Propagate External BGP Routes to PE2 Try to ping the external router ( 172.16.42.42 ) from PE2. You have to check the connectivity between the advertised IP prefixes, so you should use a version of the ping command that specifies the source interface or the source IP address. For example, you must use ping 172.16.42.42 source Ethernet2 on Arista EOS and ping 172.16.42.42 -I 192.168.43.2 on FRRouting or Cumulus Linux. Tip The extended ping command is often available only in privileged ( enable ) CLI mode. The ping command will most likely fail 1 . Cumulus Linux or FRRouting immediately gives up: Pinging Ext from PE2 (FRRouting) pe2(bash)#ping 172.16.42.42 -I 192.168.43.2 PING 172.16.42.42 (172.16.42.42) from 192.168.43.2: 56 data bytes ping: sendto: Network unreachable Arista EOS displays the root cause of the failure \u2013 the destination network is not in the IP routing table \u2013 but keeps retrying: Pinging Ext from PE2 (Arista EOS) pe2#ping 172.16.42.42 source Ethernet2 PING 172.16.42.42 (172.16.42.42) from 192.168.43.2 : 72(100) bytes of data. ping: sendmsg: Network is unreachable ping: sendmsg: Network is unreachable ping: sendmsg: Network is unreachable ping: sendmsg: Network is unreachable ping: sendmsg: Network is unreachable --- 172.16.42.42 ping statistics --- 5 packets transmitted, 0 received, 100% packet loss, time 40ms A quick look into PE2\u2019s routing- and BGP table confirms that PE2 knows nothing about the IPv4 prefix 172.16.42.0/24 . The routing table on PE2 pe2# show ip route Codes: K - kernel route, C - connected, L - local, S - static, R - RIP, O - OSPF, I - IS-IS, B - BGP, E - EIGRP, N - NHRP, T - Table, v - VNC, V - VNC-Direct, A - Babel, F - PBR, f - OpenFabric, t - Table-Direct, > - selected route, * - FIB route, q - queued, r - rejected, b - backup t - trapped, o - offload failure O>* 10.0.0.1/32 [110/10] via 10.0.0.1, eth3 onlink, weight 1, 00:01:35 O>* 10.0.0.2/32 [110/20] via 10.0.0.1, eth3 onlink, weight 1, 00:01:35 O 10.0.0.3/32 [110/0] is directly connected, lo, weight 1, 00:02:00 L * 10.0.0.3/32 is directly connected, eth3, 00:02:07 C * 10.0.0.3/32 is directly connected, eth3, 00:02:07 L * 10.0.0.3/32 is directly connected, lo, 00:02:07 C>* 10.0.0.3/32 is directly connected, lo, 00:02:07 O>* 10.1.0.0/30 [110/20] via 10.0.0.1, eth3 onlink, weight 1, 00:01:35 C>* 192.168.43.0/24 is directly connected, eth2, 00:02:07 L>* 192.168.43.2/32 is directly connected, eth2, 00:02:07 BGP table on PE2 pe2# show ip bgp BGP table version is 1, local router ID is 10.0.0.3, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *> 192.168.43.0/24 0.0.0.0(pe2) 0 32768 i Displayed 1 routes and 1 total paths The lack of BGP routes on PE2 shouldn\u2019t surprise you if you completed the Establish an IBGP Session Between WAN Edge Routers lab exercise \u2013 you already know you need an IBGP session between PE1 and PE2. Configuration task: Configure an IBGP session between the loopback interfaces of PE1 and PE2 2 . Tip The IBGP session is preconfigured on PE1 and should be established as soon as you configure it on PE2. Verification: Check the BGP neighbors and the BGP table on PE2. You should see an established IBGP session between PE1 and PE2 in the BGP summary printout and the BGP route for 172.16.42.0/24 in the BGP table. This is the printout you should get on FRRouting: BGP neighbors on PE2 pe2# show ip bgp sum IPv4 Unicast Summary: BGP router identifier 10.0.0.3, local AS number 65000 VRF default vrf-id 0 BGP table version 2 RIB entries 3, using 288 bytes of memory Peers 2, using 26 KiB of memory Neighbor V AS MsgRcvd MsgSent TblVer InQ OutQ Up/Down State/PfxRcd PfxSnt Desc pe1(10.0.0.2) 4 65000 7 7 2 0 0 00:00:11 1 1 FRRouting/10.0.1_git Total number of neighbors 1 BGP table on PE2 pe2# show ip bgp BGP table version is 2, local router ID is 10.0.0.3, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *>i172.16.42.0/24 10.0.0.2(pe1) 0 100 0 65100 i *> 192.168.43.0/24 0.0.0.0(pe2) 0 32768 i Displayed 2 routes and 2 total paths Retry the ping command. It should no longer complain that the network is unreachable but could generate another bit of information on devices that parse and display ICMP error reports (Linux does not). For example, Arista EOS reports that the CORE router (10.0.0.1) claims it cannot reach the destination: Pinging Ext from PE2 (Arista EOS) pe2#ping 172.16.42.42 PING 172.16.42.42 (172.16.42.42) : 72(100) bytes of data. From 10.0.0.1 icmp_seq=1 Destination Net Unreachable --- 172.16.42.42 ping statistics --- 5 packets transmitted, 0 received, +1 errors, 100% packet loss, time 30ms You can use traceroute on some other platforms (for example, Cumulus Linux or FRRouting) to get similar information: Traceroute from PE2 toward Ext (FRRouting) pe2(bash)#traceroute 172.16.42.42 traceroute to 172.16.42.42 (172.16.42.42), 30 hops max, 46 byte packets 1 core (10.0.0.1) 0.015 ms !N 0.010 ms !N * Fixing the Core Routing Log into the router complaining it cannot reach the destination (the CORE router) and check its IP routing table. The route for 172.16.42.0/24 is missing. The routing table on Core core# show ip route Codes: K - kernel route, C - connected, L - local, S - static, R - RIP, O - OSPF, I - IS-IS, B - BGP, E - EIGRP, N - NHRP, T - Table, v - VNC, V - VNC-Direct, A - Babel, F - PBR, f - OpenFabric, t - Table-Direct, > - selected route, * - FIB route, q - queued, r - rejected, b - backup t - trapped, o - offload failure O 10.0.0.1/32 [110/0] is directly connected, lo, weight 1, 00:08:05 L * 10.0.0.1/32 is directly connected, eth3, 00:08:12 C * 10.0.0.1/32 is directly connected, eth3, 00:08:12 L * 10.0.0.1/32 is directly connected, lo, 00:08:12 C>* 10.0.0.1/32 is directly connected, lo, 00:08:12 O>* 10.0.0.2/32 [110/10] via 10.1.0.2, eth1, weight 1, 00:07:40 O>* 10.0.0.3/32 [110/10] via 10.0.0.3, eth3 onlink, weight 1, 00:07:40 O 10.1.0.0/30 [110/10] is directly connected, eth1, weight 1, 00:08:05 C>* 10.1.0.0/30 is directly connected, eth1, 00:08:12 L>* 10.1.0.1/32 is directly connected, eth1, 00:08:12 That shouldn\u2019t be a big surprise; after all, the external prefix is advertised only in BGP, and the CORE router runs only OSPF. There are at least four ways to fix the routing in the core of your autonomous system: Redistribute EBGP information into OSPF. That\u2019s dangerous in real-life networks with large BGP tables , and thus, you are not allowed to do it in this lab exercise. Advertise an OSPF default route from PE1. That would solve your immediate problem but wouldn\u2019t result in an actual transit network \u2013 you would run into \u201cexciting\u201d challenges when trying to connect external networks to PE2. This option is thus also off the table. Hide the transit packets from the CORE router using MPLS or IP-over-something tunnels. While the MPLS approach is commonly used to build BGP-free core networks , it\u2019s too complex for this lab exercise 3 . Make the CORE router part of the BGP routing. This is the approach we\u2019ll use. Configuration tasks: Configure BGP with AS number 65000 on the CORE router Configure IBGP sessions between all BGP routers in AS 65000. Tip Due to the IBGP loop avoidance mechanism (never advertise IBGP routes to other IBGP neighbors), you must configure a full mesh of IBGP sessions, adding PE1-CORE and PE2-CORE IBGP sessions. Your lab might work without the PE2-CORE IBGP session but would probably stop working when you connect an EBGP neighbor to PE2 4 . The IBGP session between PE1 and CORE routers is preconfigured on PE1 and should be established as soon as you configure it on the CORE router. You\u2019ll have to configure the PE2-CORE IBGP session on both ends. If you\u2019re working with FRR or Cumulus Linux, save the CORE router\u2019s current configuration before enabling the BGP daemon and restarting FRR. Verification: Check the BGP neighbors and the BGP table on the CORE router. The router should have two established IBGP sessions and three prefixes in its BGP table: BGP neighbors on Core core# show ip bgp sum IPv4 Unicast Summary: BGP router identifier 10.0.0.1, local AS number 65000 VRF default vrf-id 0 BGP table version 2 RIB entries 3, using 288 bytes of memory Peers 2, using 26 KiB of memory Neighbor V AS MsgRcvd MsgSent TblVer InQ OutQ Up/Down State/PfxRcd PfxSnt Desc pe1(10.0.0.2) 4 65000 5 4 2 0 0 00:00:03 1 0 FRRouting/10.0.1_git pe2(10.0.0.3) 4 65000 5 4 2 0 0 00:00:03 1 0 FRRouting/10.0.1_git Total number of neighbors 2 BGP table on Core core# show ip bgp BGP table version is 2, local router ID is 10.0.0.1, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *>i172.16.42.0/24 10.0.0.2(pe1) 0 100 0 65100 i *>i192.168.43.0/24 10.0.0.3(pe2) 0 100 0 i Displayed 2 routes and 2 total paths Retry the ping command on PE2. PE2 should be able to reach the EXT router: Ping from PE2 to Ext (FRRouting) pe2(bash)#ping 172.16.42.42 -I 192.168.43.2 PING 172.16.42.42 (172.16.42.42) from 192.168.43.2: 56 data bytes 64 bytes from 172.16.42.42: seq=0 ttl=62 time=0.689 ms 64 bytes from 172.16.42.42: seq=1 ttl=62 time=0.377 ms ^C --- 172.16.42.42 ping statistics --- 2 packets transmitted, 2 packets received, 0% packet loss round-trip min/avg/max = 0.377/0.533/0.689 ms Next: Use BGP Route Reflectors Automated Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on Ext and PE1. The validation tests check: Whether the PE2 prefix is propagated to Core, PE1, and Ext. Whether the Ext prefix is propagated to Core and PE2 Whether Ext can ping PE2 The netlab validate command skips checks that would be executed on Core and PE2 if they\u2019re not running one of the supported network operating systems. This is the printout you would get after establishing the PE1-PE2 IBGP session (the IBGP sessions with the Core router are not yet established): Reference Information This lab uses the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Use any device supported by the netlab BGP and OSPF configuration modules . You can do limited automated lab validation with Arista EOS, Cumulus Linux, or FRR running on Ext and PE1. You must run one of these network operating systems on all devices for a complete validation. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains initial device configurations for Cumulus Linux. Lab Wiring This lab uses the 4-router lab topology with the following mapping between the routers in the 4-router lab topology and this lab: 4-router-topology device Lab device C1 Core C2 PE2 X1 PE1 X2 EXT Link Name Origin Device Origin Port Destination Device Destination Port core eth1 pe1 eth1 Unused link core eth2 ext eth1 Inter-AS link pe1 eth2 ext eth2 Unused link pe2 eth1 pe1 eth3 PE2 stub interface pe2 eth2 ext eth3 core eth3 pe2 eth3 Note : Some interfaces are not used to conform with the predefined 4-router lab topology. Lab Addressing Node/Interface IPv4 Address IPv6 Address Description core 10.0.0.1/32 Loopback eth1 10.1.0.1/30 core -> pe1 eth2 Unused link eth3 Unnumbered core -> pe2 ext 172.16.42.42/24 Loopback eth1 Unused link eth2 10.1.0.5/30 Inter-AS link eth3 PE2 stub interface pe1 10.0.0.2/32 Loopback eth1 10.1.0.2/30 pe1 -> core eth2 10.1.0.6/30 Inter-AS link eth3 Unused link pe2 10.0.0.3/32 Loopback eth1 Unused link eth2 192.168.43.2/24 PE2 stub interface eth3 Unnumbered pe2 -> core Note : Some interfaces are not configured with IP addresses to conform with the predefined 4-router lab topology. If it doesn\u2019t, you have a more interesting problem to troubleshoot \u2013 why does it work? \u21a9 Remember to activate the IBGP session within the IPv4 address family (AF) if your device requires per-AF neighbor activation. \u21a9 \u2026 but as you have a running lab that\u2019s easy to restart, please feel free to try to get it to work. You get bonus points if you decide to use Segment Routing and a virtual 6-pack of Kool-Aid if you use SRv6 ;) \u21a9 Proving that is left as an exercise for the reader \u21a9","title":"Build a Transit Network with IBGP"},{"location":"ibgp/2-transit/#build-a-transit-network-with-ibgp","text":"In the Establish an IBGP Session Between WAN Edge Routers lab exercise, you built a simple network with two adjacent BGP routers. In this exercise, you\u2019ll explore the impact of adding a core router between edge routers running BGP. After starting the lab, you\u2019ll have to configure all the IBGP sessions needed to establish connectivity between the prefixes advertised by the PE2 and EXT routers. You MUST NOT use route redistribution between OSPF and BGP to solve the connectivity issues (there\u2019s an excellent reason for that restriction).","title":"Build a Transit Network with IBGP"},{"location":"ibgp/2-transit/#existing-lab-configuration","text":"When starting the lab with netlab , you\u2019ll get a preconfigured lab: All routers will have their interfaces and IP addresses configured OSPF will be running between PE1, PE2, and CORE routers. BGP will be configured on PE1, PE2 and EXT routers. PE2 and EXT will advertise their assigned IP prefixes in BGP. There will be an EBGP session between PE1 and EXT routers. Warning The lab topology uses an unnumbered IPv4 link between PE2 and CORE routers. If your devices don\u2019t support unnumbered IPv4 links or cannot run OSPF over unnumbered IPv4 links that link will be changed to a regular IPv4 subnet, resulting in a slight change in IP routing tables and printouts. The following tables summarize the existing lab configuration.","title":"Existing Lab Configuration"},{"location":"ibgp/2-transit/#bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. The external router advertises an IPv4 prefix; your PE routers advertise their loopback IPv4 addresses. Node/ASN Router ID Advertised prefixes AS65000 pe1 10.0.0.2 pe2 10.0.0.3 192.168.43.0/24 AS65100 ext 10.0.0.10 172.16.42.0/24 netlab also configures the EBGP session between PE1 and EXT routers. Node Neighbor Neighbor AS Neighbor IPv4 ext pe1 65000 10.1.0.6 pe1 ext 65100 10.1.0.5","title":"BGP Configuration"},{"location":"ibgp/2-transit/#ospf-configuration","text":"OSPF backbone area is configured on the following routers in AS 65000: Router Interface IPv4 Address Neighbor(s) core Loopback 10.0.0.1/32 Ethernet1 10.1.0.1/30 pe1 Ethernet3 True pe2 pe1 Loopback 10.0.0.2/32 swp1 10.1.0.2/30 core pe2 Loopback 10.0.0.3/32 Ethernet3 True core","title":"OSPF Configuration"},{"location":"ibgp/2-transit/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to ibgp/2-transit Execute netlab up ( device requirements , other options ) Log into your devices (R1, R2) with netlab connect and verify that netlab correctly configured their IP addresses, OSPF routing, and EBGP sessions. Warning This lab requires netlab release 1.7.0 or higher. If you\u2019re not using netlab , you must configure CORE and PE2 routers yourself. Configurations for PE1 and EXT routers are in the config subdirectory.","title":"Start the Lab"},{"location":"ibgp/2-transit/#propagate-external-bgp-routes-to-pe2","text":"Try to ping the external router ( 172.16.42.42 ) from PE2. You have to check the connectivity between the advertised IP prefixes, so you should use a version of the ping command that specifies the source interface or the source IP address. For example, you must use ping 172.16.42.42 source Ethernet2 on Arista EOS and ping 172.16.42.42 -I 192.168.43.2 on FRRouting or Cumulus Linux. Tip The extended ping command is often available only in privileged ( enable ) CLI mode. The ping command will most likely fail 1 . Cumulus Linux or FRRouting immediately gives up: Pinging Ext from PE2 (FRRouting) pe2(bash)#ping 172.16.42.42 -I 192.168.43.2 PING 172.16.42.42 (172.16.42.42) from 192.168.43.2: 56 data bytes ping: sendto: Network unreachable Arista EOS displays the root cause of the failure \u2013 the destination network is not in the IP routing table \u2013 but keeps retrying: Pinging Ext from PE2 (Arista EOS) pe2#ping 172.16.42.42 source Ethernet2 PING 172.16.42.42 (172.16.42.42) from 192.168.43.2 : 72(100) bytes of data. ping: sendmsg: Network is unreachable ping: sendmsg: Network is unreachable ping: sendmsg: Network is unreachable ping: sendmsg: Network is unreachable ping: sendmsg: Network is unreachable --- 172.16.42.42 ping statistics --- 5 packets transmitted, 0 received, 100% packet loss, time 40ms A quick look into PE2\u2019s routing- and BGP table confirms that PE2 knows nothing about the IPv4 prefix 172.16.42.0/24 . The routing table on PE2 pe2# show ip route Codes: K - kernel route, C - connected, L - local, S - static, R - RIP, O - OSPF, I - IS-IS, B - BGP, E - EIGRP, N - NHRP, T - Table, v - VNC, V - VNC-Direct, A - Babel, F - PBR, f - OpenFabric, t - Table-Direct, > - selected route, * - FIB route, q - queued, r - rejected, b - backup t - trapped, o - offload failure O>* 10.0.0.1/32 [110/10] via 10.0.0.1, eth3 onlink, weight 1, 00:01:35 O>* 10.0.0.2/32 [110/20] via 10.0.0.1, eth3 onlink, weight 1, 00:01:35 O 10.0.0.3/32 [110/0] is directly connected, lo, weight 1, 00:02:00 L * 10.0.0.3/32 is directly connected, eth3, 00:02:07 C * 10.0.0.3/32 is directly connected, eth3, 00:02:07 L * 10.0.0.3/32 is directly connected, lo, 00:02:07 C>* 10.0.0.3/32 is directly connected, lo, 00:02:07 O>* 10.1.0.0/30 [110/20] via 10.0.0.1, eth3 onlink, weight 1, 00:01:35 C>* 192.168.43.0/24 is directly connected, eth2, 00:02:07 L>* 192.168.43.2/32 is directly connected, eth2, 00:02:07 BGP table on PE2 pe2# show ip bgp BGP table version is 1, local router ID is 10.0.0.3, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *> 192.168.43.0/24 0.0.0.0(pe2) 0 32768 i Displayed 1 routes and 1 total paths The lack of BGP routes on PE2 shouldn\u2019t surprise you if you completed the Establish an IBGP Session Between WAN Edge Routers lab exercise \u2013 you already know you need an IBGP session between PE1 and PE2. Configuration task: Configure an IBGP session between the loopback interfaces of PE1 and PE2 2 . Tip The IBGP session is preconfigured on PE1 and should be established as soon as you configure it on PE2. Verification: Check the BGP neighbors and the BGP table on PE2. You should see an established IBGP session between PE1 and PE2 in the BGP summary printout and the BGP route for 172.16.42.0/24 in the BGP table. This is the printout you should get on FRRouting: BGP neighbors on PE2 pe2# show ip bgp sum IPv4 Unicast Summary: BGP router identifier 10.0.0.3, local AS number 65000 VRF default vrf-id 0 BGP table version 2 RIB entries 3, using 288 bytes of memory Peers 2, using 26 KiB of memory Neighbor V AS MsgRcvd MsgSent TblVer InQ OutQ Up/Down State/PfxRcd PfxSnt Desc pe1(10.0.0.2) 4 65000 7 7 2 0 0 00:00:11 1 1 FRRouting/10.0.1_git Total number of neighbors 1 BGP table on PE2 pe2# show ip bgp BGP table version is 2, local router ID is 10.0.0.3, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *>i172.16.42.0/24 10.0.0.2(pe1) 0 100 0 65100 i *> 192.168.43.0/24 0.0.0.0(pe2) 0 32768 i Displayed 2 routes and 2 total paths Retry the ping command. It should no longer complain that the network is unreachable but could generate another bit of information on devices that parse and display ICMP error reports (Linux does not). For example, Arista EOS reports that the CORE router (10.0.0.1) claims it cannot reach the destination: Pinging Ext from PE2 (Arista EOS) pe2#ping 172.16.42.42 PING 172.16.42.42 (172.16.42.42) : 72(100) bytes of data. From 10.0.0.1 icmp_seq=1 Destination Net Unreachable --- 172.16.42.42 ping statistics --- 5 packets transmitted, 0 received, +1 errors, 100% packet loss, time 30ms You can use traceroute on some other platforms (for example, Cumulus Linux or FRRouting) to get similar information: Traceroute from PE2 toward Ext (FRRouting) pe2(bash)#traceroute 172.16.42.42 traceroute to 172.16.42.42 (172.16.42.42), 30 hops max, 46 byte packets 1 core (10.0.0.1) 0.015 ms !N 0.010 ms !N *","title":"Propagate External BGP Routes to PE2"},{"location":"ibgp/2-transit/#fixing-the-core-routing","text":"Log into the router complaining it cannot reach the destination (the CORE router) and check its IP routing table. The route for 172.16.42.0/24 is missing. The routing table on Core core# show ip route Codes: K - kernel route, C - connected, L - local, S - static, R - RIP, O - OSPF, I - IS-IS, B - BGP, E - EIGRP, N - NHRP, T - Table, v - VNC, V - VNC-Direct, A - Babel, F - PBR, f - OpenFabric, t - Table-Direct, > - selected route, * - FIB route, q - queued, r - rejected, b - backup t - trapped, o - offload failure O 10.0.0.1/32 [110/0] is directly connected, lo, weight 1, 00:08:05 L * 10.0.0.1/32 is directly connected, eth3, 00:08:12 C * 10.0.0.1/32 is directly connected, eth3, 00:08:12 L * 10.0.0.1/32 is directly connected, lo, 00:08:12 C>* 10.0.0.1/32 is directly connected, lo, 00:08:12 O>* 10.0.0.2/32 [110/10] via 10.1.0.2, eth1, weight 1, 00:07:40 O>* 10.0.0.3/32 [110/10] via 10.0.0.3, eth3 onlink, weight 1, 00:07:40 O 10.1.0.0/30 [110/10] is directly connected, eth1, weight 1, 00:08:05 C>* 10.1.0.0/30 is directly connected, eth1, 00:08:12 L>* 10.1.0.1/32 is directly connected, eth1, 00:08:12 That shouldn\u2019t be a big surprise; after all, the external prefix is advertised only in BGP, and the CORE router runs only OSPF. There are at least four ways to fix the routing in the core of your autonomous system: Redistribute EBGP information into OSPF. That\u2019s dangerous in real-life networks with large BGP tables , and thus, you are not allowed to do it in this lab exercise. Advertise an OSPF default route from PE1. That would solve your immediate problem but wouldn\u2019t result in an actual transit network \u2013 you would run into \u201cexciting\u201d challenges when trying to connect external networks to PE2. This option is thus also off the table. Hide the transit packets from the CORE router using MPLS or IP-over-something tunnels. While the MPLS approach is commonly used to build BGP-free core networks , it\u2019s too complex for this lab exercise 3 . Make the CORE router part of the BGP routing. This is the approach we\u2019ll use. Configuration tasks: Configure BGP with AS number 65000 on the CORE router Configure IBGP sessions between all BGP routers in AS 65000. Tip Due to the IBGP loop avoidance mechanism (never advertise IBGP routes to other IBGP neighbors), you must configure a full mesh of IBGP sessions, adding PE1-CORE and PE2-CORE IBGP sessions. Your lab might work without the PE2-CORE IBGP session but would probably stop working when you connect an EBGP neighbor to PE2 4 . The IBGP session between PE1 and CORE routers is preconfigured on PE1 and should be established as soon as you configure it on the CORE router. You\u2019ll have to configure the PE2-CORE IBGP session on both ends. If you\u2019re working with FRR or Cumulus Linux, save the CORE router\u2019s current configuration before enabling the BGP daemon and restarting FRR. Verification: Check the BGP neighbors and the BGP table on the CORE router. The router should have two established IBGP sessions and three prefixes in its BGP table: BGP neighbors on Core core# show ip bgp sum IPv4 Unicast Summary: BGP router identifier 10.0.0.1, local AS number 65000 VRF default vrf-id 0 BGP table version 2 RIB entries 3, using 288 bytes of memory Peers 2, using 26 KiB of memory Neighbor V AS MsgRcvd MsgSent TblVer InQ OutQ Up/Down State/PfxRcd PfxSnt Desc pe1(10.0.0.2) 4 65000 5 4 2 0 0 00:00:03 1 0 FRRouting/10.0.1_git pe2(10.0.0.3) 4 65000 5 4 2 0 0 00:00:03 1 0 FRRouting/10.0.1_git Total number of neighbors 2 BGP table on Core core# show ip bgp BGP table version is 2, local router ID is 10.0.0.1, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *>i172.16.42.0/24 10.0.0.2(pe1) 0 100 0 65100 i *>i192.168.43.0/24 10.0.0.3(pe2) 0 100 0 i Displayed 2 routes and 2 total paths Retry the ping command on PE2. PE2 should be able to reach the EXT router: Ping from PE2 to Ext (FRRouting) pe2(bash)#ping 172.16.42.42 -I 192.168.43.2 PING 172.16.42.42 (172.16.42.42) from 192.168.43.2: 56 data bytes 64 bytes from 172.16.42.42: seq=0 ttl=62 time=0.689 ms 64 bytes from 172.16.42.42: seq=1 ttl=62 time=0.377 ms ^C --- 172.16.42.42 ping statistics --- 2 packets transmitted, 2 packets received, 0% packet loss round-trip min/avg/max = 0.377/0.533/0.689 ms Next: Use BGP Route Reflectors","title":"Fixing the Core Routing"},{"location":"ibgp/2-transit/#automated-verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on Ext and PE1. The validation tests check: Whether the PE2 prefix is propagated to Core, PE1, and Ext. Whether the Ext prefix is propagated to Core and PE2 Whether Ext can ping PE2 The netlab validate command skips checks that would be executed on Core and PE2 if they\u2019re not running one of the supported network operating systems. This is the printout you would get after establishing the PE1-PE2 IBGP session (the IBGP sessions with the Core router are not yet established):","title":"Automated Verification"},{"location":"ibgp/2-transit/#reference-information","text":"This lab uses the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"ibgp/2-transit/#req","text":"Use any device supported by the netlab BGP and OSPF configuration modules . You can do limited automated lab validation with Arista EOS, Cumulus Linux, or FRR running on Ext and PE1. You must run one of these network operating systems on all devices for a complete validation. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"ibgp/2-transit/#lab-wiring","text":"This lab uses the 4-router lab topology with the following mapping between the routers in the 4-router lab topology and this lab: 4-router-topology device Lab device C1 Core C2 PE2 X1 PE1 X2 EXT Link Name Origin Device Origin Port Destination Device Destination Port core eth1 pe1 eth1 Unused link core eth2 ext eth1 Inter-AS link pe1 eth2 ext eth2 Unused link pe2 eth1 pe1 eth3 PE2 stub interface pe2 eth2 ext eth3 core eth3 pe2 eth3 Note : Some interfaces are not used to conform with the predefined 4-router lab topology.","title":"Lab Wiring"},{"location":"ibgp/2-transit/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description core 10.0.0.1/32 Loopback eth1 10.1.0.1/30 core -> pe1 eth2 Unused link eth3 Unnumbered core -> pe2 ext 172.16.42.42/24 Loopback eth1 Unused link eth2 10.1.0.5/30 Inter-AS link eth3 PE2 stub interface pe1 10.0.0.2/32 Loopback eth1 10.1.0.2/30 pe1 -> core eth2 10.1.0.6/30 Inter-AS link eth3 Unused link pe2 10.0.0.3/32 Loopback eth1 Unused link eth2 192.168.43.2/24 PE2 stub interface eth3 Unnumbered pe2 -> core Note : Some interfaces are not configured with IP addresses to conform with the predefined 4-router lab topology. If it doesn\u2019t, you have a more interesting problem to troubleshoot \u2013 why does it work? \u21a9 Remember to activate the IBGP session within the IPv4 address family (AF) if your device requires per-AF neighbor activation. \u21a9 \u2026 but as you have a running lab that\u2019s easy to restart, please feel free to try to get it to work. You get bonus points if you decide to use Segment Routing and a virtual 6-pack of Kool-Aid if you use SRv6 ;) \u21a9 Proving that is left as an exercise for the reader \u21a9","title":"Lab Addressing"},{"location":"ibgp/3-rr/","text":"Use BGP Route Reflectors In the Build a Transit Network with IBGP lab exercise, you learned the basics of IBGP, including the need to have a full mesh of IBGP sessions between all BGP-speaking routers in an autonomous system. The original BGP protocol (defined in RFC 4271 ) needed a full mesh of IBGP sessions because it had no attribute that could be used to detect routing loops within an autonomous system (AS path is used between autonomous systems). BGP Route Reflection feature (defined in RFC 4456 ) adds the extra attributes needed for intra-AS loop detection and allows you to build large networks with a hub-and-spoke topology of IBGP sessions. That\u2019s what you\u2019ll practice in this lab exercise. Lab Topology You\u2019ll work with a slightly larger lab containing six routers connected into a leaf-and-spine fabric: The following diagram shows the IBGP sessions needed to distribute routing information (IPv4 prefixes of loopback interfaces) between all routers in your network: During the lab exercise, you\u2019ll remove all IBGP sessions between leaf routers and turn spine routers into BGP route reflectors, resulting in the following IBGP sessions: Tip Please note there\u2019s still an IBGP session between the two spine routers. Removing it would reduce the resiliency of BGP routing in your network. Start the Lab Assuming you already set up your lab infrastructure , change directory to ibgp/3-rr You can choose between these lab topologies: topology.yml : 6-router topology with a full mesh of IBGP sessions. Start with netlab up ( device requirements ) hub-spoke.yml : 6-router topology with hub-and-spoke IBGP sessions. Start with netlab up hub-spoke.yml . 4-router.yml : 4-router topology (two leaves, two spines) with hub-and-spoke IBGP sessions and FRRouting running on the leaf routers. Use this topology when you\u2019re low on memory; start it with netlab up 4-router.yml . After starting the lab, log into lab devices with netlab connect and verify that netlab correctly configured their IP addresses, OSPF routing, and EBGP sessions. Lab Configuration netlab will configure IP addressing, OSPF, and a full mesh of IBGP sessions on the lab devices. BGP router identifiers and advertised prefixes Node/ASN Router ID Advertised prefixes AS65000 l1 10.0.0.1 192.168.41.0/24 l2 10.0.0.2 192.168.42.0/24 l3 10.0.0.3 192.168.43.0/24 l4 10.0.0.4 192.168.44.0/24 s1 10.0.0.10 s2 10.0.0.11 BGP neighbors (6-router topology) Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 l1 10.0.0.1 65000 l2 65000 10.0.0.2 l3 65000 10.0.0.3 l4 65000 10.0.0.4 s1 65000 10.0.0.10 s2 65000 10.0.0.11 l2 10.0.0.2 65000 l1 65000 10.0.0.1 l3 65000 10.0.0.3 l4 65000 10.0.0.4 s1 65000 10.0.0.10 s2 65000 10.0.0.11 l3 10.0.0.3 65000 l1 65000 10.0.0.1 l2 65000 10.0.0.2 l4 65000 10.0.0.4 s1 65000 10.0.0.10 s2 65000 10.0.0.11 l4 10.0.0.4 65000 l1 65000 10.0.0.1 l2 65000 10.0.0.2 l3 65000 10.0.0.3 s1 65000 10.0.0.10 s2 65000 10.0.0.11 s1 10.0.0.10 65000 l1 65000 10.0.0.1 l2 65000 10.0.0.2 l3 65000 10.0.0.3 l4 65000 10.0.0.4 s2 65000 10.0.0.11 s2 10.0.0.11 65000 l1 65000 10.0.0.1 l2 65000 10.0.0.2 l3 65000 10.0.0.3 l4 65000 10.0.0.4 s1 65000 10.0.0.10 Cutting the Mesh Log into L4 and inspect its BGP table. It should contain four prefixes (each leaf router advertises a BGP prefix). This is the printout you\u2019d get when using FRRouting containers: Original BGP table on L4 l4# show ip bgp BGP table version is 4, local router ID is 10.0.0.4, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *>i192.168.41.0/24 10.0.0.1(l1) 0 100 0 i *>i192.168.42.0/24 10.0.0.2(l2) 0 100 0 i *>i192.168.43.0/24 10.0.0.3(l3) 0 100 0 i *> 192.168.44.0/24 0.0.0.0(l4) 0 32768 i Displayed 4 routes and 4 total paths Next, log into all leaf routers and remove IBGP sessions with other leaf routers. After completing this part of the exercise, you should have two BGP neighbors on every leaf router. Tip If you don\u2019t like the extra practice, start the hub-spoke.yml lab topology. You\u2019ll also notice that L4 no longer knows how to reach the other leaf switches: The BGP table on L4 no longer contains other leaf prefixes l4# show ip bgp BGP table version is 7, local router ID is 10.0.0.4, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *> 192.168.44.0/24 0.0.0.0(l4) 0 32768 i Displayed 1 routes and 1 total paths Adding Route Reflectors Reducing the number of IBGP sessions in our network is good, but we still need full connectivity between leaf routers. You could advertise the default route or an aggregate prefix from the spine routers ( try it out ); we\u2019ll turn them into route reflectors: Configure IBGP neighbors to be route reflector clients on both spine routers. neighbor route-reflector-client is a typical configuration command you would use. Verification Log into L4 and inspect its BGP table. As both route reflectors (S1 and S2) send IBGP routes to L4, you should see two copies of every leaf prefix: BGP table on L4 after the introduction of route reflectors l4# show ip bgp BGP table version is 13, local router ID is 10.0.0.4, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *>i192.168.41.0/24 10.0.0.1(s1) 0 100 0 i * i 10.0.0.1(s2) 0 100 0 i *>i192.168.42.0/24 10.0.0.2(s1) 0 100 0 i * i 10.0.0.2(s2) 0 100 0 i *>i192.168.43.0/24 10.0.0.3(s1) 0 100 0 i * i 10.0.0.3(s2) 0 100 0 i *> 192.168.44.0/24 0.0.0.0(l4) 0 32768 i Displayed 4 routes and 7 total paths Some devices (including Arista EOS) will also show additional BGP attributes attached to reflected routes (ORIGINATOR_ID and CLUSTER_LIST). Alternatively, you can inspect a single BGP prefix on most network devices to see the route reflection-related attributes: The details of the BGP prefix advertised by L1 as seen by L4 l4# show ip bgp 192.168.41.0/24 BGP routing table entry for 192.168.41.0/24, version 11 Paths: (2 available, best #1, table default) Not advertised to any peer Local 10.0.0.1(s1) (metric 20) from s1(10.0.0.10) (10.0.0.1) Origin IGP, metric 0, localpref 100, valid, internal, bestpath-from-AS Local, best (Neighbor IP) Originator: 10.0.0.1, Cluster list: 10.0.0.10 Last update: Tue Oct 1 19:04:57 2024 Local 10.0.0.1(s2) (metric 20) from s2(10.0.0.11) (10.0.0.1) Origin IGP, metric 0, localpref 100, valid, internal Originator: 10.0.0.1, Cluster list: 10.0.0.11 Last update: Tue Oct 1 19:04:43 2024 Next: Use BGP session templates to make the BGP configuration on the BGP route reflectors scalable. Configure a BGP Route Server \u2013 functionality similar to BGP Route Reflectors, but for EBGP sessions. Automated Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on leaf devices. The validation tests check: Whether the leaf devices get BGP prefixes directly from other leaf devices (you forgot to remove the leaf-to-leaf IBGP sessions) Whether the leaf devices get BGP prefixes from both spine devices (spine devices work as route reflectors). This is the printout validating the L1 prefix 1 : Alternate Solutions Your lab uses a very structured addressing scheme, so you can advertise an aggregate prefix (for example, 192.168.0.0/16 ) from the spine routers to fix the routing in your lab. You could advertise the default route from the spine routers in a less structured lab. You can easily try out both solutions: Start the hub-spoke.yml lab topology with netlab up hub-spoke.yml Configure an aggregate prefix on both spine routers (see BGP Route Aggregation exercise for more details) or configure default route advertisement on spine routers with a configuration command similar to neighbor default-originate always . Reference Information Device Requirements Use any device supported by the netlab BGP and OSPF configuration modules as leaf- or spine routers. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on leaf devices. Automated lab validation requires netlab release 1.8.3 or higher. Lab Wiring 6-router topology Origin Device Origin Port Destination Device Destination Port l1 eth1 s1 eth1 l1 eth2 s2 eth1 l2 eth1 s1 eth2 l2 eth2 s2 eth2 l3 eth1 s1 eth3 l3 eth2 s2 eth3 l4 eth1 s1 eth4 l4 eth2 s2 eth4 4-router topology Link Name Origin Device Origin Port Destination Device Destination Port S1-L1 s1 Ethernet1 l1 swp1 S1-L2 s1 Ethernet2 l2 swp1 Unused link l1 swp2 l2 swp2 S2-L1 s2 Ethernet1 l1 swp3 S2-L2 s2 Ethernet2 l2 swp3 Unused link s1 Ethernet3 s2 Ethernet3 Note : Some interfaces are not used to conform with the predefined 4-router lab topology. Lab Addressing 6-router topology Node/Interface IPv4 Address IPv6 Address Description l1 10.0.0.1/32 Loopback eth1 10.1.0.1/30 l1 -> s1 eth2 10.1.0.5/30 l1 -> s2 l2 10.0.0.2/32 Loopback eth1 10.1.0.9/30 l2 -> s1 eth2 10.1.0.13/30 l2 -> s2 l3 10.0.0.3/32 Loopback eth1 10.1.0.17/30 l3 -> s1 eth2 10.1.0.21/30 l3 -> s2 l4 10.0.0.4/32 Loopback eth1 10.1.0.25/30 l4 -> s1 eth2 10.1.0.29/30 l4 -> s2 s1 10.0.0.10/32 Loopback eth1 10.1.0.2/30 s1 -> l1 eth2 10.1.0.10/30 s1 -> l2 eth3 10.1.0.18/30 s1 -> l3 eth4 10.1.0.26/30 s1 -> l4 s2 10.0.0.11/32 Loopback eth1 10.1.0.6/30 s2 -> l1 eth2 10.1.0.14/30 s2 -> l2 eth3 10.1.0.22/30 s2 -> l3 eth4 10.1.0.30/30 s2 -> l4 4-router topology Node/Interface IPv4 Address IPv6 Address Description l1 10.0.0.1/32 Loopback swp1 10.1.0.1/30 S1-L1 swp2 Unused link swp3 10.1.0.9/30 S2-L1 l2 10.0.0.2/32 Loopback swp1 10.1.0.5/30 S1-L2 swp2 Unused link swp3 10.1.0.13/30 S2-L2 s1 10.0.0.10/32 Loopback Ethernet1 10.1.0.2/30 S1-L1 Ethernet2 10.1.0.6/30 S1-L2 Ethernet3 Unused link s2 10.0.0.11/32 Loopback Ethernet1 10.1.0.10/30 S2-L1 Ethernet2 10.1.0.14/30 S2-L2 Ethernet3 Unused link Note : Some interfaces are not configured with IP addresses to conform with the predefined 4-router lab topology. The complete validation results are too long to include in the lab description. \u21a9","title":"Use BGP Route Reflectors"},{"location":"ibgp/3-rr/#use-bgp-route-reflectors","text":"In the Build a Transit Network with IBGP lab exercise, you learned the basics of IBGP, including the need to have a full mesh of IBGP sessions between all BGP-speaking routers in an autonomous system. The original BGP protocol (defined in RFC 4271 ) needed a full mesh of IBGP sessions because it had no attribute that could be used to detect routing loops within an autonomous system (AS path is used between autonomous systems). BGP Route Reflection feature (defined in RFC 4456 ) adds the extra attributes needed for intra-AS loop detection and allows you to build large networks with a hub-and-spoke topology of IBGP sessions. That\u2019s what you\u2019ll practice in this lab exercise.","title":"Use BGP Route Reflectors"},{"location":"ibgp/3-rr/#lab-topology","text":"You\u2019ll work with a slightly larger lab containing six routers connected into a leaf-and-spine fabric: The following diagram shows the IBGP sessions needed to distribute routing information (IPv4 prefixes of loopback interfaces) between all routers in your network: During the lab exercise, you\u2019ll remove all IBGP sessions between leaf routers and turn spine routers into BGP route reflectors, resulting in the following IBGP sessions: Tip Please note there\u2019s still an IBGP session between the two spine routers. Removing it would reduce the resiliency of BGP routing in your network.","title":"Lab Topology"},{"location":"ibgp/3-rr/#start-the-lab","text":"Assuming you already set up your lab infrastructure , change directory to ibgp/3-rr You can choose between these lab topologies: topology.yml : 6-router topology with a full mesh of IBGP sessions. Start with netlab up ( device requirements ) hub-spoke.yml : 6-router topology with hub-and-spoke IBGP sessions. Start with netlab up hub-spoke.yml . 4-router.yml : 4-router topology (two leaves, two spines) with hub-and-spoke IBGP sessions and FRRouting running on the leaf routers. Use this topology when you\u2019re low on memory; start it with netlab up 4-router.yml . After starting the lab, log into lab devices with netlab connect and verify that netlab correctly configured their IP addresses, OSPF routing, and EBGP sessions.","title":"Start the Lab"},{"location":"ibgp/3-rr/#lab-configuration","text":"netlab will configure IP addressing, OSPF, and a full mesh of IBGP sessions on the lab devices. BGP router identifiers and advertised prefixes Node/ASN Router ID Advertised prefixes AS65000 l1 10.0.0.1 192.168.41.0/24 l2 10.0.0.2 192.168.42.0/24 l3 10.0.0.3 192.168.43.0/24 l4 10.0.0.4 192.168.44.0/24 s1 10.0.0.10 s2 10.0.0.11 BGP neighbors (6-router topology) Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 l1 10.0.0.1 65000 l2 65000 10.0.0.2 l3 65000 10.0.0.3 l4 65000 10.0.0.4 s1 65000 10.0.0.10 s2 65000 10.0.0.11 l2 10.0.0.2 65000 l1 65000 10.0.0.1 l3 65000 10.0.0.3 l4 65000 10.0.0.4 s1 65000 10.0.0.10 s2 65000 10.0.0.11 l3 10.0.0.3 65000 l1 65000 10.0.0.1 l2 65000 10.0.0.2 l4 65000 10.0.0.4 s1 65000 10.0.0.10 s2 65000 10.0.0.11 l4 10.0.0.4 65000 l1 65000 10.0.0.1 l2 65000 10.0.0.2 l3 65000 10.0.0.3 s1 65000 10.0.0.10 s2 65000 10.0.0.11 s1 10.0.0.10 65000 l1 65000 10.0.0.1 l2 65000 10.0.0.2 l3 65000 10.0.0.3 l4 65000 10.0.0.4 s2 65000 10.0.0.11 s2 10.0.0.11 65000 l1 65000 10.0.0.1 l2 65000 10.0.0.2 l3 65000 10.0.0.3 l4 65000 10.0.0.4 s1 65000 10.0.0.10","title":"Lab Configuration"},{"location":"ibgp/3-rr/#cutting-the-mesh","text":"Log into L4 and inspect its BGP table. It should contain four prefixes (each leaf router advertises a BGP prefix). This is the printout you\u2019d get when using FRRouting containers: Original BGP table on L4 l4# show ip bgp BGP table version is 4, local router ID is 10.0.0.4, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *>i192.168.41.0/24 10.0.0.1(l1) 0 100 0 i *>i192.168.42.0/24 10.0.0.2(l2) 0 100 0 i *>i192.168.43.0/24 10.0.0.3(l3) 0 100 0 i *> 192.168.44.0/24 0.0.0.0(l4) 0 32768 i Displayed 4 routes and 4 total paths Next, log into all leaf routers and remove IBGP sessions with other leaf routers. After completing this part of the exercise, you should have two BGP neighbors on every leaf router. Tip If you don\u2019t like the extra practice, start the hub-spoke.yml lab topology. You\u2019ll also notice that L4 no longer knows how to reach the other leaf switches: The BGP table on L4 no longer contains other leaf prefixes l4# show ip bgp BGP table version is 7, local router ID is 10.0.0.4, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *> 192.168.44.0/24 0.0.0.0(l4) 0 32768 i Displayed 1 routes and 1 total paths","title":"Cutting the Mesh"},{"location":"ibgp/3-rr/#adding-route-reflectors","text":"Reducing the number of IBGP sessions in our network is good, but we still need full connectivity between leaf routers. You could advertise the default route or an aggregate prefix from the spine routers ( try it out ); we\u2019ll turn them into route reflectors: Configure IBGP neighbors to be route reflector clients on both spine routers. neighbor route-reflector-client is a typical configuration command you would use.","title":"Adding Route Reflectors"},{"location":"ibgp/3-rr/#verification","text":"Log into L4 and inspect its BGP table. As both route reflectors (S1 and S2) send IBGP routes to L4, you should see two copies of every leaf prefix: BGP table on L4 after the introduction of route reflectors l4# show ip bgp BGP table version is 13, local router ID is 10.0.0.4, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *>i192.168.41.0/24 10.0.0.1(s1) 0 100 0 i * i 10.0.0.1(s2) 0 100 0 i *>i192.168.42.0/24 10.0.0.2(s1) 0 100 0 i * i 10.0.0.2(s2) 0 100 0 i *>i192.168.43.0/24 10.0.0.3(s1) 0 100 0 i * i 10.0.0.3(s2) 0 100 0 i *> 192.168.44.0/24 0.0.0.0(l4) 0 32768 i Displayed 4 routes and 7 total paths Some devices (including Arista EOS) will also show additional BGP attributes attached to reflected routes (ORIGINATOR_ID and CLUSTER_LIST). Alternatively, you can inspect a single BGP prefix on most network devices to see the route reflection-related attributes: The details of the BGP prefix advertised by L1 as seen by L4 l4# show ip bgp 192.168.41.0/24 BGP routing table entry for 192.168.41.0/24, version 11 Paths: (2 available, best #1, table default) Not advertised to any peer Local 10.0.0.1(s1) (metric 20) from s1(10.0.0.10) (10.0.0.1) Origin IGP, metric 0, localpref 100, valid, internal, bestpath-from-AS Local, best (Neighbor IP) Originator: 10.0.0.1, Cluster list: 10.0.0.10 Last update: Tue Oct 1 19:04:57 2024 Local 10.0.0.1(s2) (metric 20) from s2(10.0.0.11) (10.0.0.1) Origin IGP, metric 0, localpref 100, valid, internal Originator: 10.0.0.1, Cluster list: 10.0.0.11 Last update: Tue Oct 1 19:04:43 2024 Next: Use BGP session templates to make the BGP configuration on the BGP route reflectors scalable. Configure a BGP Route Server \u2013 functionality similar to BGP Route Reflectors, but for EBGP sessions.","title":"Verification"},{"location":"ibgp/3-rr/#automated-verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on leaf devices. The validation tests check: Whether the leaf devices get BGP prefixes directly from other leaf devices (you forgot to remove the leaf-to-leaf IBGP sessions) Whether the leaf devices get BGP prefixes from both spine devices (spine devices work as route reflectors). This is the printout validating the L1 prefix 1 :","title":"Automated Verification"},{"location":"ibgp/3-rr/#alt","text":"Your lab uses a very structured addressing scheme, so you can advertise an aggregate prefix (for example, 192.168.0.0/16 ) from the spine routers to fix the routing in your lab. You could advertise the default route from the spine routers in a less structured lab. You can easily try out both solutions: Start the hub-spoke.yml lab topology with netlab up hub-spoke.yml Configure an aggregate prefix on both spine routers (see BGP Route Aggregation exercise for more details) or configure default route advertisement on spine routers with a configuration command similar to neighbor default-originate always .","title":"Alternate Solutions"},{"location":"ibgp/3-rr/#reference-information","text":"","title":"Reference Information"},{"location":"ibgp/3-rr/#req","text":"Use any device supported by the netlab BGP and OSPF configuration modules as leaf- or spine routers. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on leaf devices. Automated lab validation requires netlab release 1.8.3 or higher.","title":"Device Requirements"},{"location":"ibgp/3-rr/#lab-wiring","text":"6-router topology Origin Device Origin Port Destination Device Destination Port l1 eth1 s1 eth1 l1 eth2 s2 eth1 l2 eth1 s1 eth2 l2 eth2 s2 eth2 l3 eth1 s1 eth3 l3 eth2 s2 eth3 l4 eth1 s1 eth4 l4 eth2 s2 eth4 4-router topology Link Name Origin Device Origin Port Destination Device Destination Port S1-L1 s1 Ethernet1 l1 swp1 S1-L2 s1 Ethernet2 l2 swp1 Unused link l1 swp2 l2 swp2 S2-L1 s2 Ethernet1 l1 swp3 S2-L2 s2 Ethernet2 l2 swp3 Unused link s1 Ethernet3 s2 Ethernet3 Note : Some interfaces are not used to conform with the predefined 4-router lab topology.","title":"Lab Wiring"},{"location":"ibgp/3-rr/#lab-addressing","text":"6-router topology Node/Interface IPv4 Address IPv6 Address Description l1 10.0.0.1/32 Loopback eth1 10.1.0.1/30 l1 -> s1 eth2 10.1.0.5/30 l1 -> s2 l2 10.0.0.2/32 Loopback eth1 10.1.0.9/30 l2 -> s1 eth2 10.1.0.13/30 l2 -> s2 l3 10.0.0.3/32 Loopback eth1 10.1.0.17/30 l3 -> s1 eth2 10.1.0.21/30 l3 -> s2 l4 10.0.0.4/32 Loopback eth1 10.1.0.25/30 l4 -> s1 eth2 10.1.0.29/30 l4 -> s2 s1 10.0.0.10/32 Loopback eth1 10.1.0.2/30 s1 -> l1 eth2 10.1.0.10/30 s1 -> l2 eth3 10.1.0.18/30 s1 -> l3 eth4 10.1.0.26/30 s1 -> l4 s2 10.0.0.11/32 Loopback eth1 10.1.0.6/30 s2 -> l1 eth2 10.1.0.14/30 s2 -> l2 eth3 10.1.0.22/30 s2 -> l3 eth4 10.1.0.30/30 s2 -> l4 4-router topology Node/Interface IPv4 Address IPv6 Address Description l1 10.0.0.1/32 Loopback swp1 10.1.0.1/30 S1-L1 swp2 Unused link swp3 10.1.0.9/30 S2-L1 l2 10.0.0.2/32 Loopback swp1 10.1.0.5/30 S1-L2 swp2 Unused link swp3 10.1.0.13/30 S2-L2 s1 10.0.0.10/32 Loopback Ethernet1 10.1.0.2/30 S1-L1 Ethernet2 10.1.0.6/30 S1-L2 Ethernet3 Unused link s2 10.0.0.11/32 Loopback Ethernet1 10.1.0.10/30 S2-L1 Ethernet2 10.1.0.14/30 S2-L2 Ethernet3 Unused link Note : Some interfaces are not configured with IP addresses to conform with the predefined 4-router lab topology. The complete validation results are too long to include in the lab description. \u21a9","title":"Lab Addressing"},{"location":"lb/1-ebgp/","text":"Load Balancing across External BGP Paths Modern BGP implementations usually forward traffic across equal-cost external BGP paths (Equal-Cost Multipath or ECMP). Unfortunately, the default definition of the equal-cost paths usually includes most BGP path attributes being equal , and many implementations provide nerd knobs you can use to fine-tune which BGP path attributes you want to ignore when considering ECMP paths. In this lab exercise, you\u2019ll observe simple EBGP ECMP across parallel paths toward AS 651000 (P1 and P2) and try to configure your router to forward traffic across all paths toward AS 65001 (P1, P2, and P3). Warning ECMP traffic forwarding across multiple autonomous systems is usually not a good idea, as you need to know each autonomous system\u2019s internal structure and end-to-end delay. Still, you might have to configure multi-AS ECMP in environments that replaced IGP with EBGP. Existing BGP Configuration The routers in your lab use the following BGP AS numbers. C2 and P1 advertise an IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 AS65001 c2 10.7.5.0 10.7.5.0/24 AS65100 p1 10.0.0.2 10.1.3.0/24 p2 10.0.0.3 AS65101 p3 10.0.0.4 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using another lab infrastructure, you\u2019ll have to configure them manually. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 rtr 10.0.0.1 65000 p1 65100 10.1.0.1 p2 65100 10.1.0.5 p3 65101 10.1.0.9 Start the Lab Assuming you already set up your lab infrastructure : Change directory to lb/1-ebgp Execute netlab up ( device requirements ) Log into your router (RTR) with netlab connect rtr and verify that the IP addresses and the EBGP sessions are properly configured. Warning This lab exercise requires netlab release 1.6.4 or later. Configuration Tasks Most BGP implementations have nerd knobs that change the EBGP load-balancing behavior: Configure load balancing across EBGP paths using a command similar to maximum-paths . Allow EBGP load balancing across at least four parallel paths. Configure your device to ignore AS path contents when searching for equal-cost paths. The command to use could start with bgp bestpath . Tip Default values differ across vendors; your device might already be doing what we want it to do. If your device\u2019s default settings result in EBGP ECMP across multiple autonomous systems, try to find the configuration commands that would disable that behavior. Verification Log into your device and inspect its BGP table. The BGP table should contain two equal-cost paths to 10.1.3.0/24 and three paths with equal AS-path length to 10.7.5.0/24. Some BGP implementations show the ECMP status of alternate paths in the BGP table printout. For example, this is the printout from an Arista EOS device: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending best path selection Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * >Ec 10.1.3.0/24 10.1.0.5 0 - 100 0 65100 i * ec 10.1.3.0/24 10.1.0.1 0 - 100 0 65100 i * >Ec 10.7.5.0/24 10.1.0.5 0 - 100 0 65100 65001 i * ec 10.7.5.0/24 10.1.0.1 0 - 100 0 65100 65001 i * ec 10.7.5.0/24 10.1.0.9 0 - 100 0 65101 65001 i If your device does not provide that information, look into the IP routing table. It should contain two entries for 10.1.3.0/24 and three entries for 10.7.5.0/24. For example, these are the BGP entries in the IP routing table on a Cumulus Linux device: rtr# show ip route bgp Codes: K - kernel route, C - connected, S - static, R - RIP, O - OSPF, I - IS-IS, B - BGP, E - EIGRP, N - NHRP, T - Table, v - VNC, V - VNC-Direct, A - Babel, D - SHARP, F - PBR, f - OpenFabric, > - selected route, * - FIB route, q - queued, r - rejected, b - backup t - trapped, o - offload failure B>* 10.1.3.0/24 [20/0] via 10.1.0.1, swp1, weight 1, 00:00:08 * via 10.1.0.5, swp2, weight 1, 00:00:08 B>* 10.7.5.0/24 [20/0] via 10.1.0.1, swp1, weight 1, 00:00:08 * via 10.1.0.5, swp2, weight 1, 00:00:08 * via 10.1.0.9, swp3, weight 1, 00:00:08 Next: EBGP Load Balancing with BGP Link Bandwidth Reference Information The following information might help you if you plan to build custom lab infrastructure: Device Requirements Use any device supported by the netlab BGP configuration module for the customer- and provider routers. Git repository contains external router initial device configurations for Cumulus Linux. Lab Wiring Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 p1 swp1 rtr Ethernet2 p2 swp1 rtr Ethernet3 p3 swp1 p1 swp2 p2 swp2 p2 swp3 c2 swp1 p3 swp2 c2 swp2 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.2/30 rtr -> p1 Ethernet2 10.1.0.6/30 rtr -> p2 Ethernet3 10.1.0.10/30 rtr -> p3 c2 10.7.5.0/24 Loopback swp1 10.1.0.17/30 c2 -> p2 swp2 10.1.0.21/30 c2 -> p3 p1 10.0.0.2/32 Loopback swp1 10.1.0.1/30 p1 -> rtr swp2 10.1.0.13/30 p1 -> p2 p2 10.0.0.3/32 Loopback swp1 10.1.0.5/30 p2 -> rtr swp2 10.1.0.14/30 p2 -> p1 swp3 10.1.0.18/30 p2 -> c2 p3 10.0.0.4/32 Loopback swp1 10.1.0.9/30 p3 -> rtr swp2 10.1.0.22/30 p3 -> c2","title":"Load Balancing across External BGP Paths"},{"location":"lb/1-ebgp/#load-balancing-across-external-bgp-paths","text":"Modern BGP implementations usually forward traffic across equal-cost external BGP paths (Equal-Cost Multipath or ECMP). Unfortunately, the default definition of the equal-cost paths usually includes most BGP path attributes being equal , and many implementations provide nerd knobs you can use to fine-tune which BGP path attributes you want to ignore when considering ECMP paths. In this lab exercise, you\u2019ll observe simple EBGP ECMP across parallel paths toward AS 651000 (P1 and P2) and try to configure your router to forward traffic across all paths toward AS 65001 (P1, P2, and P3). Warning ECMP traffic forwarding across multiple autonomous systems is usually not a good idea, as you need to know each autonomous system\u2019s internal structure and end-to-end delay. Still, you might have to configure multi-AS ECMP in environments that replaced IGP with EBGP.","title":"Load Balancing across External BGP Paths"},{"location":"lb/1-ebgp/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. C2 and P1 advertise an IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 AS65001 c2 10.7.5.0 10.7.5.0/24 AS65100 p1 10.0.0.2 10.1.3.0/24 p2 10.0.0.3 AS65101 p3 10.0.0.4 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using another lab infrastructure, you\u2019ll have to configure them manually. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 rtr 10.0.0.1 65000 p1 65100 10.1.0.1 p2 65100 10.1.0.5 p3 65101 10.1.0.9","title":"Existing BGP Configuration"},{"location":"lb/1-ebgp/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to lb/1-ebgp Execute netlab up ( device requirements ) Log into your router (RTR) with netlab connect rtr and verify that the IP addresses and the EBGP sessions are properly configured. Warning This lab exercise requires netlab release 1.6.4 or later.","title":"Start the Lab"},{"location":"lb/1-ebgp/#configuration-tasks","text":"Most BGP implementations have nerd knobs that change the EBGP load-balancing behavior: Configure load balancing across EBGP paths using a command similar to maximum-paths . Allow EBGP load balancing across at least four parallel paths. Configure your device to ignore AS path contents when searching for equal-cost paths. The command to use could start with bgp bestpath . Tip Default values differ across vendors; your device might already be doing what we want it to do. If your device\u2019s default settings result in EBGP ECMP across multiple autonomous systems, try to find the configuration commands that would disable that behavior.","title":"Configuration Tasks"},{"location":"lb/1-ebgp/#verification","text":"Log into your device and inspect its BGP table. The BGP table should contain two equal-cost paths to 10.1.3.0/24 and three paths with equal AS-path length to 10.7.5.0/24. Some BGP implementations show the ECMP status of alternate paths in the BGP table printout. For example, this is the printout from an Arista EOS device: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending best path selection Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * >Ec 10.1.3.0/24 10.1.0.5 0 - 100 0 65100 i * ec 10.1.3.0/24 10.1.0.1 0 - 100 0 65100 i * >Ec 10.7.5.0/24 10.1.0.5 0 - 100 0 65100 65001 i * ec 10.7.5.0/24 10.1.0.1 0 - 100 0 65100 65001 i * ec 10.7.5.0/24 10.1.0.9 0 - 100 0 65101 65001 i If your device does not provide that information, look into the IP routing table. It should contain two entries for 10.1.3.0/24 and three entries for 10.7.5.0/24. For example, these are the BGP entries in the IP routing table on a Cumulus Linux device: rtr# show ip route bgp Codes: K - kernel route, C - connected, S - static, R - RIP, O - OSPF, I - IS-IS, B - BGP, E - EIGRP, N - NHRP, T - Table, v - VNC, V - VNC-Direct, A - Babel, D - SHARP, F - PBR, f - OpenFabric, > - selected route, * - FIB route, q - queued, r - rejected, b - backup t - trapped, o - offload failure B>* 10.1.3.0/24 [20/0] via 10.1.0.1, swp1, weight 1, 00:00:08 * via 10.1.0.5, swp2, weight 1, 00:00:08 B>* 10.7.5.0/24 [20/0] via 10.1.0.1, swp1, weight 1, 00:00:08 * via 10.1.0.5, swp2, weight 1, 00:00:08 * via 10.1.0.9, swp3, weight 1, 00:00:08 Next: EBGP Load Balancing with BGP Link Bandwidth","title":"Verification"},{"location":"lb/1-ebgp/#reference-information","text":"The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"lb/1-ebgp/#req","text":"Use any device supported by the netlab BGP configuration module for the customer- and provider routers. Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"lb/1-ebgp/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 p1 swp1 rtr Ethernet2 p2 swp1 rtr Ethernet3 p3 swp1 p1 swp2 p2 swp2 p2 swp3 c2 swp1 p3 swp2 c2 swp2","title":"Lab Wiring"},{"location":"lb/1-ebgp/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.2/30 rtr -> p1 Ethernet2 10.1.0.6/30 rtr -> p2 Ethernet3 10.1.0.10/30 rtr -> p3 c2 10.7.5.0/24 Loopback swp1 10.1.0.17/30 c2 -> p2 swp2 10.1.0.21/30 c2 -> p3 p1 10.0.0.2/32 Loopback swp1 10.1.0.1/30 p1 -> rtr swp2 10.1.0.13/30 p1 -> p2 p2 10.0.0.3/32 Loopback swp1 10.1.0.5/30 p2 -> rtr swp2 10.1.0.14/30 p2 -> p1 swp3 10.1.0.18/30 p2 -> c2 p3 10.0.0.4/32 Loopback swp1 10.1.0.9/30 p3 -> rtr swp2 10.1.0.22/30 p3 -> c2","title":"Lab Addressing"},{"location":"lb/2-dmz-bw/","text":"EBGP Load Balancing with BGP Link Bandwidth In the previous exercise , you configured Equal-Cost Multipathing (ECMP) between EBGP paths. ECMP results in your router sending approximately the same amount of traffic across all equal-cost links. That approach results in suboptimal performance if the links have different bandwidths, in which case you need Weighted ECMP 1 . Most BGP implementations support the BGP Link Bandwidth Extended Community , which can influence the load balancing ratios across links with unequal bandwidth. In this lab exercise, you\u2019ll ignore the Multi-Exit Discriminator metric the adjacent autonomous system uses to tell you to avoid the slower link and configure the BGP link bandwidth community to send less traffic over it than over the faster link. Existing BGP Configuration The routers in your lab use the following BGP AS numbers. Each router router advertises an IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 10.0.0.1/32 AS65100 x1 10.0.0.2 10.1.3.0/24 x2 10.0.0.3 10.1.3.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 rtr 10.0.0.1 65000 x1 65100 10.1.0.2 x2 65100 10.1.0.6 Start the Lab Assuming you already set up your lab infrastructure : Change directory to lb/2-dmz-bw Execute netlab up ( device requirements , other options ) Log into your router (RTR) with netlab connect rtr and verify that the IP addresses and the EBGP sessions are properly configured. Warning This lab exercise requires netlab release 1.6.4 or later. The Problem Log into your router and check its BGP table. It should have two paths for the prefix 10.1.3.0/24, but only one of them is used due to its lower MED value: rtr>show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending best path selection Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.1/32 - - - - 0 i * > 10.1.3.0/24 10.1.0.6 100 - 100 0 65100 i * 10.1.3.0/24 10.1.0.2 200 - 100 0 65100 i You would like to use both links toward AS 65100, preferably in a 2:1 ratio. Configuration Tasks To implement unequal-cost multipathing, you have to: Configure ECMP load balancing for EBGP paths (see the Load Balancing across External BGP Paths exercise for more details). Make both paths toward 10.1.3.0/24 equal from the BGP path selection perspective. Use an inbound route map to remove the MED attribute from incoming updates or set MED in all incoming updates to the same value. Alternatively, some platforms allow you to tweak the BGP route selection algorithm to ignore MED values. Set the BGP link bandwidth extended community on incoming BGP updates received from AS 65100 to influence the unequal-cost multipathing load-balancing ratio. That community is usually set in an inbound route map; some platforms allow you to set the default value per BGP neighbor. Enable BGP UCMP and configure your router to use the BGP link bandwidth community to calculate the relative amount of traffic sent over each link. Tip If you\u2019re not familiar with BGP route maps, do the Use MED to Influence Incoming Traffic Flow and Attach BGP Communities to Outgoing BGP Updates exercises first. Warning You might have to use a command similar to clear ip bgp * soft in to tell your router to ask its neighbors to resend their BGP updates after changing the inbound route maps. Verification Check the BGP table to verify that: All paths to the 10.1.3.0/24 prefix have the same MED value Your router uses all those paths as ECMP/UCMP paths. This is the printout you should get on Arista EOS: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending best path selection Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.1/32 - - - - 0 i * >Ec 10.1.3.0/24 10.1.0.2 100 - 100 0 65100 i * ec 10.1.3.0/24 10.1.0.6 100 - 100 0 65100 i Inspect the BGP information for the 10.1.3.0/24 prefix to verify that the BGP link bandwidth community is attached to individual paths. This is how Arista EOS displays that information: rtr#show ip bgp 10.1.3.0/24 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 10.1.3.0/24 Paths: 2 available 65100 10.1.0.2 from 10.1.0.2 (10.0.0.2) Origin IGP, metric 100, localpref 100, IGP metric 0, weight 0, tag 0 Received 00:33:58 ago, valid, external, ECMP head, ECMP, UCMP, best, ECMP contributor Extended Community: Link-Bandwidth-AS:65100:250.0 MBps Rx SAFI: Unicast 65100 10.1.0.6 from 10.1.0.6 (10.0.0.3) Origin IGP, metric 100, localpref 100, IGP metric 0, weight 0, tag 0 Received 00:33:58 ago, valid, external, ECMP, UCMP, ECMP contributor Extended Community: Link-Bandwidth-AS:65100:125.0 MBps Rx SAFI: Unicast Check the UCMP weights in the IP routing table. While this information might be challenging to get on some platforms, Arista EOS makes it very explicit: rtr#show ip route 10.1.3.0/24 ... B E 10.1.3.0/24 [200/100] via 10.1.0.2, Ethernet1, weight 2/3 via 10.1.0.6, Ethernet2, weight 1/3 Next: IBGP Load Balancing with BGP Link Bandwidth Reference Information This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Use any device supported by the netlab BGP configuration module for the customer router. This lab does not include automated validation. Git repository contains external router initial device configurations for Cumulus Linux. Lab Wiring Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2 Note You don\u2019t have to use the X1-X2 link, but you\u2019ll have to adjust the initial device configurations for X1 and X2 if you decide not to use it. Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.2/32 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 10.0.0.3/32 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1 The costs of the alternate paths are the same, thus ECMP, but the load-balancing algorithm uses unequal weights. \u21a9","title":"EBGP Load Balancing with BGP Link Bandwidth"},{"location":"lb/2-dmz-bw/#ebgp-load-balancing-with-bgp-link-bandwidth","text":"In the previous exercise , you configured Equal-Cost Multipathing (ECMP) between EBGP paths. ECMP results in your router sending approximately the same amount of traffic across all equal-cost links. That approach results in suboptimal performance if the links have different bandwidths, in which case you need Weighted ECMP 1 . Most BGP implementations support the BGP Link Bandwidth Extended Community , which can influence the load balancing ratios across links with unequal bandwidth. In this lab exercise, you\u2019ll ignore the Multi-Exit Discriminator metric the adjacent autonomous system uses to tell you to avoid the slower link and configure the BGP link bandwidth community to send less traffic over it than over the faster link.","title":"EBGP Load Balancing with BGP Link Bandwidth"},{"location":"lb/2-dmz-bw/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. Each router router advertises an IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 10.0.0.1/32 AS65100 x1 10.0.0.2 10.1.3.0/24 x2 10.0.0.3 10.1.3.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 rtr 10.0.0.1 65000 x1 65100 10.1.0.2 x2 65100 10.1.0.6","title":"Existing BGP Configuration"},{"location":"lb/2-dmz-bw/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to lb/2-dmz-bw Execute netlab up ( device requirements , other options ) Log into your router (RTR) with netlab connect rtr and verify that the IP addresses and the EBGP sessions are properly configured. Warning This lab exercise requires netlab release 1.6.4 or later.","title":"Start the Lab"},{"location":"lb/2-dmz-bw/#the-problem","text":"Log into your router and check its BGP table. It should have two paths for the prefix 10.1.3.0/24, but only one of them is used due to its lower MED value: rtr>show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending best path selection Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.1/32 - - - - 0 i * > 10.1.3.0/24 10.1.0.6 100 - 100 0 65100 i * 10.1.3.0/24 10.1.0.2 200 - 100 0 65100 i You would like to use both links toward AS 65100, preferably in a 2:1 ratio.","title":"The Problem"},{"location":"lb/2-dmz-bw/#configuration-tasks","text":"To implement unequal-cost multipathing, you have to: Configure ECMP load balancing for EBGP paths (see the Load Balancing across External BGP Paths exercise for more details). Make both paths toward 10.1.3.0/24 equal from the BGP path selection perspective. Use an inbound route map to remove the MED attribute from incoming updates or set MED in all incoming updates to the same value. Alternatively, some platforms allow you to tweak the BGP route selection algorithm to ignore MED values. Set the BGP link bandwidth extended community on incoming BGP updates received from AS 65100 to influence the unequal-cost multipathing load-balancing ratio. That community is usually set in an inbound route map; some platforms allow you to set the default value per BGP neighbor. Enable BGP UCMP and configure your router to use the BGP link bandwidth community to calculate the relative amount of traffic sent over each link. Tip If you\u2019re not familiar with BGP route maps, do the Use MED to Influence Incoming Traffic Flow and Attach BGP Communities to Outgoing BGP Updates exercises first. Warning You might have to use a command similar to clear ip bgp * soft in to tell your router to ask its neighbors to resend their BGP updates after changing the inbound route maps.","title":"Configuration Tasks"},{"location":"lb/2-dmz-bw/#verification","text":"Check the BGP table to verify that: All paths to the 10.1.3.0/24 prefix have the same MED value Your router uses all those paths as ECMP/UCMP paths. This is the printout you should get on Arista EOS: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending best path selection Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.1/32 - - - - 0 i * >Ec 10.1.3.0/24 10.1.0.2 100 - 100 0 65100 i * ec 10.1.3.0/24 10.1.0.6 100 - 100 0 65100 i Inspect the BGP information for the 10.1.3.0/24 prefix to verify that the BGP link bandwidth community is attached to individual paths. This is how Arista EOS displays that information: rtr#show ip bgp 10.1.3.0/24 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 10.1.3.0/24 Paths: 2 available 65100 10.1.0.2 from 10.1.0.2 (10.0.0.2) Origin IGP, metric 100, localpref 100, IGP metric 0, weight 0, tag 0 Received 00:33:58 ago, valid, external, ECMP head, ECMP, UCMP, best, ECMP contributor Extended Community: Link-Bandwidth-AS:65100:250.0 MBps Rx SAFI: Unicast 65100 10.1.0.6 from 10.1.0.6 (10.0.0.3) Origin IGP, metric 100, localpref 100, IGP metric 0, weight 0, tag 0 Received 00:33:58 ago, valid, external, ECMP, UCMP, ECMP contributor Extended Community: Link-Bandwidth-AS:65100:125.0 MBps Rx SAFI: Unicast Check the UCMP weights in the IP routing table. While this information might be challenging to get on some platforms, Arista EOS makes it very explicit: rtr#show ip route 10.1.3.0/24 ... B E 10.1.3.0/24 [200/100] via 10.1.0.2, Ethernet1, weight 2/3 via 10.1.0.6, Ethernet2, weight 1/3 Next: IBGP Load Balancing with BGP Link Bandwidth","title":"Verification"},{"location":"lb/2-dmz-bw/#reference-information","text":"This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"lb/2-dmz-bw/#req","text":"Use any device supported by the netlab BGP configuration module for the customer router. This lab does not include automated validation. Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"lb/2-dmz-bw/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2 Note You don\u2019t have to use the X1-X2 link, but you\u2019ll have to adjust the initial device configurations for X1 and X2 if you decide not to use it.","title":"Lab Wiring"},{"location":"lb/2-dmz-bw/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.2/32 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 10.0.0.3/32 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1 The costs of the alternate paths are the same, thus ECMP, but the load-balancing algorithm uses unequal weights. \u21a9","title":"Lab Addressing"},{"location":"lb/3-ibgp/","text":"IBGP Load Balancing with BGP Link Bandwidth In the previous lab exercise , you used the BGP Link Bandwidth extended community to implement unequal-cost load balancing across multiple links connected to the same router. In this exercise, you\u2019ll use the same approach but extend it across your autonomous system \u2014 routers receiving external routes over IBGP should perform unequal-cost multipathing (UCMP) toward external destinations based on the BGP Link Bandwidth extended community attached to BGP paths. Existing Router Configuration The routers in your lab use the following BGP AS numbers. X1 and X2 advertise a shared IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 core 10.0.0.1 we1 10.0.0.2 we2 10.0.0.3 AS65100 x1 10.0.0.4 10.1.3.0/24 x2 10.0.0.5 10.1.3.0/24 Your routers are running OSPF in the backbone area. They have these BGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 core 10.0.0.1 65000 we1 65000 10.0.0.2 we2 65000 10.0.0.3 we1 10.0.0.2 65000 core 65000 10.0.0.1 we2 65000 10.0.0.3 x1 65100 10.1.0.10 x1 65100 10.1.0.14 we2 10.0.0.3 65000 core 65000 10.0.0.1 we1 65000 10.0.0.2 x2 65100 10.1.0.18 netlab automatically configures IP addresses and routing protocols; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure your devices manually. Device Requirements Use any device supported by the netlab BGP configuration module for the customer- and provider routers. Git repository contains external router initial device configurations for Cumulus Linux. Start the Lab Assuming you already set up your lab infrastructure : Change directory to lb/3-ibgp Execute netlab up ( device requirements ) Log into your routers and verify that the IP addresses and the EBGP sessions are properly configured. Warning This lab exercise requires netlab release 1.6.4 or later. The Problem Log into the Core router and check its BGP table. It should have two paths for the 10.1.3.0/24 prefix. core#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending best path selection Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * >Ec 10.1.3.0/24 10.0.0.2 0 - 100 0 65100 i * ec 10.1.3.0/24 10.0.0.3 0 - 100 0 65100 i Configuring IBGP load balancing on the Core router will send half of the outgoing traffic for the 10.1.3.0/24 prefix each way. That\u2019s undesirable, as the WE1-X1 path has significantly more bandwidth than the WE2-X2 path. Configuration Tasks The simplest way to change the load balancing ratio on the Core router is to use the BGP Link Bandwidth extended community: Attach the BGP Link Bandwidth community to EBGP paths on WE1 and WE2 1 . The bandwidth on the WE1-X1 links is 10Gbps, and the WE2-X2 link has 4 Gbps. Configure UCMP load balancing on the Core router Configure propagation of extended communities between WE1, WE2, and Core routers 2 . On some devices, you\u2019ll also have to configure the propagation of the BGP Link Bandwidth community. If possible, aggregate the bandwidth on WE1 \u2013 it should advertise a single prefix with BGP Link Bandwidth set to 20 Gbps 3 . Tip You practiced the first two tasks in the EBGP Load Balancing with BGP Link Bandwidth exercise and the third one in the Attach BGP Communities to Outgoing BGP Updates exercise. Verification Log into the Core router and inspect the BGP prefix 10.1.3.0. The paths advertised by WE1 and WE2 should have the BGP Link Bandwidth community. The value advertised by WE1 should be set to 10 or 20 Gbps 4 (try to get it to 20 Gbps); the value advertised by WE2 should be 4 Gbps. core>show ip bgp 10.1.3.0/24 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 10.1.3.0/24 Paths: 2 available 65100 10.0.0.3 from 10.0.0.3 (10.0.0.3) Origin IGP, metric 0, localpref 100, IGP metric 20, weight 0, tag 0 Received 00:01:26 ago, valid, internal, ECMP head, ECMP, UCMP, best, ECMP contributor Extended Community: Link-Bandwidth-AS:65000:500.0 MBps Rx SAFI: Unicast 65100 10.0.0.2 from 10.0.0.2 (10.0.0.2) Origin IGP, metric 0, localpref 100, IGP metric 20, weight 0, tag 0 Received 00:00:27 ago, valid, internal, ECMP, UCMP, ECMP contributor Extended Community: Link-Bandwidth-AS:65000:2.5 GBps Rx SAFI: Unicast Check the prefix 10.1.3.0/24 in the IP routing table. The load balancing ratio displayed by the Core router depends on its implementation details, but you should observe an unequal traffic distribution. This is what you could get on an Arista cEOS container: core#show ip route 10.1.3.0 ... B I 10.1.3.0/24 [200/0] via 10.1.0.2, Ethernet1, weight 3/4 via 10.1.0.6, Ethernet2, weight 1/4 Next: IBGP Load Balancing with BGP Additional Paths Reference Information Lab Wiring Origin Device Origin Port Destination Device Destination Port core Ethernet1 we1 Ethernet1 core Ethernet2 we2 Ethernet1 we1 Ethernet2 x1 swp1 we1 Ethernet3 x1 swp2 we2 Ethernet2 x2 swp1 x1 swp3 x2 swp2 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description core 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 core -> we1 Ethernet2 10.1.0.5/30 core -> we2 we1 10.0.0.2/32 Loopback Ethernet1 10.1.0.2/30 we1 -> core Ethernet2 10.1.0.9/30 we1 -> x1 Ethernet3 10.1.0.13/30 we1 -> x1 we2 10.0.0.3/32 Loopback Ethernet1 10.1.0.6/30 we2 -> core Ethernet2 10.1.0.17/30 we2 -> x2 x1 10.0.0.4/32 Loopback swp1 10.1.0.10/30 x1 -> we1 swp2 10.1.0.14/30 x1 -> we1 swp3 10.1.0.21/30 x1 -> x2 x2 10.0.0.5/32 Loopback swp1 10.1.0.18/30 x2 -> we2 swp2 10.1.0.22/30 x2 -> x1 If possible, set the interface bandwidth on the Wan Edge routers and use a command that copies the interface bandwidth into the BGP Link Bandwidth community. \u21a9 Without this step, the Core router would not receive the BGP Link Bandwidth community WE1 and WE2 attached to the EBGP prefixes. \u21a9 You might have to configure EBGP load balancing on WE1; some implementations advertise only the usable bandwidth for a prefix, not the theoretical aggregate bandwidth. \u21a9 Some platforms display the BGP Link Bandwidth community in bytes per second. Multiply that value by eight to get the bps value. \u21a9","title":"IBGP Load Balancing with BGP Link Bandwidth"},{"location":"lb/3-ibgp/#ibgp-load-balancing-with-bgp-link-bandwidth","text":"In the previous lab exercise , you used the BGP Link Bandwidth extended community to implement unequal-cost load balancing across multiple links connected to the same router. In this exercise, you\u2019ll use the same approach but extend it across your autonomous system \u2014 routers receiving external routes over IBGP should perform unequal-cost multipathing (UCMP) toward external destinations based on the BGP Link Bandwidth extended community attached to BGP paths.","title":"IBGP Load Balancing with BGP Link Bandwidth"},{"location":"lb/3-ibgp/#existing-router-configuration","text":"The routers in your lab use the following BGP AS numbers. X1 and X2 advertise a shared IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 core 10.0.0.1 we1 10.0.0.2 we2 10.0.0.3 AS65100 x1 10.0.0.4 10.1.3.0/24 x2 10.0.0.5 10.1.3.0/24 Your routers are running OSPF in the backbone area. They have these BGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 core 10.0.0.1 65000 we1 65000 10.0.0.2 we2 65000 10.0.0.3 we1 10.0.0.2 65000 core 65000 10.0.0.1 we2 65000 10.0.0.3 x1 65100 10.1.0.10 x1 65100 10.1.0.14 we2 10.0.0.3 65000 core 65000 10.0.0.1 we1 65000 10.0.0.2 x2 65100 10.1.0.18 netlab automatically configures IP addresses and routing protocols; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure your devices manually.","title":"Existing Router Configuration"},{"location":"lb/3-ibgp/#req","text":"Use any device supported by the netlab BGP configuration module for the customer- and provider routers. Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"lb/3-ibgp/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to lb/3-ibgp Execute netlab up ( device requirements ) Log into your routers and verify that the IP addresses and the EBGP sessions are properly configured. Warning This lab exercise requires netlab release 1.6.4 or later.","title":"Start the Lab"},{"location":"lb/3-ibgp/#the-problem","text":"Log into the Core router and check its BGP table. It should have two paths for the 10.1.3.0/24 prefix. core#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending best path selection Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * >Ec 10.1.3.0/24 10.0.0.2 0 - 100 0 65100 i * ec 10.1.3.0/24 10.0.0.3 0 - 100 0 65100 i Configuring IBGP load balancing on the Core router will send half of the outgoing traffic for the 10.1.3.0/24 prefix each way. That\u2019s undesirable, as the WE1-X1 path has significantly more bandwidth than the WE2-X2 path.","title":"The Problem"},{"location":"lb/3-ibgp/#configuration-tasks","text":"The simplest way to change the load balancing ratio on the Core router is to use the BGP Link Bandwidth extended community: Attach the BGP Link Bandwidth community to EBGP paths on WE1 and WE2 1 . The bandwidth on the WE1-X1 links is 10Gbps, and the WE2-X2 link has 4 Gbps. Configure UCMP load balancing on the Core router Configure propagation of extended communities between WE1, WE2, and Core routers 2 . On some devices, you\u2019ll also have to configure the propagation of the BGP Link Bandwidth community. If possible, aggregate the bandwidth on WE1 \u2013 it should advertise a single prefix with BGP Link Bandwidth set to 20 Gbps 3 . Tip You practiced the first two tasks in the EBGP Load Balancing with BGP Link Bandwidth exercise and the third one in the Attach BGP Communities to Outgoing BGP Updates exercise.","title":"Configuration Tasks"},{"location":"lb/3-ibgp/#verification","text":"Log into the Core router and inspect the BGP prefix 10.1.3.0. The paths advertised by WE1 and WE2 should have the BGP Link Bandwidth community. The value advertised by WE1 should be set to 10 or 20 Gbps 4 (try to get it to 20 Gbps); the value advertised by WE2 should be 4 Gbps. core>show ip bgp 10.1.3.0/24 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 10.1.3.0/24 Paths: 2 available 65100 10.0.0.3 from 10.0.0.3 (10.0.0.3) Origin IGP, metric 0, localpref 100, IGP metric 20, weight 0, tag 0 Received 00:01:26 ago, valid, internal, ECMP head, ECMP, UCMP, best, ECMP contributor Extended Community: Link-Bandwidth-AS:65000:500.0 MBps Rx SAFI: Unicast 65100 10.0.0.2 from 10.0.0.2 (10.0.0.2) Origin IGP, metric 0, localpref 100, IGP metric 20, weight 0, tag 0 Received 00:00:27 ago, valid, internal, ECMP, UCMP, ECMP contributor Extended Community: Link-Bandwidth-AS:65000:2.5 GBps Rx SAFI: Unicast Check the prefix 10.1.3.0/24 in the IP routing table. The load balancing ratio displayed by the Core router depends on its implementation details, but you should observe an unequal traffic distribution. This is what you could get on an Arista cEOS container: core#show ip route 10.1.3.0 ... B I 10.1.3.0/24 [200/0] via 10.1.0.2, Ethernet1, weight 3/4 via 10.1.0.6, Ethernet2, weight 1/4 Next: IBGP Load Balancing with BGP Additional Paths","title":"Verification"},{"location":"lb/3-ibgp/#reference-information","text":"","title":"Reference Information"},{"location":"lb/3-ibgp/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port core Ethernet1 we1 Ethernet1 core Ethernet2 we2 Ethernet1 we1 Ethernet2 x1 swp1 we1 Ethernet3 x1 swp2 we2 Ethernet2 x2 swp1 x1 swp3 x2 swp2","title":"Lab Wiring"},{"location":"lb/3-ibgp/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description core 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 core -> we1 Ethernet2 10.1.0.5/30 core -> we2 we1 10.0.0.2/32 Loopback Ethernet1 10.1.0.2/30 we1 -> core Ethernet2 10.1.0.9/30 we1 -> x1 Ethernet3 10.1.0.13/30 we1 -> x1 we2 10.0.0.3/32 Loopback Ethernet1 10.1.0.6/30 we2 -> core Ethernet2 10.1.0.17/30 we2 -> x2 x1 10.0.0.4/32 Loopback swp1 10.1.0.10/30 x1 -> we1 swp2 10.1.0.14/30 x1 -> we1 swp3 10.1.0.21/30 x1 -> x2 x2 10.0.0.5/32 Loopback swp1 10.1.0.18/30 x2 -> we2 swp2 10.1.0.22/30 x2 -> x1 If possible, set the interface bandwidth on the Wan Edge routers and use a command that copies the interface bandwidth into the BGP Link Bandwidth community. \u21a9 Without this step, the Core router would not receive the BGP Link Bandwidth community WE1 and WE2 attached to the EBGP prefixes. \u21a9 You might have to configure EBGP load balancing on WE1; some implementations advertise only the usable bandwidth for a prefix, not the theoretical aggregate bandwidth. \u21a9 Some platforms display the BGP Link Bandwidth community in bytes per second. Multiply that value by eight to get the bps value. \u21a9","title":"Lab Addressing"},{"location":"lb/4-ibgp-add-path/","text":"IBGP Load Balancing with BGP Additional Paths In the previous lab exercise , you implemented IBGP load balancing across prefixes received by two WAN edge routers. The load balancing worked because you did not use BGP route reflectors in your autonomous system. Like any other BGP router, BGP route reflectors send their best routes to their clients; in your network, the IBGP clients of the BGP route reflector receive a single path to the external prefix. You can use the BGP Additional Paths functionality to make the BGP route reflector send more than one BGP path for the same IP prefix to its clients, resulting in IBGP load balancing on BGP route reflector clients. You\u2019ll practice that in this lab exercise. Existing Device Configuration The routers in your lab use the following BGP AS numbers. Each router router advertises an IPv4 prefix. Node/ASN Router ID BGP RR Advertised prefixes AS65000 ac1 10.0.0.4 rr 10.0.0.3 \u2705 we1 10.0.0.1 we2 10.0.0.2 AS65100 x1 10.0.0.10 192.168.42.0/24 x2 10.0.0.11 192.168.42.0/24 Your routers (RR and AC1) have these EBGP neighbors. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 ac1 10.0.0.4 65000 rr 65000 10.0.0.3 rr 10.0.0.3 65000 we1 65000 10.0.0.1 we2 65000 10.0.0.2 ac1 65000 10.0.0.4 All routers run OSPF in the backbone area on intra-AS interfaces. netlab automatically configures device interfaces, OSPF, and BGP; if you\u2019re using another lab infrastructure, you\u2019ll have to configure lab devices manually. Device Requirements Use any device supported by the netlab BGP configuration module for AC1 and RR. Use a device on which netlab supports BGP link bandwidth attribute (for example, FRR, Cumulus Linux, or Arista EOS) for external devices (X1, X2, WE1, WE2) Git repository contains Cumulus Linux configurations for X1, X2, WE1, and WE2. Start the Lab Assuming you already set up your lab infrastructure : Change directory to lb/4-ibgp-add-path Execute netlab up Log into your devices with netlab connect and verify that the IP addresses, OSPF, and EBGP sessions are properly configured. Warning This lab exercise requires netlab release 1.8.3 or later. The Problem The BGP route reflector (RR) receives a path toward 192.168.42.0/24 (with BGP link bandwidth) from WE1 and WE2 and could do weighted load balancing across the two paths if configured to do so (see IBGP Load Balancing with BGP Link Bandwidth for more details): rr>show ip bgp 192.168.42.0 BGP routing table information for VRF default Router identifier 10.0.0.3, local AS number 65000 BGP routing table entry for 192.168.42.0/24 Paths: 2 available 65100 (Received from a RR-client) 10.0.0.1 from 10.0.0.1 (10.0.0.1) Origin IGP, metric 0, localpref 100, IGP metric 10, weight 0, tag 0 Received 00:48:45 ago, valid, internal, best Extended Community: 0004-AS:65000:125000000 Rx SAFI: Unicast 65100 (Received from a RR-client) 10.0.0.2 from 10.0.0.2 (10.0.0.2) Origin IGP, metric 0, localpref 100, IGP metric 10, weight 0, tag 0 Received 00:48:40 ago, valid, internal Extended Community: 0004-AS:65000:250000000 Rx SAFI: Unicast The BGP routing process in the BGP route reflector selects a single best path and advertises it to its clients. AC1, therefore, receives one of the paths advertised by WE1 and WE2 and never uses more than one exit point from AS 65000. Even worse, all route reflector clients use the same exit point. ac1>show ip bgp 192.168.42.0 BGP routing table information for VRF default Router identifier 10.0.0.4, local AS number 65000 BGP routing table entry for 192.168.42.0/24 Paths: 1 available 65100 10.0.0.1 from 10.0.0.3 (10.0.0.3) Origin IGP, metric 0, localpref 100, IGP metric 10, weight 0, tag 0 Received 00:50:18 ago, valid, internal, best Originator: 10.0.0.1, Cluster list: 10.0.0.3 Extended Community: 0004-AS:65000:125000000 Rx SAFI: Unicast Note Most BGP implementations do not consider the BGP link bandwidth attribute when selecting the best path. The path advertised to the route reflector clients could be the worst path toward an external destination. To enable load balancing in our network, we need the capability to advertise more than just the best BGP path to route reflector clients \u2013 the BGP Additional Paths functionality. Configuration Tasks BGP Additional Paths is an optional functionality that must turned on with a configuration command and negotiated between BGP neighbors. Some BGP implementations have granular control over the sending and receiving of additional paths and the ability to select which paths to send. We\u2019ll use the most straightforward approach: Configure RR to send additional paths to all route reflector clients using a configuration command similar to neighbor additional-paths . RR does not have to receive additional paths; we expect all edge routers to send a single best path. If needed, configure AC1 to accept additional paths. (Optional) Configure IBGP load balancing on RR and AC1 using commands you mastered in the IBGP Load Balancing with BGP Link Bandwidth exercise. Warning Configuring BGP Additional Paths on a BGP neighbor tears down the BGP session as the additional capability has to be negotiated. Schedule a maintenance window before introducing BGP Additional Paths into a production network. Verification After configuring BGP Additional Paths on AC1 and RR, you should see two paths for the prefix 192.168.42.0/24 in the BGP table on AC1: ac1#show ip bgp 192.168.42.0 BGP routing table information for VRF default Router identifier 10.0.0.4, local AS number 65000 BGP routing table entry for 192.168.42.0/24 Paths: 2 available 65100 10.0.0.1 from 10.0.0.3 (10.0.0.3) Origin IGP, metric 0, localpref 100, IGP metric 10, weight 0, tag 0 Received 00:05:12 ago, valid, internal, ECMP head, ECMP, best, ECMP contributor Originator: 10.0.0.1, Cluster list: 10.0.0.3 Extended Community: 0004-AS:65000:125000000 Rx path id: 0x2 Rx SAFI: Unicast 65100 10.0.0.2 from 10.0.0.3 (10.0.0.3) Origin IGP, metric 0, localpref 100, IGP metric 10, weight 0, tag 0 Received 00:05:12 ago, valid, internal, ECMP, ECMP contributor Originator: 10.0.0.2, Cluster list: 10.0.0.3 Extended Community: 0004-AS:65000:250000000 Rx path id: 0x3 Rx SAFI: Unicast Tip A new BGP attribute ( Rx path id ) is attached to the BGP paths in the AC1 BGP table. The BGP Additional Paths functionality extends the IP prefixes with a unique path ID to make them distinct. You can also inspect the capabilities negotiated with the BGP neighbors on RR: BGP Additional Paths receive capability should be advertised to all neighbors but not negotiated with any of them (because they are not expected to send additional paths) BGP Additional Paths send capability should be negotiated with AC1 and might be negotiated with WE1 and WE2 based on their default settings. This is the printout you would get on Arista EOS when using Cumulus Linux on WE1 and WE2 (the printout was significantly shortened and includes only the relevant information): rr#show ip bgp neighbors BGP neighbor is 10.0.0.1, remote AS 65000, internal link Description: we1 ... Neighbor Capabilities: Multiprotocol IPv4 Unicast: advertised and received and negotiated Four Octet ASN: advertised and received and negotiated Route Refresh: advertised and received and negotiated Enhanced route refresh: advertised Send End-of-RIB messages: advertised and received and negotiated Additional-paths recv capability: IPv4 Unicast: advertised Additional-paths send capability: IPv4 Unicast: negotiated ... BGP neighbor is 10.0.0.4, remote AS 65000, internal link Description: ac1 ... Neighbor Capabilities: Multiprotocol IPv4 Unicast: advertised and received and negotiated Four Octet ASN: advertised and received and negotiated Route Refresh: advertised and received and negotiated Enhanced route refresh: advertised and received and negotiated Send End-of-RIB messages: advertised and received and negotiated Additional-paths recv capability: IPv4 Unicast: advertised Additional-paths send capability: IPv4 Unicast: negotiated Reference Information Lab Wiring Origin Device Origin Port Destination Device Destination Port we1 swp1 x1 swp1 we2 swp1 x2 swp1 ac1 Ethernet1 we1 swp2 ac1 Ethernet2 we2 swp2 rr Ethernet1 we1 swp3 rr Ethernet2 we2 swp3 x1 swp2 x2 swp2 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description ac1 10.0.0.4/32 Loopback Ethernet1 10.1.0.9/30 ac1 -> we1 Ethernet2 10.1.0.13/30 ac1 -> we2 rr 10.0.0.3/32 Loopback Ethernet1 10.1.0.17/30 rr -> we1 Ethernet2 10.1.0.21/30 rr -> we2 we1 10.0.0.1/32 Loopback swp1 10.1.0.1/30 we1 -> x1 swp2 10.1.0.10/30 we1 -> ac1 swp3 10.1.0.18/30 we1 -> rr we2 10.0.0.2/32 Loopback swp1 10.1.0.5/30 we2 -> x2 swp2 10.1.0.14/30 we2 -> ac1 swp3 10.1.0.22/30 we2 -> rr x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> we1 swp2 192.168.42.1/24 x1 -> x2 x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> we2 swp2 192.168.42.2/24 x2 -> x1","title":"IBGP Load Balancing with BGP Additional Paths"},{"location":"lb/4-ibgp-add-path/#ibgp-load-balancing-with-bgp-additional-paths","text":"In the previous lab exercise , you implemented IBGP load balancing across prefixes received by two WAN edge routers. The load balancing worked because you did not use BGP route reflectors in your autonomous system. Like any other BGP router, BGP route reflectors send their best routes to their clients; in your network, the IBGP clients of the BGP route reflector receive a single path to the external prefix. You can use the BGP Additional Paths functionality to make the BGP route reflector send more than one BGP path for the same IP prefix to its clients, resulting in IBGP load balancing on BGP route reflector clients. You\u2019ll practice that in this lab exercise.","title":"IBGP Load Balancing with BGP Additional Paths"},{"location":"lb/4-ibgp-add-path/#existing-device-configuration","text":"The routers in your lab use the following BGP AS numbers. Each router router advertises an IPv4 prefix. Node/ASN Router ID BGP RR Advertised prefixes AS65000 ac1 10.0.0.4 rr 10.0.0.3 \u2705 we1 10.0.0.1 we2 10.0.0.2 AS65100 x1 10.0.0.10 192.168.42.0/24 x2 10.0.0.11 192.168.42.0/24 Your routers (RR and AC1) have these EBGP neighbors. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 ac1 10.0.0.4 65000 rr 65000 10.0.0.3 rr 10.0.0.3 65000 we1 65000 10.0.0.1 we2 65000 10.0.0.2 ac1 65000 10.0.0.4 All routers run OSPF in the backbone area on intra-AS interfaces. netlab automatically configures device interfaces, OSPF, and BGP; if you\u2019re using another lab infrastructure, you\u2019ll have to configure lab devices manually.","title":"Existing Device Configuration"},{"location":"lb/4-ibgp-add-path/#device-requirements","text":"Use any device supported by the netlab BGP configuration module for AC1 and RR. Use a device on which netlab supports BGP link bandwidth attribute (for example, FRR, Cumulus Linux, or Arista EOS) for external devices (X1, X2, WE1, WE2) Git repository contains Cumulus Linux configurations for X1, X2, WE1, and WE2.","title":"Device Requirements"},{"location":"lb/4-ibgp-add-path/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to lb/4-ibgp-add-path Execute netlab up Log into your devices with netlab connect and verify that the IP addresses, OSPF, and EBGP sessions are properly configured. Warning This lab exercise requires netlab release 1.8.3 or later.","title":"Start the Lab"},{"location":"lb/4-ibgp-add-path/#the-problem","text":"The BGP route reflector (RR) receives a path toward 192.168.42.0/24 (with BGP link bandwidth) from WE1 and WE2 and could do weighted load balancing across the two paths if configured to do so (see IBGP Load Balancing with BGP Link Bandwidth for more details): rr>show ip bgp 192.168.42.0 BGP routing table information for VRF default Router identifier 10.0.0.3, local AS number 65000 BGP routing table entry for 192.168.42.0/24 Paths: 2 available 65100 (Received from a RR-client) 10.0.0.1 from 10.0.0.1 (10.0.0.1) Origin IGP, metric 0, localpref 100, IGP metric 10, weight 0, tag 0 Received 00:48:45 ago, valid, internal, best Extended Community: 0004-AS:65000:125000000 Rx SAFI: Unicast 65100 (Received from a RR-client) 10.0.0.2 from 10.0.0.2 (10.0.0.2) Origin IGP, metric 0, localpref 100, IGP metric 10, weight 0, tag 0 Received 00:48:40 ago, valid, internal Extended Community: 0004-AS:65000:250000000 Rx SAFI: Unicast The BGP routing process in the BGP route reflector selects a single best path and advertises it to its clients. AC1, therefore, receives one of the paths advertised by WE1 and WE2 and never uses more than one exit point from AS 65000. Even worse, all route reflector clients use the same exit point. ac1>show ip bgp 192.168.42.0 BGP routing table information for VRF default Router identifier 10.0.0.4, local AS number 65000 BGP routing table entry for 192.168.42.0/24 Paths: 1 available 65100 10.0.0.1 from 10.0.0.3 (10.0.0.3) Origin IGP, metric 0, localpref 100, IGP metric 10, weight 0, tag 0 Received 00:50:18 ago, valid, internal, best Originator: 10.0.0.1, Cluster list: 10.0.0.3 Extended Community: 0004-AS:65000:125000000 Rx SAFI: Unicast Note Most BGP implementations do not consider the BGP link bandwidth attribute when selecting the best path. The path advertised to the route reflector clients could be the worst path toward an external destination. To enable load balancing in our network, we need the capability to advertise more than just the best BGP path to route reflector clients \u2013 the BGP Additional Paths functionality.","title":"The Problem"},{"location":"lb/4-ibgp-add-path/#configuration-tasks","text":"BGP Additional Paths is an optional functionality that must turned on with a configuration command and negotiated between BGP neighbors. Some BGP implementations have granular control over the sending and receiving of additional paths and the ability to select which paths to send. We\u2019ll use the most straightforward approach: Configure RR to send additional paths to all route reflector clients using a configuration command similar to neighbor additional-paths . RR does not have to receive additional paths; we expect all edge routers to send a single best path. If needed, configure AC1 to accept additional paths. (Optional) Configure IBGP load balancing on RR and AC1 using commands you mastered in the IBGP Load Balancing with BGP Link Bandwidth exercise. Warning Configuring BGP Additional Paths on a BGP neighbor tears down the BGP session as the additional capability has to be negotiated. Schedule a maintenance window before introducing BGP Additional Paths into a production network.","title":"Configuration Tasks"},{"location":"lb/4-ibgp-add-path/#verification","text":"After configuring BGP Additional Paths on AC1 and RR, you should see two paths for the prefix 192.168.42.0/24 in the BGP table on AC1: ac1#show ip bgp 192.168.42.0 BGP routing table information for VRF default Router identifier 10.0.0.4, local AS number 65000 BGP routing table entry for 192.168.42.0/24 Paths: 2 available 65100 10.0.0.1 from 10.0.0.3 (10.0.0.3) Origin IGP, metric 0, localpref 100, IGP metric 10, weight 0, tag 0 Received 00:05:12 ago, valid, internal, ECMP head, ECMP, best, ECMP contributor Originator: 10.0.0.1, Cluster list: 10.0.0.3 Extended Community: 0004-AS:65000:125000000 Rx path id: 0x2 Rx SAFI: Unicast 65100 10.0.0.2 from 10.0.0.3 (10.0.0.3) Origin IGP, metric 0, localpref 100, IGP metric 10, weight 0, tag 0 Received 00:05:12 ago, valid, internal, ECMP, ECMP contributor Originator: 10.0.0.2, Cluster list: 10.0.0.3 Extended Community: 0004-AS:65000:250000000 Rx path id: 0x3 Rx SAFI: Unicast Tip A new BGP attribute ( Rx path id ) is attached to the BGP paths in the AC1 BGP table. The BGP Additional Paths functionality extends the IP prefixes with a unique path ID to make them distinct. You can also inspect the capabilities negotiated with the BGP neighbors on RR: BGP Additional Paths receive capability should be advertised to all neighbors but not negotiated with any of them (because they are not expected to send additional paths) BGP Additional Paths send capability should be negotiated with AC1 and might be negotiated with WE1 and WE2 based on their default settings. This is the printout you would get on Arista EOS when using Cumulus Linux on WE1 and WE2 (the printout was significantly shortened and includes only the relevant information): rr#show ip bgp neighbors BGP neighbor is 10.0.0.1, remote AS 65000, internal link Description: we1 ... Neighbor Capabilities: Multiprotocol IPv4 Unicast: advertised and received and negotiated Four Octet ASN: advertised and received and negotiated Route Refresh: advertised and received and negotiated Enhanced route refresh: advertised Send End-of-RIB messages: advertised and received and negotiated Additional-paths recv capability: IPv4 Unicast: advertised Additional-paths send capability: IPv4 Unicast: negotiated ... BGP neighbor is 10.0.0.4, remote AS 65000, internal link Description: ac1 ... Neighbor Capabilities: Multiprotocol IPv4 Unicast: advertised and received and negotiated Four Octet ASN: advertised and received and negotiated Route Refresh: advertised and received and negotiated Enhanced route refresh: advertised and received and negotiated Send End-of-RIB messages: advertised and received and negotiated Additional-paths recv capability: IPv4 Unicast: advertised Additional-paths send capability: IPv4 Unicast: negotiated","title":"Verification"},{"location":"lb/4-ibgp-add-path/#reference-information","text":"","title":"Reference Information"},{"location":"lb/4-ibgp-add-path/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port we1 swp1 x1 swp1 we2 swp1 x2 swp1 ac1 Ethernet1 we1 swp2 ac1 Ethernet2 we2 swp2 rr Ethernet1 we1 swp3 rr Ethernet2 we2 swp3 x1 swp2 x2 swp2","title":"Lab Wiring"},{"location":"lb/4-ibgp-add-path/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description ac1 10.0.0.4/32 Loopback Ethernet1 10.1.0.9/30 ac1 -> we1 Ethernet2 10.1.0.13/30 ac1 -> we2 rr 10.0.0.3/32 Loopback Ethernet1 10.1.0.17/30 rr -> we1 Ethernet2 10.1.0.21/30 rr -> we2 we1 10.0.0.1/32 Loopback swp1 10.1.0.1/30 we1 -> x1 swp2 10.1.0.10/30 we1 -> ac1 swp3 10.1.0.18/30 we1 -> rr we2 10.0.0.2/32 Loopback swp1 10.1.0.5/30 we2 -> x2 swp2 10.1.0.14/30 we2 -> ac1 swp3 10.1.0.22/30 we2 -> rr x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> we1 swp2 192.168.42.1/24 x1 -> x2 x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> we2 swp2 192.168.42.2/24 x2 -> x1","title":"Lab Addressing"},{"location":"policy/","text":"BGP Routing Policies These lab exercises will help you master the essential tools you can use in BGP routing policies. You will also be able to practice creating more complex routing policies. The labs are grouped into three sections: Filtering BGP updates Adjusting outgoing traffic flow Influencing incoming traffic flow Filtering BGP Updates The first thing you should do when you use BGP to connect to the public Internet is limit the information you advertise to your neighbors to the prefixes you own. These labs will help you get there: Prevent route leaking between upstream providers with an AS-path filter Filter prefixes advertised by your autonomous system with a prefix list Minimize the size of your BGP table with inbound filters Use No-Export Community to Filter Transit Routes Use Outbound Route Filters (ORF) for IP Prefixes Adjusting Outgoing (Egress) Traffic Flow It\u2019s relatively easy to change how traffic leaves your network (autonomous system) \u2013 you have to modify the BGP- and routing tables on your routers. These labs \u2013 ranging from simple one-router scenarios to complex network-wide policies \u2013 will help you master the BGP tools you can use to get the job done: Use BGP weights to prefer one of the upstream providers Implement a consistent AS-wide routing policy with BGP local preference. Once you master the basics, you\u2019ll be ready for more complex scenarios: Influencing Incoming (Ingress) Traffic Flow Trying to persuade neighboring autonomous systems to change how they send you the traffic is much more complicated than changing the routing in your network. While there\u2019s no definitive one-size-fits-all solution, you will find these tools indispensable: Use MED to Influence Incoming Traffic Flow Use AS-Path Prepending to Influence Incoming Traffic Flow Attach BGP Communities to Outgoing BGP Updates Resolve BGP Wedgies Use Disaggregated Prefixes to Select the Primary Link More Complex Routing Policies You use these labs to practice how to use a combination of BGP attributes and routing policy tools to build more complex routing policies: Use BGP Communities in Routing Policies . This exercise combines BGP community lists, route maps, and the BGP local preference. Use the backup link to reach the adjacent autonomous system . This exercise combines AS-path filters, prefix lists, route maps, and the BGP local preference. BGP Policy Templates In this exercise, you\u2019ll learn how to create scalable BGP policy deployments using a combination of AS-path filters, prefix lists, and BGP communities.","title":"Overview"},{"location":"policy/#bgp-routing-policies","text":"These lab exercises will help you master the essential tools you can use in BGP routing policies. You will also be able to practice creating more complex routing policies. The labs are grouped into three sections: Filtering BGP updates Adjusting outgoing traffic flow Influencing incoming traffic flow","title":"BGP Routing Policies"},{"location":"policy/#filter","text":"The first thing you should do when you use BGP to connect to the public Internet is limit the information you advertise to your neighbors to the prefixes you own. These labs will help you get there: Prevent route leaking between upstream providers with an AS-path filter Filter prefixes advertised by your autonomous system with a prefix list Minimize the size of your BGP table with inbound filters Use No-Export Community to Filter Transit Routes Use Outbound Route Filters (ORF) for IP Prefixes","title":"Filtering BGP Updates"},{"location":"policy/#egress","text":"It\u2019s relatively easy to change how traffic leaves your network (autonomous system) \u2013 you have to modify the BGP- and routing tables on your routers. These labs \u2013 ranging from simple one-router scenarios to complex network-wide policies \u2013 will help you master the BGP tools you can use to get the job done: Use BGP weights to prefer one of the upstream providers Implement a consistent AS-wide routing policy with BGP local preference. Once you master the basics, you\u2019ll be ready for more complex scenarios:","title":"Adjusting Outgoing (Egress) Traffic Flow"},{"location":"policy/#ingress","text":"Trying to persuade neighboring autonomous systems to change how they send you the traffic is much more complicated than changing the routing in your network. While there\u2019s no definitive one-size-fits-all solution, you will find these tools indispensable: Use MED to Influence Incoming Traffic Flow Use AS-Path Prepending to Influence Incoming Traffic Flow Attach BGP Communities to Outgoing BGP Updates Resolve BGP Wedgies Use Disaggregated Prefixes to Select the Primary Link","title":"Influencing Incoming (Ingress) Traffic Flow"},{"location":"policy/#complex","text":"You use these labs to practice how to use a combination of BGP attributes and routing policy tools to build more complex routing policies: Use BGP Communities in Routing Policies . This exercise combines BGP community lists, route maps, and the BGP local preference. Use the backup link to reach the adjacent autonomous system . This exercise combines AS-path filters, prefix lists, route maps, and the BGP local preference. BGP Policy Templates In this exercise, you\u2019ll learn how to create scalable BGP policy deployments using a combination of AS-path filters, prefix lists, and BGP communities.","title":"More Complex Routing Policies"},{"location":"policy/1-weights/","text":"Select Preferred EBGP Peer with Weights In the previous lab exercises, you configured EBGP sessions with two routers belonging to upstream ISPs and advertised your IPv4 prefixes to them . Now, imagine that you want to use one of the uplinks just for backup purposes \u2013 it might be either too slow or too expensive for regular use. In this lab, you\u2019ll modify your BGP configuration to ensure your router always prefers routes advertised by X1 (ISP-1). Existing BGP Configuration The routers in your lab use the following BGP AS numbers. Each autonomous system advertises an IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to manually configure EBGP neighbors and advertised prefixes. Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101 Start the Lab Assuming you already set up your lab infrastructure : Change directory to policy/1-weights Execute netlab up ( device requirements , other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab , continue with the configuration you made during the previous exercise . Configuration Tasks You want your device to prefer routes advertised by X1 over those by X2. For example, the route for X2\u2019s loopback interface should use X1 as the next hop. Many BGP implementations use a mechanism called weight (usually applied per neighbor) to prefer routes advertised by one of the BGP peers. If your device supports BGP weights , use them to prefer routes advertised by X1. Otherwise, you\u2019ll have to use BGP local preference to achieve the same result. Warning Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table as the new parameters might be evaluated only on new incoming updates \u2013 you might have to use a command similar to clear ip bgp * soft in to tell your router to ask its neighbors to resend their BGP updates. Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on your router. The validation tests check: The state of the EBGP session between RTR and X1/X2. Whether RTR receives the prefix from X2 (192.168.101.0/24). Whether RTR uses X1 as the next hop for the prefix advertised by X2. This is the printout you could get when trying to validate an incomplete solution: You can also examine the BGP table on your router to verify that the routes advertised by X1 (next hop: 10.1.0.2) are the best (active) routes. This is a printout you should get on Arista EOS: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 200 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 100 65101 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.100.0/24 10.1.0.2 0 - 100 200 65100 i * 192.168.100.0/24 10.1.0.6 0 - 100 100 65101 65100 i * > 192.168.101.0/24 10.1.0.2 0 - 100 200 65100 65101 i * 192.168.101.0/24 10.1.0.6 0 - 100 100 65101 i You could dig deeper and examine the details of an IPv4 prefix that originated in AS 65101 (X2), for example, 192.168.101.0/24. Yet again, the next hop of the best path should be X1 (10.1.0.2) rtr#show ip bgp 192.168.101.0/24 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 192.168.101.0/24 Paths: 2 available 65100 65101 10.1.0.2 from 10.1.0.2 (10.0.0.10) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 200, tag 0 Received 00:00:46 ago, valid, external, best Rx SAFI: Unicast 65101 10.1.0.6 from 10.1.0.6 (10.0.0.11) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 100, tag 0 Received 00:00:46 ago, valid, external Rx SAFI: Unicast Next : If you still need to learn how to use AS-path filters to stop advertising transit routes , do it now. If you\u2019re more interested in building more extensive BGP-based networks , use BGP local preference to implement a consistent AS-wide routing policy. Reference Information This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Customer router: use any device supported by the netlab BGP configuration module . External routers need support for default route origination . If you want to use an unsupported device as an external router, remove the bgp.originate attribute from the lab topology. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on the customer router. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux. Lab Wiring Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 192.168.101.1/24 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1","title":"Select Preferred EBGP Peer with Weights"},{"location":"policy/1-weights/#select-preferred-ebgp-peer-with-weights","text":"In the previous lab exercises, you configured EBGP sessions with two routers belonging to upstream ISPs and advertised your IPv4 prefixes to them . Now, imagine that you want to use one of the uplinks just for backup purposes \u2013 it might be either too slow or too expensive for regular use. In this lab, you\u2019ll modify your BGP configuration to ensure your router always prefers routes advertised by X1 (ISP-1).","title":"Select Preferred EBGP Peer with Weights"},{"location":"policy/1-weights/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. Each autonomous system advertises an IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to manually configure EBGP neighbors and advertised prefixes. Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101","title":"Existing BGP Configuration"},{"location":"policy/1-weights/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to policy/1-weights Execute netlab up ( device requirements , other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab , continue with the configuration you made during the previous exercise .","title":"Start the Lab"},{"location":"policy/1-weights/#configuration-tasks","text":"You want your device to prefer routes advertised by X1 over those by X2. For example, the route for X2\u2019s loopback interface should use X1 as the next hop. Many BGP implementations use a mechanism called weight (usually applied per neighbor) to prefer routes advertised by one of the BGP peers. If your device supports BGP weights , use them to prefer routes advertised by X1. Otherwise, you\u2019ll have to use BGP local preference to achieve the same result. Warning Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table as the new parameters might be evaluated only on new incoming updates \u2013 you might have to use a command similar to clear ip bgp * soft in to tell your router to ask its neighbors to resend their BGP updates.","title":"Configuration Tasks"},{"location":"policy/1-weights/#verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on your router. The validation tests check: The state of the EBGP session between RTR and X1/X2. Whether RTR receives the prefix from X2 (192.168.101.0/24). Whether RTR uses X1 as the next hop for the prefix advertised by X2. This is the printout you could get when trying to validate an incomplete solution: You can also examine the BGP table on your router to verify that the routes advertised by X1 (next hop: 10.1.0.2) are the best (active) routes. This is a printout you should get on Arista EOS: rtr#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 200 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 100 65101 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.100.0/24 10.1.0.2 0 - 100 200 65100 i * 192.168.100.0/24 10.1.0.6 0 - 100 100 65101 65100 i * > 192.168.101.0/24 10.1.0.2 0 - 100 200 65100 65101 i * 192.168.101.0/24 10.1.0.6 0 - 100 100 65101 i You could dig deeper and examine the details of an IPv4 prefix that originated in AS 65101 (X2), for example, 192.168.101.0/24. Yet again, the next hop of the best path should be X1 (10.1.0.2) rtr#show ip bgp 192.168.101.0/24 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 192.168.101.0/24 Paths: 2 available 65100 65101 10.1.0.2 from 10.1.0.2 (10.0.0.10) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 200, tag 0 Received 00:00:46 ago, valid, external, best Rx SAFI: Unicast 65101 10.1.0.6 from 10.1.0.6 (10.0.0.11) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 100, tag 0 Received 00:00:46 ago, valid, external Rx SAFI: Unicast Next : If you still need to learn how to use AS-path filters to stop advertising transit routes , do it now. If you\u2019re more interested in building more extensive BGP-based networks , use BGP local preference to implement a consistent AS-wide routing policy.","title":"Verification"},{"location":"policy/1-weights/#reference-information","text":"This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"policy/1-weights/#req","text":"Customer router: use any device supported by the netlab BGP configuration module . External routers need support for default route origination . If you want to use an unsupported device as an external router, remove the bgp.originate attribute from the lab topology. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on the customer router. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"policy/1-weights/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2","title":"Lab Wiring"},{"location":"policy/1-weights/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 192.168.101.1/24 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1","title":"Lab Addressing"},{"location":"policy/2-stop-transit/","text":"Filter Transit Routes In the previous lab exercises, you configured EBGP sessions with two routers belonging to upstream ISPs. With no additional configuration, BGP routers propagate every route known to them to all neighbors, which means that your device propagates routes between AS 65100 and AS 65101 1 . That wouldn\u2019t be so bad if the ISP-2 wouldn\u2019t prefer customer routes over peer routes. Well, it does, and you became a transit network between ISP-2 and ISP-1. You don\u2019t have to trust me. After starting the lab, log into X2. If you\u2019re running Cumulus Linux, execute netlab connect x2 --show ip bgp ( more details ) or an equivalent command for the device you use as the external router. You\u2019ll see that the best paths to AS 65100 (ISP-1) use next hop 10.1.0.5 and go through AS 65000 (your network). $ netlab connect x2 --show ip bgp Connecting to container clab-no_transit-x2, executing sudo vtysh -c \"show ip bgp\" Use vtysh to connect to FRR daemon BGP table version is 9, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 65101 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 0.0.0.0/0 10.1.0.5 200 0 65000 65100 i * 192.168.42.0/24 10.1.0.9 0 65100 65000 ? *> 10.1.0.5 200 0 65000 ? * 192.168.100.0/24 10.1.0.9 0 0 65100 i *> 10.1.0.5 200 0 65000 65100 i *> 192.168.101.0/24 0.0.0.0 0 32768 i Displayed 4 routes and 6 total paths Tip Did you notice that the Internet Service Provider (X2) accepted the default route from its customer? That\u2019s a serious security breach and should never happen in a real-life network, but I wouldn\u2019t be too sure about that\u2026 Existing BGP Configuration The routers in your lab use the following BGP AS numbers. Each autonomous system advertises an IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. You can also use the configuration you made in the previous exercise . Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101 Start the Lab Assuming you already set up your lab infrastructure : Change directory to policy/2-stop-transit Execute netlab up ( device requirements , other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab , continue with the configuration you made during the previous exercise . Configuration Tasks You must filter BGP prefixes sent to X1 and X2 and advertise only prefixes with an empty AS path \u2013 the prefixes originating in your autonomous system 2 . On some BGP implementations (for example, Cisco IOS and IOS XE, Cumulus Linux, FRR), you configure outbound AS-path filters in two steps: Configure an AS-path access list that matches an empty AS path 3 . Apply the AS-path access list as an outbound filter to all EBGP neighbors. Some other implementations (for example, Arista EOS) might require a more convoluted approach using a route map as an intermediate step: After configuring the AS-path access list, create a route map that permits BGP prefixes matching your AS-path access list. Apply that route map as an outbound filter to all EBGP neighbors. Warning Applying filters to BGP neighbors doesn\u2019t necessarily trigger new updates \u2013 you might have to use a command similar to clear ip bgp * soft out to tell your router to recalculate and resend BGP prefixes from its BGP table to its neighbors. Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on X1 and X2. The validation tests check: The state of the EBGP session between RTR and X1/X2. Whether RTR advertises the expected IPv4 prefix (192.168.42.0/24). Whether RTR propagates BGP prefixes between X1 and X2 (it should not). This is the printout you could get when trying to validate an incomplete solution: You can also examine the BGP table on X1 and X2 to verify that RTR advertises only routes from AS 65000. This is the printout you should get on X2: $ netlab connect x2 --show ip bgp Connecting to container clab-no_transit-x2, executing sudo vtysh -c \"show ip bgp\" Use vtysh to connect to FRR daemon BGP table version is 11, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 65101 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path * 192.168.42.0/24 10.1.0.9 0 65100 65000 ? *> 10.1.0.5 200 0 65000 ? *> 192.168.100.0/24 10.1.0.9 0 0 65100 i *> 192.168.101.0/24 0.0.0.0 0 32768 i Displayed 3 routes and 4 total paths Next : Filter prefixes advertised to EBGP neighbors Reference Information This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Customer router: use any device supported by the netlab BGP configuration module . External routers need support for default route origination and change of BGP local preference . If you want to use an unsupported device as an external router, remove the bgp.originate and bgp.locpref attributes from the lab topology. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on external routers. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux. Lab Wiring Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 192.168.101.1/24 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1 Devices strictly compliant with RFC 8212 are an exception \u2013 they won\u2019t advertise anything to their EBGP neighbors unless you configured an outbound filter. \u21a9 Please note that all BGP implementations I\u2019ve seen so far apply filters to the contents of the BGP table. Prefixes originated by your router have an empty AS path while in your router\u2019s BGP table. \u21a9 I don\u2019t want you to waste too much time on regular expressions, so here\u2019s a hint: you can usually use ^$ to match an empty AS-path. \u21a9","title":"Filter Transit Routes"},{"location":"policy/2-stop-transit/#filter-transit-routes","text":"In the previous lab exercises, you configured EBGP sessions with two routers belonging to upstream ISPs. With no additional configuration, BGP routers propagate every route known to them to all neighbors, which means that your device propagates routes between AS 65100 and AS 65101 1 . That wouldn\u2019t be so bad if the ISP-2 wouldn\u2019t prefer customer routes over peer routes. Well, it does, and you became a transit network between ISP-2 and ISP-1. You don\u2019t have to trust me. After starting the lab, log into X2. If you\u2019re running Cumulus Linux, execute netlab connect x2 --show ip bgp ( more details ) or an equivalent command for the device you use as the external router. You\u2019ll see that the best paths to AS 65100 (ISP-1) use next hop 10.1.0.5 and go through AS 65000 (your network). $ netlab connect x2 --show ip bgp Connecting to container clab-no_transit-x2, executing sudo vtysh -c \"show ip bgp\" Use vtysh to connect to FRR daemon BGP table version is 9, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 65101 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 0.0.0.0/0 10.1.0.5 200 0 65000 65100 i * 192.168.42.0/24 10.1.0.9 0 65100 65000 ? *> 10.1.0.5 200 0 65000 ? * 192.168.100.0/24 10.1.0.9 0 0 65100 i *> 10.1.0.5 200 0 65000 65100 i *> 192.168.101.0/24 0.0.0.0 0 32768 i Displayed 4 routes and 6 total paths Tip Did you notice that the Internet Service Provider (X2) accepted the default route from its customer? That\u2019s a serious security breach and should never happen in a real-life network, but I wouldn\u2019t be too sure about that\u2026","title":"Filter Transit Routes"},{"location":"policy/2-stop-transit/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. Each autonomous system advertises an IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. You can also use the configuration you made in the previous exercise . Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101","title":"Existing BGP Configuration"},{"location":"policy/2-stop-transit/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to policy/2-stop-transit Execute netlab up ( device requirements , other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab , continue with the configuration you made during the previous exercise .","title":"Start the Lab"},{"location":"policy/2-stop-transit/#configuration-tasks","text":"You must filter BGP prefixes sent to X1 and X2 and advertise only prefixes with an empty AS path \u2013 the prefixes originating in your autonomous system 2 . On some BGP implementations (for example, Cisco IOS and IOS XE, Cumulus Linux, FRR), you configure outbound AS-path filters in two steps: Configure an AS-path access list that matches an empty AS path 3 . Apply the AS-path access list as an outbound filter to all EBGP neighbors. Some other implementations (for example, Arista EOS) might require a more convoluted approach using a route map as an intermediate step: After configuring the AS-path access list, create a route map that permits BGP prefixes matching your AS-path access list. Apply that route map as an outbound filter to all EBGP neighbors. Warning Applying filters to BGP neighbors doesn\u2019t necessarily trigger new updates \u2013 you might have to use a command similar to clear ip bgp * soft out to tell your router to recalculate and resend BGP prefixes from its BGP table to its neighbors.","title":"Configuration Tasks"},{"location":"policy/2-stop-transit/#verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on X1 and X2. The validation tests check: The state of the EBGP session between RTR and X1/X2. Whether RTR advertises the expected IPv4 prefix (192.168.42.0/24). Whether RTR propagates BGP prefixes between X1 and X2 (it should not). This is the printout you could get when trying to validate an incomplete solution: You can also examine the BGP table on X1 and X2 to verify that RTR advertises only routes from AS 65000. This is the printout you should get on X2: $ netlab connect x2 --show ip bgp Connecting to container clab-no_transit-x2, executing sudo vtysh -c \"show ip bgp\" Use vtysh to connect to FRR daemon BGP table version is 11, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 65101 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path * 192.168.42.0/24 10.1.0.9 0 65100 65000 ? *> 10.1.0.5 200 0 65000 ? *> 192.168.100.0/24 10.1.0.9 0 0 65100 i *> 192.168.101.0/24 0.0.0.0 0 32768 i Displayed 3 routes and 4 total paths Next : Filter prefixes advertised to EBGP neighbors","title":"Verification"},{"location":"policy/2-stop-transit/#reference-information","text":"This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"policy/2-stop-transit/#req","text":"Customer router: use any device supported by the netlab BGP configuration module . External routers need support for default route origination and change of BGP local preference . If you want to use an unsupported device as an external router, remove the bgp.originate and bgp.locpref attributes from the lab topology. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on external routers. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"policy/2-stop-transit/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2","title":"Lab Wiring"},{"location":"policy/2-stop-transit/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 192.168.101.1/24 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1 Devices strictly compliant with RFC 8212 are an exception \u2013 they won\u2019t advertise anything to their EBGP neighbors unless you configured an outbound filter. \u21a9 Please note that all BGP implementations I\u2019ve seen so far apply filters to the contents of the BGP table. Prefixes originated by your router have an empty AS path while in your router\u2019s BGP table. \u21a9 I don\u2019t want you to waste too much time on regular expressions, so here\u2019s a hint: you can usually use ^$ to match an empty AS-path. \u21a9","title":"Lab Addressing"},{"location":"policy/3-prefix/","text":"Filter Advertised Prefixes In the previous lab exercise, you filtered prefixes advertised by your router based on the AS-path contents . That\u2019s the absolute minimum you should do, but it\u2019s not always enough. Every other blue moon, a network operator manages to mess up two-way redistribution and advertises hundreds of thousands of prefixes as belonging to their autonomous system. You should, therefore, filter the prefixes advertised to EBGP neighbors to ensure you advertise only the address space assigned to you. In our simple lab topology, your device advertises a /24 prefix (that we\u2019ll assume is assigned to you) and a loopback (/32) prefix that should not be visible elsewhere. You don\u2019t have to trust me \u2013 after starting the lab, execute the netlab connect --show ip bgp 65000$ command ( more details ) or an equivalent command for the device you use as the external router. You\u2019ll see that your autonomous system advertises two prefixes; this is what I got in my lab: BGP table version is 6, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path * 10.0.0.1/32 10.1.0.10 0 65101 65000 i *> 10.1.0.1 0 65000 i * 192.168.42.0/24 10.1.0.10 0 65101 65000 ? *> 10.1.0.1 0 65000 ? Tip You could also use a command similar to show ip bgp show ip bgp neighbors neighbor-ip advertised-routes if it\u2019s available on your device to check what you\u2019re advertising to an individual neighbor. Existing BGP Configuration The routers in your lab use the following BGP AS numbers. Each autonomous system advertises one loopback address and another IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 10.0.0.1/32 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101 Start the Lab Assuming you already set up your lab infrastructure : Change directory to policy/3-prefix Execute netlab up ( device requirements , other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab , continue with the configuration you made during the previous exercise . Configuration Tasks You must filter BGP prefixes sent to X1 and X2 and advertise only the 192.168.42.0/24 prefix. Most BGP implementations support prefix lists that match IP prefixes and subnet masks; you should match both to ensure you\u2019re not advertising more specific prefixes to your EBGP neighbors. On some BGP implementations (for example, Cisco IOS and IOS XE, Cumulus Linux, FRR, Arista EOS), you can apply a prefix list as an inbound or outbound filter on a BGP neighbor. Some other implementations (for example, Arista EOS) might require a more convoluted approach using a route map as an intermediate step: After configuring the prefix list , create a route map that permits BGP prefixes matching your prefix list . Apply that route map as an outbound filter to all EBGP neighbors. Warning Applying filters to BGP neighbors doesn\u2019t necessarily trigger new updates \u2013 you might have to use a command similar to clear ip bgp * soft out to tell your router to recalculate and resend BGP prefixes from its BGP table to its neighbors. Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on X1 and X2. The validation tests check: The state of the EBGP session between RTR and X1/X2. Whether RTR advertises the expected IPv4 prefix (192.168.42.0/24). Whether RTR advertises its loopback IPv4 prefix (it should not). This is the printout you could get when trying to validate an incomplete solution: You can also examine the BGP table on X1 and X2 to verify that your router advertises only a single IPv4 prefix. This is the printout you should get on X1: $ netlab connect --show ip bgp neighbor 10.1.0.1 routes BGP table version is 8, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 192.168.42.0/24 10.1.0.1 0 65000 ? You can also check routes advertised to a neighbor on your device if it supports a command similar to show ip bgp show ip bgp neighbors neighbor-ip advertised-routes . This is how the printout looks on Arista EOS: rtr>show ip bgp neighbors 10.1.0.2 advertised-routes BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast, q - Queued for advertisement % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 192.168.42.0/24 10.1.0.1 - - - - 65000 ? Next : Reduce the size of your BGP table with inbound filters Reference Information This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Customer router: use any device supported by the netlab BGP configuration module . External routers need support for default route origination and change of BGP local preference . If you want to use an unsupported device as an external router, remove the bgp.originate and bgp.locpref attributes from the lab topology. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on external routers. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux. Lab Wiring Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 192.168.101.1/24 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1","title":"Filter Advertised Prefixes"},{"location":"policy/3-prefix/#filter-advertised-prefixes","text":"In the previous lab exercise, you filtered prefixes advertised by your router based on the AS-path contents . That\u2019s the absolute minimum you should do, but it\u2019s not always enough. Every other blue moon, a network operator manages to mess up two-way redistribution and advertises hundreds of thousands of prefixes as belonging to their autonomous system. You should, therefore, filter the prefixes advertised to EBGP neighbors to ensure you advertise only the address space assigned to you. In our simple lab topology, your device advertises a /24 prefix (that we\u2019ll assume is assigned to you) and a loopback (/32) prefix that should not be visible elsewhere. You don\u2019t have to trust me \u2013 after starting the lab, execute the netlab connect --show ip bgp 65000$ command ( more details ) or an equivalent command for the device you use as the external router. You\u2019ll see that your autonomous system advertises two prefixes; this is what I got in my lab: BGP table version is 6, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path * 10.0.0.1/32 10.1.0.10 0 65101 65000 i *> 10.1.0.1 0 65000 i * 192.168.42.0/24 10.1.0.10 0 65101 65000 ? *> 10.1.0.1 0 65000 ? Tip You could also use a command similar to show ip bgp show ip bgp neighbors neighbor-ip advertised-routes if it\u2019s available on your device to check what you\u2019re advertising to an individual neighbor.","title":"Filter Advertised Prefixes"},{"location":"policy/3-prefix/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. Each autonomous system advertises one loopback address and another IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 10.0.0.1/32 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101","title":"Existing BGP Configuration"},{"location":"policy/3-prefix/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to policy/3-prefix Execute netlab up ( device requirements , other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab , continue with the configuration you made during the previous exercise .","title":"Start the Lab"},{"location":"policy/3-prefix/#configuration-tasks","text":"You must filter BGP prefixes sent to X1 and X2 and advertise only the 192.168.42.0/24 prefix. Most BGP implementations support prefix lists that match IP prefixes and subnet masks; you should match both to ensure you\u2019re not advertising more specific prefixes to your EBGP neighbors. On some BGP implementations (for example, Cisco IOS and IOS XE, Cumulus Linux, FRR, Arista EOS), you can apply a prefix list as an inbound or outbound filter on a BGP neighbor. Some other implementations (for example, Arista EOS) might require a more convoluted approach using a route map as an intermediate step: After configuring the prefix list , create a route map that permits BGP prefixes matching your prefix list . Apply that route map as an outbound filter to all EBGP neighbors. Warning Applying filters to BGP neighbors doesn\u2019t necessarily trigger new updates \u2013 you might have to use a command similar to clear ip bgp * soft out to tell your router to recalculate and resend BGP prefixes from its BGP table to its neighbors.","title":"Configuration Tasks"},{"location":"policy/3-prefix/#verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on X1 and X2. The validation tests check: The state of the EBGP session between RTR and X1/X2. Whether RTR advertises the expected IPv4 prefix (192.168.42.0/24). Whether RTR advertises its loopback IPv4 prefix (it should not). This is the printout you could get when trying to validate an incomplete solution: You can also examine the BGP table on X1 and X2 to verify that your router advertises only a single IPv4 prefix. This is the printout you should get on X1: $ netlab connect --show ip bgp neighbor 10.1.0.1 routes BGP table version is 8, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 192.168.42.0/24 10.1.0.1 0 65000 ? You can also check routes advertised to a neighbor on your device if it supports a command similar to show ip bgp show ip bgp neighbors neighbor-ip advertised-routes . This is how the printout looks on Arista EOS: rtr>show ip bgp neighbors 10.1.0.2 advertised-routes BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast, q - Queued for advertisement % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 192.168.42.0/24 10.1.0.1 - - - - 65000 ? Next : Reduce the size of your BGP table with inbound filters","title":"Verification"},{"location":"policy/3-prefix/#reference-information","text":"This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"policy/3-prefix/#req","text":"Customer router: use any device supported by the netlab BGP configuration module . External routers need support for default route origination and change of BGP local preference . If you want to use an unsupported device as an external router, remove the bgp.originate and bgp.locpref attributes from the lab topology. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on external routers. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"policy/3-prefix/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2","title":"Lab Wiring"},{"location":"policy/3-prefix/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 192.168.101.1/24 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1","title":"Lab Addressing"},{"location":"policy/4-reduce/","text":"Minimize the Size of Your BGP Table In the previous lab exercises, you established EBGP sessions with two upstream Service Providers, accepted all routes they were willing to send you , and let your router do its magic selecting the best BGP routes. That might not be a good idea if you bought cost-optimized hardware that can do packet forwarding at ludicrous speeds but only for a few tens of thousands of routes while your neighbors send you the full Internet BGP table (over 930.000 routes in August 2023). In this lab exercise, you\u2019ll use inbound filters to reduce the information inserted in your device\u2019s BGP table (and, subsequently, the routing table). Your link to ISP-1 is much faster than the link to ISP-2, so you must use ISP-1 for most outbound traffic. As X1 advertises a default route to you, you don\u2019t have to accept any other routing information from it. It would be a shame to let the link to ISP-2 remain idle while the link to ISP-1 is operational. Let\u2019s send the traffic for AS 65101 directly over the link to X2 \u2013 that means you have to accept prefixes originating in AS 65101 from X2. Finally, you\u2019ll need a default route even if the link to ISP-1 goes down. You should also accept the default route from ISP-2 but make it less preferred than the one received from ISP-1. Existing BGP Configuration The routers in your lab use the following BGP AS numbers. Each autonomous system advertises one loopback address and another IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 10.0.0.1/32 192.168.42.0/24 AS65100 x1 10.0.0.10 10.0.0.10/32 192.168.100.0/24 AS65101 x2 10.0.0.11 10.0.0.11/32 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101 Start the Lab Assuming you already set up your lab infrastructure : Change directory to policy/4-reduce Execute netlab up ( device requirements , other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab , continue with the configuration you made during the previous exercise . Configuration Tasks Configure a prefix list that will accept only the default route and apply it as an inbound filter on the EBGP session with X1. You did something similar in the Filter Advertised Prefixes exercise, so you should know the process. The inbound filter for X2 is a bit more complex: you have to accept a prefix if it originates in AS 65101 or is the default route. You already implemented prefix filters and AS-path based filters ; now you have to combine them. Implementing such a condition often requires a more complex routing policy; many BGP implementations call it a route map . Tip To master BGP routing policies, you must become fluent in regular expressions. Let\u2019s take things one step at a time. The regular expression 65101$ matches prefixes originating in AS 65101. Finally, you must make routes received from X1 preferred over routes received from X2. If you don\u2019t know how to do that, first, solve the Select Preferred EBGP Peer with Weights exercise. Warning Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table as the new parameters might be evaluated only on new incoming updates \u2013 you might have to use a command similar to clear ip bgp * soft in to tell your router to ask its neighbors to resend their BGP updates. Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on your router. The validation tests check: The state of the EBGP session between RTR and X1/X2. Whether RTR has two default routes and whether the one advertised by X1 is the best default route. Whether RTR has a prefix advertised by X1 in its BGP table (it should not) Whether RTR has a prefix advertised by X2 in its BGP table and whether the next hop of the prefix is X2. This is the printout you should get after completing the lab exercise: You can also examine the BGP table on your device. It should contain: IP prefixes your device is originating; Two IP prefixes originated by X2 Two paths for the default route; the path advertised by X1 should be the best. If you\u2019re using Arista EOS, you should get this printout: rtr#sh ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 200 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 100 65101 i * > 10.0.0.1/32 - - - - 0 i * > 10.0.0.11/32 10.1.0.6 0 - 100 100 65101 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.101.0/24 10.1.0.6 0 - 100 100 65101 i Next : Use BGP local preference to implement a consistent AS-wide routing policy. Use Outbound Route Filters (ORF) for IP Prefixes Reference Information This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Customer router: use any device supported by the netlab BGP configuration module . You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on the customer router. Automated lab validation requires netlab release 1.8.3 or higher. External routers need support for default route origination and change of BGP local preference . If you want to use an unsupported device as an external router, remove the bgp.originate and bgp.locpref attributes from the lab topology. Git repository contains external router initial device configurations for Cumulus Linux. Lab Wiring Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1","title":"Minimize the Size of Your BGP Table"},{"location":"policy/4-reduce/#minimize-the-size-of-your-bgp-table","text":"In the previous lab exercises, you established EBGP sessions with two upstream Service Providers, accepted all routes they were willing to send you , and let your router do its magic selecting the best BGP routes. That might not be a good idea if you bought cost-optimized hardware that can do packet forwarding at ludicrous speeds but only for a few tens of thousands of routes while your neighbors send you the full Internet BGP table (over 930.000 routes in August 2023). In this lab exercise, you\u2019ll use inbound filters to reduce the information inserted in your device\u2019s BGP table (and, subsequently, the routing table). Your link to ISP-1 is much faster than the link to ISP-2, so you must use ISP-1 for most outbound traffic. As X1 advertises a default route to you, you don\u2019t have to accept any other routing information from it. It would be a shame to let the link to ISP-2 remain idle while the link to ISP-1 is operational. Let\u2019s send the traffic for AS 65101 directly over the link to X2 \u2013 that means you have to accept prefixes originating in AS 65101 from X2. Finally, you\u2019ll need a default route even if the link to ISP-1 goes down. You should also accept the default route from ISP-2 but make it less preferred than the one received from ISP-1.","title":"Minimize the Size of Your BGP Table"},{"location":"policy/4-reduce/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. Each autonomous system advertises one loopback address and another IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 10.0.0.1/32 192.168.42.0/24 AS65100 x1 10.0.0.10 10.0.0.10/32 192.168.100.0/24 AS65101 x2 10.0.0.11 10.0.0.11/32 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Neighbor Neighbor IPv4 Neighbor AS x1 10.1.0.2 65100 x2 10.1.0.6 65101","title":"Existing BGP Configuration"},{"location":"policy/4-reduce/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to policy/4-reduce Execute netlab up ( device requirements , other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab , continue with the configuration you made during the previous exercise .","title":"Start the Lab"},{"location":"policy/4-reduce/#configuration-tasks","text":"Configure a prefix list that will accept only the default route and apply it as an inbound filter on the EBGP session with X1. You did something similar in the Filter Advertised Prefixes exercise, so you should know the process. The inbound filter for X2 is a bit more complex: you have to accept a prefix if it originates in AS 65101 or is the default route. You already implemented prefix filters and AS-path based filters ; now you have to combine them. Implementing such a condition often requires a more complex routing policy; many BGP implementations call it a route map . Tip To master BGP routing policies, you must become fluent in regular expressions. Let\u2019s take things one step at a time. The regular expression 65101$ matches prefixes originating in AS 65101. Finally, you must make routes received from X1 preferred over routes received from X2. If you don\u2019t know how to do that, first, solve the Select Preferred EBGP Peer with Weights exercise. Warning Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table as the new parameters might be evaluated only on new incoming updates \u2013 you might have to use a command similar to clear ip bgp * soft in to tell your router to ask its neighbors to resend their BGP updates.","title":"Configuration Tasks"},{"location":"policy/4-reduce/#verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on your router. The validation tests check: The state of the EBGP session between RTR and X1/X2. Whether RTR has two default routes and whether the one advertised by X1 is the best default route. Whether RTR has a prefix advertised by X1 in its BGP table (it should not) Whether RTR has a prefix advertised by X2 in its BGP table and whether the next hop of the prefix is X2. This is the printout you should get after completing the lab exercise: You can also examine the BGP table on your device. It should contain: IP prefixes your device is originating; Two IP prefixes originated by X2 Two paths for the default route; the path advertised by X1 should be the best. If you\u2019re using Arista EOS, you should get this printout: rtr#sh ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.2 0 - 100 200 65100 i * 0.0.0.0/0 10.1.0.6 0 - 100 100 65101 i * > 10.0.0.1/32 - - - - 0 i * > 10.0.0.11/32 10.1.0.6 0 - 100 100 65101 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.101.0/24 10.1.0.6 0 - 100 100 65101 i Next : Use BGP local preference to implement a consistent AS-wide routing policy. Use Outbound Route Filters (ORF) for IP Prefixes","title":"Verification"},{"location":"policy/4-reduce/#reference-information","text":"This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"policy/4-reduce/#req","text":"Customer router: use any device supported by the netlab BGP configuration module . You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on the customer router. Automated lab validation requires netlab release 1.8.3 or higher. External routers need support for default route origination and change of BGP local preference . If you want to use an unsupported device as an external router, remove the bgp.originate and bgp.locpref attributes from the lab topology. Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"policy/4-reduce/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2","title":"Lab Wiring"},{"location":"policy/4-reduce/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1","title":"Lab Addressing"},{"location":"policy/5-local-preference/","text":"Select Preferred Uplink with BGP Local Preference In a previous lab exercise, you used BGP weights to prefer a high-speed uplink over a low-speed uplink . That worked well because you had both links attached to the same router. Now, imagine that you have a redundant design with two routers and want to prefer the C1-X1 link over the slower C2-X2 link. You could use BGP weights to get the job done, but as weights aren\u2019t a BGP attribute and thus aren\u2019t propagated between routers, you\u2019d have to apply them to all BGP sessions on C1 and C2. There\u2019s a better way: BGP has the local preference attribute that works like weights but gets propagated across IBGP sessions. In this lab, you\u2019ll use BGP local preference to ensure all BGP routers in your network prefer routes received over the C1-X1 link. Initial Router Configurations The routers in your lab use the following BGP AS numbers. Each autonomous system advertises an IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 c1 10.0.0.1 192.168.42.0/24 c2 10.0.0.2 192.168.42.0/24 AS65100 x1 10.0.0.10 192.168.100.0/24 x2 10.0.0.11 192.168.100.0/24 Your routers have these BGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 c1 10.0.0.1 65000 c2 65000 10.0.0.2 x1 65100 10.1.0.2 c2 10.0.0.2 65000 c1 65000 10.0.0.1 x2 65100 10.1.0.6 Your network is also running OSPF in the backbone area: Router Interface IPv4 Address Neighbor(s) c1 Loopback 10.0.0.1/32 Ethernet3 192.168.42.1/24 c2 c2 Loopback 10.0.0.2/32 Ethernet3 192.168.42.2/24 c1 Start the Lab Assuming you already set up your lab infrastructure : Change directory to policy/5-local-preference Execute netlab up ( device requirements , other options ) Log into your devices (C1 and C2) with netlab connect and verify their configurations. Note: netlab will configure IP addressing, OSPF, BGP, IBGP sessions, EBGP sessions, and BGP prefix advertisements on your routers. You\u2019ll have to manually configure your routers if you\u2019re not using netlab . Using BGP Local Preference The Border Gateway Protocol 4 (BGP-4) RFC (RFC 4271) defines the LOCAL_PREF attribute and mandates that: All IBGP update messages contain the LOCAL_PREF attribute. A BGP speaker never uses the LOCAL_PREF attribute on EBGP updates. The LOCAL_PREF attribute influences the selection of BGP best paths (higher local preference is better). The RFC does not specify how a router sets the BGP local preference or how it influences the BGP best path selection. Most BGP implementations use these defaults to interoperate with older devices: The default value of the LOCAL_PREF attribute that a router adds to EBGP routes before advertising them over IBGP sessions is 100. LOCAL_PREF is considered very early in the BGP best path selection process (before AS path length). This behavior makes LOCAL_PREF an ideal attribute when implementing a consistent BGP path selection across a whole autonomous system. We\u2019ll use the above behavior to implement a straightforward routing policy: Set the default local preference on C1 to 200 (making it better than the built-in default value) Set the default local preference on C2 to 50 (making it worse than the built-in default). Some BGP implementations allow you to change the default local preference value with a configuration command similar to bgp default local-preference . If your implementation does not support changing the default LOCAL_PREF value, you\u2019ll have to use a routing policy (often called a route-map ) attached to a BGP neighbor to modify it. Tip If you\u2019re using a network device that cannot change the default LOCAL_PREF value (example: Arista EOS), then you\u2019re probably already familiar with route maps. You might have been using them in the Filter Transit Routes or Filter Advertised Prefixes exercises. Warning Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table, as the new routing policy might be evaluated only on new incoming updates. You might have to use a command similar to clear ip bgp * soft in to tell your router to ask its neighbors to resend their BGP updates. Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on your router. The validation tests check: The state of the EBGP and IBGP sessions. The value of BGP local preference for IBGP and EBGP routes received by C2. This is the printout you could get after configuring C1 but before configuring C2: You can also examine the BGP table on C2 to verify that the routes advertised by C1 (next hop: 10.0.0.1) have a higher local preference and are preferred over routes received from X1 (next hop: 10.1.0.6). This is a printout you should get on Arista EOS: c2#show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.0.0.1 0 - 200 0 65100 i * 0.0.0.0/0 10.1.0.6 0 - 50 0 65100 i * > 192.168.42.0/24 - - - - 0 i * 192.168.42.0/24 10.0.0.1 0 - 100 0 i * > 192.168.100.0/24 10.0.0.1 0 - 200 0 65100 i * 192.168.100.0/24 10.1.0.6 0 - 50 0 65100 i You could dig deeper and examine the details of an IPv4 prefix that originated in AS 65100, for example, 192.168.100.0/24 : c2#show ip bgp 192.168.100.0/24 BGP routing table information for VRF default Router identifier 10.0.0.2, local AS number 65000 BGP routing table entry for 192.168.100.0/24 Paths: 2 available 65100 10.0.0.1 from 10.0.0.1 (10.0.0.1) Origin IGP, metric 0, localpref 200, IGP metric 20, weight 0, tag 0 Received 00:03:44 ago, valid, internal, best Rx SAFI: Unicast 65100 10.1.0.6 from 10.1.0.6 (10.0.0.11) Origin IGP, metric 0, localpref 50, IGP metric 0, weight 0, tag 0 Received 00:33:52 ago, valid, external Rx SAFI: Unicast Next: Use MED to Influence Incoming Traffic Flow Using BGP Local Preference in a Complex Routing Policy Reference Information This lab uses the 4-router lab topology . Some links are unused to retain the interface names from that topology. The following information might help you if you plan to build custom lab infrastructure: Device Requirements Customer routers: use any device supported by the netlab BGP and OSPF configuration modules . You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on the customer router. Automated lab validation requires netlab release 1.8.3 or higher. External routers must be supported by the netlab BGP and OSPF configuration modules . They also need support for default route origination . If you want to use a device that is not supported by the bgp.session plugin as an external router, remove the bgp.originate attributes from the lab topology. Git repository contains external router initial device configurations for Cumulus Linux. Lab Wiring Link Name Origin Device Origin Port Destination Device Destination Port Primary uplink c1 Ethernet1 x1 swp1 Unused link c1 Ethernet2 x2 swp1 ISP internal link x1 swp2 x2 swp2 Unused link c2 Ethernet1 x1 swp3 Backup uplink c2 Ethernet2 x2 swp3 Customer internal link c1 Ethernet3 c2 Ethernet3 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 Primary uplink Ethernet2 Unused link Ethernet3 192.168.42.1/24 Customer internal link c2 10.0.0.2/32 Loopback Ethernet1 Unused link Ethernet2 10.1.0.5/30 Backup uplink Ethernet3 192.168.42.2/24 Customer internal link x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 Primary uplink swp2 192.168.100.10/24 ISP internal link swp3 Unused link x2 10.0.0.11/32 Loopback swp1 Unused link swp2 192.168.100.11/24 ISP internal link swp3 10.1.0.6/30 Backup uplink","title":"Select Preferred Uplink with BGP Local Preference"},{"location":"policy/5-local-preference/#select-preferred-uplink-with-bgp-local-preference","text":"In a previous lab exercise, you used BGP weights to prefer a high-speed uplink over a low-speed uplink . That worked well because you had both links attached to the same router. Now, imagine that you have a redundant design with two routers and want to prefer the C1-X1 link over the slower C2-X2 link. You could use BGP weights to get the job done, but as weights aren\u2019t a BGP attribute and thus aren\u2019t propagated between routers, you\u2019d have to apply them to all BGP sessions on C1 and C2. There\u2019s a better way: BGP has the local preference attribute that works like weights but gets propagated across IBGP sessions. In this lab, you\u2019ll use BGP local preference to ensure all BGP routers in your network prefer routes received over the C1-X1 link.","title":"Select Preferred Uplink with BGP Local Preference"},{"location":"policy/5-local-preference/#initial-router-configurations","text":"The routers in your lab use the following BGP AS numbers. Each autonomous system advertises an IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 c1 10.0.0.1 192.168.42.0/24 c2 10.0.0.2 192.168.42.0/24 AS65100 x1 10.0.0.10 192.168.100.0/24 x2 10.0.0.11 192.168.100.0/24 Your routers have these BGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 c1 10.0.0.1 65000 c2 65000 10.0.0.2 x1 65100 10.1.0.2 c2 10.0.0.2 65000 c1 65000 10.0.0.1 x2 65100 10.1.0.6 Your network is also running OSPF in the backbone area: Router Interface IPv4 Address Neighbor(s) c1 Loopback 10.0.0.1/32 Ethernet3 192.168.42.1/24 c2 c2 Loopback 10.0.0.2/32 Ethernet3 192.168.42.2/24 c1","title":"Initial Router Configurations"},{"location":"policy/5-local-preference/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to policy/5-local-preference Execute netlab up ( device requirements , other options ) Log into your devices (C1 and C2) with netlab connect and verify their configurations. Note: netlab will configure IP addressing, OSPF, BGP, IBGP sessions, EBGP sessions, and BGP prefix advertisements on your routers. You\u2019ll have to manually configure your routers if you\u2019re not using netlab .","title":"Start the Lab"},{"location":"policy/5-local-preference/#using-bgp-local-preference","text":"The Border Gateway Protocol 4 (BGP-4) RFC (RFC 4271) defines the LOCAL_PREF attribute and mandates that: All IBGP update messages contain the LOCAL_PREF attribute. A BGP speaker never uses the LOCAL_PREF attribute on EBGP updates. The LOCAL_PREF attribute influences the selection of BGP best paths (higher local preference is better). The RFC does not specify how a router sets the BGP local preference or how it influences the BGP best path selection. Most BGP implementations use these defaults to interoperate with older devices: The default value of the LOCAL_PREF attribute that a router adds to EBGP routes before advertising them over IBGP sessions is 100. LOCAL_PREF is considered very early in the BGP best path selection process (before AS path length). This behavior makes LOCAL_PREF an ideal attribute when implementing a consistent BGP path selection across a whole autonomous system. We\u2019ll use the above behavior to implement a straightforward routing policy: Set the default local preference on C1 to 200 (making it better than the built-in default value) Set the default local preference on C2 to 50 (making it worse than the built-in default). Some BGP implementations allow you to change the default local preference value with a configuration command similar to bgp default local-preference . If your implementation does not support changing the default LOCAL_PREF value, you\u2019ll have to use a routing policy (often called a route-map ) attached to a BGP neighbor to modify it. Tip If you\u2019re using a network device that cannot change the default LOCAL_PREF value (example: Arista EOS), then you\u2019re probably already familiar with route maps. You might have been using them in the Filter Transit Routes or Filter Advertised Prefixes exercises. Warning Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table, as the new routing policy might be evaluated only on new incoming updates. You might have to use a command similar to clear ip bgp * soft in to tell your router to ask its neighbors to resend their BGP updates.","title":"Using BGP Local Preference"},{"location":"policy/5-local-preference/#verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on your router. The validation tests check: The state of the EBGP and IBGP sessions. The value of BGP local preference for IBGP and EBGP routes received by C2. This is the printout you could get after configuring C1 but before configuring C2: You can also examine the BGP table on C2 to verify that the routes advertised by C1 (next hop: 10.0.0.1) have a higher local preference and are preferred over routes received from X1 (next hop: 10.1.0.6). This is a printout you should get on Arista EOS: c2#show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.0.0.1 0 - 200 0 65100 i * 0.0.0.0/0 10.1.0.6 0 - 50 0 65100 i * > 192.168.42.0/24 - - - - 0 i * 192.168.42.0/24 10.0.0.1 0 - 100 0 i * > 192.168.100.0/24 10.0.0.1 0 - 200 0 65100 i * 192.168.100.0/24 10.1.0.6 0 - 50 0 65100 i You could dig deeper and examine the details of an IPv4 prefix that originated in AS 65100, for example, 192.168.100.0/24 : c2#show ip bgp 192.168.100.0/24 BGP routing table information for VRF default Router identifier 10.0.0.2, local AS number 65000 BGP routing table entry for 192.168.100.0/24 Paths: 2 available 65100 10.0.0.1 from 10.0.0.1 (10.0.0.1) Origin IGP, metric 0, localpref 200, IGP metric 20, weight 0, tag 0 Received 00:03:44 ago, valid, internal, best Rx SAFI: Unicast 65100 10.1.0.6 from 10.1.0.6 (10.0.0.11) Origin IGP, metric 0, localpref 50, IGP metric 0, weight 0, tag 0 Received 00:33:52 ago, valid, external Rx SAFI: Unicast Next: Use MED to Influence Incoming Traffic Flow Using BGP Local Preference in a Complex Routing Policy","title":"Verification"},{"location":"policy/5-local-preference/#reference-information","text":"This lab uses the 4-router lab topology . Some links are unused to retain the interface names from that topology. The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"policy/5-local-preference/#req","text":"Customer routers: use any device supported by the netlab BGP and OSPF configuration modules . You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on the customer router. Automated lab validation requires netlab release 1.8.3 or higher. External routers must be supported by the netlab BGP and OSPF configuration modules . They also need support for default route origination . If you want to use a device that is not supported by the bgp.session plugin as an external router, remove the bgp.originate attributes from the lab topology. Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"policy/5-local-preference/#lab-wiring","text":"Link Name Origin Device Origin Port Destination Device Destination Port Primary uplink c1 Ethernet1 x1 swp1 Unused link c1 Ethernet2 x2 swp1 ISP internal link x1 swp2 x2 swp2 Unused link c2 Ethernet1 x1 swp3 Backup uplink c2 Ethernet2 x2 swp3 Customer internal link c1 Ethernet3 c2 Ethernet3","title":"Lab Wiring"},{"location":"policy/5-local-preference/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 Primary uplink Ethernet2 Unused link Ethernet3 192.168.42.1/24 Customer internal link c2 10.0.0.2/32 Loopback Ethernet1 Unused link Ethernet2 10.1.0.5/30 Backup uplink Ethernet3 192.168.42.2/24 Customer internal link x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 Primary uplink swp2 192.168.100.10/24 ISP internal link swp3 Unused link x2 10.0.0.11/32 Loopback swp1 Unused link swp2 192.168.100.11/24 ISP internal link swp3 10.1.0.6/30 Backup uplink","title":"Lab Addressing"},{"location":"policy/6-med/","text":"Use MED to Influence Incoming Traffic Flow In previous lab exercises, you used BGP weights and BGP local preference to change the BGP tables on your routers, thus changing the outgoing traffic flow . In this exercise, we\u2019ll change the incoming traffic flow with the BGP Multi-Exit Discriminator (MED) attribute. Warning Changing incoming traffic flow is more critical for networks that are not content providers. It\u2019s also much more challenging than changing the outgoing traffic flow, as you must try to influence the BGP tables on other people\u2019s routers. Existing Router Configuration The routers in your lab use the following BGP AS numbers. Each autonomous system advertises an IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 (customer) c1 10.0.0.1 192.168.42.0/24 c2 10.0.0.2 192.168.42.0/24 AS65100 (ISP) x1 10.0.0.10 192.168.100.0/24 x2 10.0.0.11 192.168.100.0/24 Your routers have these BGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 c1 10.0.0.1 65000 c2 65000 10.0.0.2 x1 65100 10.1.0.2 c2 10.0.0.2 65000 c1 65000 10.0.0.1 x2 65100 10.1.0.6 Your network is also running OSPF in the backbone area: Router Interface IPv4 Address Neighbor(s) c1 Loopback 10.0.0.1/32 Ethernet3 192.168.42.1/24 c2 c2 Loopback 10.0.0.2/32 Ethernet3 192.168.42.2/24 c1 Start the Lab Assuming you already set up your lab infrastructure : Change directory to policy/6-med Execute netlab up to start the lab using the usual external devices for X1 and X2 ( device requirements ), or netlab up single.yml to start the lab that uses only your chosen devices 1 . You can also run this lab without using netlab Log into your devices (C1 and C2) with netlab connect and verify their configurations. Tip netlab will configure IP addressing, OSPF, BGP, IBGP sessions, EBGP sessions, and BGP prefix advertisements on your routers. If you\u2019re not using netlab , you must manually configure your routers. Check the BGP Tables on External Routers Log into X1 and X2 and check their BGP tables. Use the sudo vtysh -c 'show ip bgp' command if you\u2019re running Cumulus Linux on external routers: $ netlab connect x1 sudo vtysh -c 'show ip bgp 192.168.42.0' Connecting to container clab-med-x1, executing sudo vtysh -c \"show ip bgp 192.168.42.0\" BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #2, table default) Advertised to non peer-group peers: x2(10.0.0.11) 10.1.0.1 65000 10.0.0.11 (metric 10) from x2(10.0.0.11) (10.0.0.11) Origin IGP, localpref 100, valid, internal Last update: Mon Nov 6 07:08:30 2023 65000 10.1.0.1 from 10.1.0.1 (10.0.0.1) Origin IGP, valid, external, bestpath-from-AS 65000, best (Peer Type) Last update: Mon Nov 6 07:08:12 2023 $ netlab connect x2 sudo vtysh -c 'show ip bgp 192.168.42.0' Connecting to container clab-med-x2, executing sudo vtysh -c \"show ip bgp 192.168.42.0\" BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #2, table default) Advertised to non peer-group peers: x1(10.0.0.10) 10.1.0.5 65000 10.0.0.10 (metric 10) from x1(10.0.0.10) (10.0.0.10) Origin IGP, localpref 100, valid, internal Last update: Mon Nov 6 07:08:29 2023 65000 10.1.0.5 from 10.1.0.5 (10.0.0.2) Origin IGP, valid, external, bestpath-from-AS 65000, best (Peer Type) Last update: Mon Nov 6 07:08:11 2023 X1 and X2 prefer the EBGP path to the customer prefix ( 192.168.42.0/24 ) over the IBGP path. The distinction between the two paths is small enough for MED to work. Using BGP Multi-Exit Discriminator (MED) The Border Gateway Protocol 4 (BGP-4) RFC (RFC 4271) defines the MULTI_EXIT_DISC attribute as an optional attribute that is intended to be used on external (inter-AS) links to discriminate among multiple exit or entry points to the same neighboring AS. The first limitation of MED is that it can only influence incoming traffic flow if your network connects to a single upstream network. RFC 4271 also defines how to use MED: \u201c All other factors being equal, the exit point with the lower metric SHOULD be preferred. \u201d MED is a weak metric that is considered at the end of the BGP path selection process. You can use it to influence incoming traffic only if the upstream network uses no other routing policy. Finally, RFC 4271 defines MED propagation rules: MED can be used on EBGP sessions. If received over EBGP, the MED attribute MAY be propagated over IBGP to other BGP speakers within the same AS. The MED attribute received from a neighboring AS MUST NOT be propagated to other neighboring ASes. We\u2019ll use the above behavior to implement a straightforward routing policy: Set the MED on routes advertised from C1 to X1 to 50 Set the MED on routes advertised from C2 to X2 to 100 (remember: higher MED is worse). You will probably have to configure a routing policy (often called a route-map ) on C1 and C2 to change the MED and then apply the routing policy as the outbound policy on the EBGP neighbors. Warning Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table, as the new routing policy might be evaluated only on new incoming updates. You might have to use a command similar to clear ip bgp * soft to tell your routers to resend their BGP updates. Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on X1 and X2. The validation tests check: The state of the EBGP sessions. Whether C1 advertises the AS 65000 IPv4 prefix (192.168.42.0/24) with BGP MED set to 50. Whether C2 advertises the same prefix with BGP MED set to 200. Whether X2 prefers the IBGP route to 192.168.42.0/24 over the EBGP route. This is the printout you should get after completing the lab exercise: You can also examine the BGP tables on X1 and X2 to verify that the routes from AS 65000 have the desired metric. This is a printout you should get on X2 running Cumulus Linux: $ netlab connect x2 sudo vtysh -c 'show ip bgp 192.168.42.0' Connecting to container clab-med-x2, executing sudo vtysh -c \"show ip bgp 192.168.42.0\" BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #1, table default) Advertised to non peer-group peers: 10.1.0.5 65000 10.0.0.10 (metric 10) from x1(10.0.0.10) (10.0.0.10) Origin IGP, metric 50, localpref 100, valid, internal, bestpath-from-AS 65000, best (MED) Last update: Mon Nov 6 07:36:36 2023 65000 10.1.0.5 from 10.1.0.5 (10.0.0.2) Origin IGP, metric 100, valid, external Last update: Mon Nov 6 07:36:36 2023 X2 has two paths toward 192.168.42.0 : IBGP path received from 10.0.0.10 (X1) with metric 50. This is the best path due to MED value. EBGP path received from 10.1.0.5 (C2) with metric 100. This is a valid path, but there are better. If you get a similar printout in your lab, you accomplished your mission \u2013 you managed to change the incoming traffic flow to avoid the C2-X2 link. Warning In real life, you cannot log into other people\u2019s routers. In most cases, you\u2019re limited to observing the incoming traffic counters on your uplinks and hoping for the best. You might be able to use looking glasses (if available) in adjacent networks to inspect their BGP tables or use the traceroute tool from a remote vantage point (for example, your laptop tethered to a mobile Internet connection) to check the traffic flow into your network. Next: Use AS-Path Prepending to Influence Incoming Traffic Flow Reference Information This lab uses the 4-router lab topology . Some links are unused to retain the interface names from that topology. The following information might help you if you plan to build custom lab infrastructure: Device Requirements Customer routers: use any device supported by the netlab BGP and OSPF configuration modules . External routers must be supported by the netlab BGP and OSPF configuration modules . They also need support for default route origination . You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on external routers. Automated lab validation requires netlab release 1.8.3 or higher. If you want to use a device that is not supported by the bgp.session plugin as an external router, remove the bgp.originate attributes from the lab topology. Git repository contains external router initial device configurations for Cumulus Linux. Lab Wiring Link Name Origin Device Origin Port Destination Device Destination Port Primary uplink c1 Ethernet1 x1 swp1 Unused link c1 Ethernet2 x2 swp1 ISP internal link x1 swp2 x2 swp2 Unused link c2 Ethernet1 x1 swp3 Backup uplink c2 Ethernet2 x2 swp3 Customer internal link c1 Ethernet3 c2 Ethernet3 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 Primary uplink Ethernet2 Unused link Ethernet3 192.168.42.1/24 Customer internal link c2 10.0.0.2/32 Loopback Ethernet1 Unused link Ethernet2 10.1.0.5/30 Backup uplink Ethernet3 192.168.42.2/24 Customer internal link x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 Primary uplink swp2 192.168.100.10/24 ISP internal link swp3 Unused link x2 10.0.0.11/32 Loopback swp1 Unused link swp2 192.168.100.11/24 ISP internal link swp3 10.1.0.6/30 Backup uplink Using your chosen devices in the ISP network might make it easier to check the status of the BGP tables on X1 and X2. It will also consume more memory (Cumulus Linux and FRR are very memory-efficient). \u21a9","title":"Use MED to Influence Incoming Traffic Flow"},{"location":"policy/6-med/#use-med-to-influence-incoming-traffic-flow","text":"In previous lab exercises, you used BGP weights and BGP local preference to change the BGP tables on your routers, thus changing the outgoing traffic flow . In this exercise, we\u2019ll change the incoming traffic flow with the BGP Multi-Exit Discriminator (MED) attribute. Warning Changing incoming traffic flow is more critical for networks that are not content providers. It\u2019s also much more challenging than changing the outgoing traffic flow, as you must try to influence the BGP tables on other people\u2019s routers.","title":"Use MED to Influence Incoming Traffic Flow"},{"location":"policy/6-med/#existing-router-configuration","text":"The routers in your lab use the following BGP AS numbers. Each autonomous system advertises an IPv4 prefix. Upstream routers (x1, x2) also advertise the default route to your router (rtr). Node/ASN Router ID Advertised prefixes AS65000 (customer) c1 10.0.0.1 192.168.42.0/24 c2 10.0.0.2 192.168.42.0/24 AS65100 (ISP) x1 10.0.0.10 192.168.100.0/24 x2 10.0.0.11 192.168.100.0/24 Your routers have these BGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 c1 10.0.0.1 65000 c2 65000 10.0.0.2 x1 65100 10.1.0.2 c2 10.0.0.2 65000 c1 65000 10.0.0.1 x2 65100 10.1.0.6 Your network is also running OSPF in the backbone area: Router Interface IPv4 Address Neighbor(s) c1 Loopback 10.0.0.1/32 Ethernet3 192.168.42.1/24 c2 c2 Loopback 10.0.0.2/32 Ethernet3 192.168.42.2/24 c1","title":"Existing Router Configuration"},{"location":"policy/6-med/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to policy/6-med Execute netlab up to start the lab using the usual external devices for X1 and X2 ( device requirements ), or netlab up single.yml to start the lab that uses only your chosen devices 1 . You can also run this lab without using netlab Log into your devices (C1 and C2) with netlab connect and verify their configurations. Tip netlab will configure IP addressing, OSPF, BGP, IBGP sessions, EBGP sessions, and BGP prefix advertisements on your routers. If you\u2019re not using netlab , you must manually configure your routers.","title":"Start the Lab"},{"location":"policy/6-med/#check-the-bgp-tables-on-external-routers","text":"Log into X1 and X2 and check their BGP tables. Use the sudo vtysh -c 'show ip bgp' command if you\u2019re running Cumulus Linux on external routers: $ netlab connect x1 sudo vtysh -c 'show ip bgp 192.168.42.0' Connecting to container clab-med-x1, executing sudo vtysh -c \"show ip bgp 192.168.42.0\" BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #2, table default) Advertised to non peer-group peers: x2(10.0.0.11) 10.1.0.1 65000 10.0.0.11 (metric 10) from x2(10.0.0.11) (10.0.0.11) Origin IGP, localpref 100, valid, internal Last update: Mon Nov 6 07:08:30 2023 65000 10.1.0.1 from 10.1.0.1 (10.0.0.1) Origin IGP, valid, external, bestpath-from-AS 65000, best (Peer Type) Last update: Mon Nov 6 07:08:12 2023 $ netlab connect x2 sudo vtysh -c 'show ip bgp 192.168.42.0' Connecting to container clab-med-x2, executing sudo vtysh -c \"show ip bgp 192.168.42.0\" BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #2, table default) Advertised to non peer-group peers: x1(10.0.0.10) 10.1.0.5 65000 10.0.0.10 (metric 10) from x1(10.0.0.10) (10.0.0.10) Origin IGP, localpref 100, valid, internal Last update: Mon Nov 6 07:08:29 2023 65000 10.1.0.5 from 10.1.0.5 (10.0.0.2) Origin IGP, valid, external, bestpath-from-AS 65000, best (Peer Type) Last update: Mon Nov 6 07:08:11 2023 X1 and X2 prefer the EBGP path to the customer prefix ( 192.168.42.0/24 ) over the IBGP path. The distinction between the two paths is small enough for MED to work.","title":"Check the BGP Tables on External Routers"},{"location":"policy/6-med/#using-bgp-multi-exit-discriminator-med","text":"The Border Gateway Protocol 4 (BGP-4) RFC (RFC 4271) defines the MULTI_EXIT_DISC attribute as an optional attribute that is intended to be used on external (inter-AS) links to discriminate among multiple exit or entry points to the same neighboring AS. The first limitation of MED is that it can only influence incoming traffic flow if your network connects to a single upstream network. RFC 4271 also defines how to use MED: \u201c All other factors being equal, the exit point with the lower metric SHOULD be preferred. \u201d MED is a weak metric that is considered at the end of the BGP path selection process. You can use it to influence incoming traffic only if the upstream network uses no other routing policy. Finally, RFC 4271 defines MED propagation rules: MED can be used on EBGP sessions. If received over EBGP, the MED attribute MAY be propagated over IBGP to other BGP speakers within the same AS. The MED attribute received from a neighboring AS MUST NOT be propagated to other neighboring ASes. We\u2019ll use the above behavior to implement a straightforward routing policy: Set the MED on routes advertised from C1 to X1 to 50 Set the MED on routes advertised from C2 to X2 to 100 (remember: higher MED is worse). You will probably have to configure a routing policy (often called a route-map ) on C1 and C2 to change the MED and then apply the routing policy as the outbound policy on the EBGP neighbors. Warning Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table, as the new routing policy might be evaluated only on new incoming updates. You might have to use a command similar to clear ip bgp * soft to tell your routers to resend their BGP updates.","title":"Using BGP Multi-Exit Discriminator (MED)"},{"location":"policy/6-med/#verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on X1 and X2. The validation tests check: The state of the EBGP sessions. Whether C1 advertises the AS 65000 IPv4 prefix (192.168.42.0/24) with BGP MED set to 50. Whether C2 advertises the same prefix with BGP MED set to 200. Whether X2 prefers the IBGP route to 192.168.42.0/24 over the EBGP route. This is the printout you should get after completing the lab exercise: You can also examine the BGP tables on X1 and X2 to verify that the routes from AS 65000 have the desired metric. This is a printout you should get on X2 running Cumulus Linux: $ netlab connect x2 sudo vtysh -c 'show ip bgp 192.168.42.0' Connecting to container clab-med-x2, executing sudo vtysh -c \"show ip bgp 192.168.42.0\" BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #1, table default) Advertised to non peer-group peers: 10.1.0.5 65000 10.0.0.10 (metric 10) from x1(10.0.0.10) (10.0.0.10) Origin IGP, metric 50, localpref 100, valid, internal, bestpath-from-AS 65000, best (MED) Last update: Mon Nov 6 07:36:36 2023 65000 10.1.0.5 from 10.1.0.5 (10.0.0.2) Origin IGP, metric 100, valid, external Last update: Mon Nov 6 07:36:36 2023 X2 has two paths toward 192.168.42.0 : IBGP path received from 10.0.0.10 (X1) with metric 50. This is the best path due to MED value. EBGP path received from 10.1.0.5 (C2) with metric 100. This is a valid path, but there are better. If you get a similar printout in your lab, you accomplished your mission \u2013 you managed to change the incoming traffic flow to avoid the C2-X2 link. Warning In real life, you cannot log into other people\u2019s routers. In most cases, you\u2019re limited to observing the incoming traffic counters on your uplinks and hoping for the best. You might be able to use looking glasses (if available) in adjacent networks to inspect their BGP tables or use the traceroute tool from a remote vantage point (for example, your laptop tethered to a mobile Internet connection) to check the traffic flow into your network. Next: Use AS-Path Prepending to Influence Incoming Traffic Flow","title":"Verification"},{"location":"policy/6-med/#reference-information","text":"This lab uses the 4-router lab topology . Some links are unused to retain the interface names from that topology. The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"policy/6-med/#req","text":"Customer routers: use any device supported by the netlab BGP and OSPF configuration modules . External routers must be supported by the netlab BGP and OSPF configuration modules . They also need support for default route origination . You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on external routers. Automated lab validation requires netlab release 1.8.3 or higher. If you want to use a device that is not supported by the bgp.session plugin as an external router, remove the bgp.originate attributes from the lab topology. Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"policy/6-med/#lab-wiring","text":"Link Name Origin Device Origin Port Destination Device Destination Port Primary uplink c1 Ethernet1 x1 swp1 Unused link c1 Ethernet2 x2 swp1 ISP internal link x1 swp2 x2 swp2 Unused link c2 Ethernet1 x1 swp3 Backup uplink c2 Ethernet2 x2 swp3 Customer internal link c1 Ethernet3 c2 Ethernet3","title":"Lab Wiring"},{"location":"policy/6-med/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 Primary uplink Ethernet2 Unused link Ethernet3 192.168.42.1/24 Customer internal link c2 10.0.0.2/32 Loopback Ethernet1 Unused link Ethernet2 10.1.0.5/30 Backup uplink Ethernet3 192.168.42.2/24 Customer internal link x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 Primary uplink swp2 192.168.100.10/24 ISP internal link swp3 Unused link x2 10.0.0.11/32 Loopback swp1 Unused link swp2 192.168.100.11/24 ISP internal link swp3 10.1.0.6/30 Backup uplink Using your chosen devices in the ISP network might make it easier to check the status of the BGP tables on X1 and X2. It will also consume more memory (Cumulus Linux and FRR are very memory-efficient). \u21a9","title":"Lab Addressing"},{"location":"policy/7-prepend/","text":"Use AS-Path Prepending to Influence Incoming Traffic Flow In the previous lab exercises, you used BGP Multi-Exit Discriminator to tell routers in an adjacent autonomous system which link(s) you prefer. That approach no longer works if your BGP router has connections to multiple upstream autonomous systems. Influencing incoming traffic flow in scenarios with multiple upstream Service Providers is more art than science. The most straightforward tool you can try is AS-path prepending: adding multiple copies of your AS number to the AS path, hoping that the default BGP route selection process in upstream routers results in the desired traffic flow. In this lab, you\u2019ll configure the AS path prepending on the updates sent to X2, trying to persuade X2 to use the path through X1 to reach your network. Existing BGP Configuration The routers in your lab use the following BGP AS numbers. Each autonomous system advertises a single IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 rtr 10.0.0.1 65000 x1 65100 10.1.0.2 x2 65101 10.1.0.6 Start the Lab Assuming you already set up your lab infrastructure : Change directory to policy/7-prepend Execute netlab up ( device requirements , other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab , continue with the configuration you made during the Advertise IPv4 Prefixes to BGP Neighbors or Select Preferred EBGP Peer with Weights exercises. What Do We Have to Fix? Log into X2 and check its BGP table. Use the sudo vtysh -c 'show ip bgp' command if you\u2019re running Cumulus Linux on X2: $ netlab connect x2 sudo vtysh -c 'show ip bgp' Connecting to container clab-prepend-x2, executing sudo vtysh -c \"show ip bgp\" BGP table version is 3, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 65101 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path * 192.168.42.0/24 10.1.0.9 0 65100 65000 ? *> 10.1.0.5 0 65000 ? * 192.168.100.0/24 10.1.0.5 0 65000 65100 i *> 10.1.0.9 0 0 65100 i *> 192.168.101.0/24 0.0.0.0 0 32768 i Displayed 3 routes and 5 total paths As expected, while X2 receives a route to 192.168.42.0/24 from X1, it prefers the one received from your router over the RTR-X2 link. Cumulus Linux explains how it selected the best BGP route in its detailed BGP prefix information printout \u2013 in this case, X2 chose the path with the shorter AS-path length: $ netlab connect x2 sudo vtysh -c 'show ip bgp 192.168.42.0' Connecting to container clab-prepend-x2, executing sudo vtysh -c \"show ip bgp 192.168.42.0\" BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #2, table default) Advertised to non peer-group peers: 10.1.0.5 x1(10.1.0.9) 65100 65000 10.1.0.9 from x1(10.1.0.9) (10.0.0.10) Origin incomplete, valid, external, bestpath-from-AS 65100 Last update: Thu Nov 9 09:24:51 2023 65000 10.1.0.5 from 10.1.0.5 (10.0.0.1) Origin incomplete, valid, external, bestpath-from-AS 65000, best (AS Path) Last update: Thu Nov 9 09:24:50 2023 Configuration Tasks You want X2 to prefer routes to your autonomous system going through X1. As X2 selects the best path based on its AS-path length, you\u2019ll artificially increase the length of the AS-path in the updates your router sends to X2. To do that, you\u2019ll have to: Create a simple routing policy (often called a route map ) Configure AS-path prepending in that routing policy. The AS-path X2 receives from X1 has two AS numbers; you\u2019ll have to prepend your AS number at least twice to ensure the direct path is worse than the path X2-X1-RTR. Apply the routing policy to the outgoing updates sent from your router to X2. Warning Some devices allow you to configure either the number of times they prepend your AS number to the AS path or the content of the AS path. Make sure you won\u2019t prepend AS 2 to the AS path. While you can prepend any AS number to the AS path (assuming your device allows you to specify the content of the AS path), never prepend AS numbers other than your own. Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change their BGP tables; your router might evaluate the new parameters only when sending new updates. You might have to use a command similar to clear ip bgp * soft out to tell your router to resend the BGP updates to its neighbors. Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on X1 and X2. The validation tests check: The state of the EBGP session between RTR and X1/X2. The AS path of IPv4 prefix 192.168.42.0/24 advertised to X2 from RTR and X1. Whether X2 prefers the transit path through X1 over the direct EBGP path to RTR. This is the printout you should get after completing the lab exercise: You can also use the commands from the What Do We Have to Fix section, log into X2, and verify that it now prefers the route to 192.168.42.0/24 going through X1. $ netlab connect x2 sudo vtysh -c 'show ip bgp 192.168.42.0' Connecting to container clab-prepend-x2, executing sudo vtysh -c \"show ip bgp 192.168.42.0\" BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #1, table default) Advertised to non peer-group peers: 10.1.0.5 x1(10.1.0.9) 65100 65000 10.1.0.9 from x1(10.1.0.9) (10.0.0.10) Origin incomplete, valid, external, bestpath-from-AS 65100, best (AS Path) Last update: Thu Nov 9 09:24:51 2023 65000 65000 65000 10.1.0.5 from 10.1.0.5 (10.0.0.1) Origin incomplete, valid, external, bestpath-from-AS 65000 Last update: Thu Nov 9 10:06:39 2023 Reference Information This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Customer- and external routers: use any device supported by the netlab BGP and OSPF configuration modules . You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on external routers. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux. Lab Wiring Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 192.168.101.1/24 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1","title":"Use AS-Path Prepending to Influence Incoming Traffic Flow"},{"location":"policy/7-prepend/#use-as-path-prepending-to-influence-incoming-traffic-flow","text":"In the previous lab exercises, you used BGP Multi-Exit Discriminator to tell routers in an adjacent autonomous system which link(s) you prefer. That approach no longer works if your BGP router has connections to multiple upstream autonomous systems. Influencing incoming traffic flow in scenarios with multiple upstream Service Providers is more art than science. The most straightforward tool you can try is AS-path prepending: adding multiple copies of your AS number to the AS path, hoping that the default BGP route selection process in upstream routers results in the desired traffic flow. In this lab, you\u2019ll configure the AS path prepending on the updates sent to X2, trying to persuade X2 to use the path through X1 to reach your network.","title":"Use AS-Path Prepending to Influence Incoming Traffic Flow"},{"location":"policy/7-prepend/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. Each autonomous system advertises a single IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 rtr 10.0.0.1 65000 x1 65100 10.1.0.2 x2 65101 10.1.0.6","title":"Existing BGP Configuration"},{"location":"policy/7-prepend/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to policy/7-prepend Execute netlab up ( device requirements , other options ) Log into your device (RTR) with netlab connect rtr and verify IP addresses and BGP configuration. Note: netlab will configure IP addressing, EBGP sessions, and BGP prefix advertisements on your router. If you\u2019re not using netlab , continue with the configuration you made during the Advertise IPv4 Prefixes to BGP Neighbors or Select Preferred EBGP Peer with Weights exercises.","title":"Start the Lab"},{"location":"policy/7-prepend/#wtf","text":"Log into X2 and check its BGP table. Use the sudo vtysh -c 'show ip bgp' command if you\u2019re running Cumulus Linux on X2: $ netlab connect x2 sudo vtysh -c 'show ip bgp' Connecting to container clab-prepend-x2, executing sudo vtysh -c \"show ip bgp\" BGP table version is 3, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 65101 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path * 192.168.42.0/24 10.1.0.9 0 65100 65000 ? *> 10.1.0.5 0 65000 ? * 192.168.100.0/24 10.1.0.5 0 65000 65100 i *> 10.1.0.9 0 0 65100 i *> 192.168.101.0/24 0.0.0.0 0 32768 i Displayed 3 routes and 5 total paths As expected, while X2 receives a route to 192.168.42.0/24 from X1, it prefers the one received from your router over the RTR-X2 link. Cumulus Linux explains how it selected the best BGP route in its detailed BGP prefix information printout \u2013 in this case, X2 chose the path with the shorter AS-path length: $ netlab connect x2 sudo vtysh -c 'show ip bgp 192.168.42.0' Connecting to container clab-prepend-x2, executing sudo vtysh -c \"show ip bgp 192.168.42.0\" BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #2, table default) Advertised to non peer-group peers: 10.1.0.5 x1(10.1.0.9) 65100 65000 10.1.0.9 from x1(10.1.0.9) (10.0.0.10) Origin incomplete, valid, external, bestpath-from-AS 65100 Last update: Thu Nov 9 09:24:51 2023 65000 10.1.0.5 from 10.1.0.5 (10.0.0.1) Origin incomplete, valid, external, bestpath-from-AS 65000, best (AS Path) Last update: Thu Nov 9 09:24:50 2023","title":"What Do We Have to Fix?"},{"location":"policy/7-prepend/#configuration-tasks","text":"You want X2 to prefer routes to your autonomous system going through X1. As X2 selects the best path based on its AS-path length, you\u2019ll artificially increase the length of the AS-path in the updates your router sends to X2. To do that, you\u2019ll have to: Create a simple routing policy (often called a route map ) Configure AS-path prepending in that routing policy. The AS-path X2 receives from X1 has two AS numbers; you\u2019ll have to prepend your AS number at least twice to ensure the direct path is worse than the path X2-X1-RTR. Apply the routing policy to the outgoing updates sent from your router to X2. Warning Some devices allow you to configure either the number of times they prepend your AS number to the AS path or the content of the AS path. Make sure you won\u2019t prepend AS 2 to the AS path. While you can prepend any AS number to the AS path (assuming your device allows you to specify the content of the AS path), never prepend AS numbers other than your own. Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change their BGP tables; your router might evaluate the new parameters only when sending new updates. You might have to use a command similar to clear ip bgp * soft out to tell your router to resend the BGP updates to its neighbors.","title":"Configuration Tasks"},{"location":"policy/7-prepend/#verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on X1 and X2. The validation tests check: The state of the EBGP session between RTR and X1/X2. The AS path of IPv4 prefix 192.168.42.0/24 advertised to X2 from RTR and X1. Whether X2 prefers the transit path through X1 over the direct EBGP path to RTR. This is the printout you should get after completing the lab exercise: You can also use the commands from the What Do We Have to Fix section, log into X2, and verify that it now prefers the route to 192.168.42.0/24 going through X1. $ netlab connect x2 sudo vtysh -c 'show ip bgp 192.168.42.0' Connecting to container clab-prepend-x2, executing sudo vtysh -c \"show ip bgp 192.168.42.0\" BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #1, table default) Advertised to non peer-group peers: 10.1.0.5 x1(10.1.0.9) 65100 65000 10.1.0.9 from x1(10.1.0.9) (10.0.0.10) Origin incomplete, valid, external, bestpath-from-AS 65100, best (AS Path) Last update: Thu Nov 9 09:24:51 2023 65000 65000 65000 10.1.0.5 from 10.1.0.5 (10.0.0.1) Origin incomplete, valid, external, bestpath-from-AS 65000 Last update: Thu Nov 9 10:06:39 2023","title":"Verification"},{"location":"policy/7-prepend/#reference-information","text":"This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"policy/7-prepend/#req","text":"Customer- and external routers: use any device supported by the netlab BGP and OSPF configuration modules . You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on external routers. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"policy/7-prepend/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2","title":"Lab Wiring"},{"location":"policy/7-prepend/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 192.168.101.1/24 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1","title":"Lab Addressing"},{"location":"policy/8-community-attach/","text":"Attach BGP Communities to Outgoing BGP Updates In previous lab exercises, you figured out how to nudge an adjacent network to prefer one of the links with the Multi-Exit Discriminator attribute , and how to push a bit harder with AS path prepending . Sometimes, more than that is needed, and in this lab exercise, you\u2019ll have to deal with a scenario in which a Service Provider routing policy interferes strongly with your intentions. You have two sites. One is connected to two Service Providers (ISP-1 and ISP-2), and the other has only one uplink (to ISP-2). The link from Site-1 to ISP-1 is significantly faster than the alternate link, and you\u2019d like to use it exclusively. The traffic from Site-2 to Site-1 should therefore flow through ISP-2 and ISP-1 (C2\u2192X2\u2192X1\u2192C1) In this lab, you\u2019ll try to influence the Service Provider route selection with AS path prepending and use BGP communities to tell them what changes you\u2019d like them to make to their routing policy. Initial Router Configurations The routers in your lab use the following BGP AS numbers. Each autonomous system advertises an IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 c1 10.0.0.1 192.168.42.0/24 AS65001 c2 10.0.0.2 192.168.37.0/24 AS65207 x1 10.0.0.10 172.17.207.0/24 AS65304 x2 10.0.0.11 172.23.4.0/24 Your routers have these BGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 c1 10.0.0.1 65000 x1 65207 10.1.0.2 x2 65304 10.1.0.6 c2 10.0.0.2 65001 x2 65304 10.1.0.14 Start the Lab Assuming you already set up your lab infrastructure : Change directory to policy/8-community-attach Execute netlab up ( device requirements ). You can also deploy the lab on some other lab infrastructure . Log into your devices (C1 and C2) with netlab connect and verify their configurations. Note: netlab will configure IP addressing, BGP, EBGP sessions, and BGP prefix advertisements on your routers. If you\u2019re not using netlab , you must configure your routers manually. Warning This lab requires additional configuration on X2. That configuration is currently available only for Arista EOS, Cumulus Linux, and FRR \u2013 you have to use one of those devices as the external BGP router(s). Default Traffic Flow After starting the lab, log into C2 and examine its BGP table, looking for prefixes advertised by C1. You should get a printout similar to this one (generated on Arista cEOS) 1 : c2>show ip bgp | include 192.168.42.0 * > 192.168.42.0/24 10.1.0.14 0 - 100 0 65304 65000 ? As you can see, X2 decided to reach AS 65100 over the direct link. Let\u2019s fix that with AS path prepending. Configure AS Path Prepending X2 might select the path through X1 as the best path toward Site-1 (AS 65100) if you inject enough copies of your AS number into the BGP updates C1 sends to X2. Following the procedure outlined in the Use AS-Path Prepending to Influence Incoming Traffic Flow exercise, extend the AS path of the prefixes C1 sends to X2. If that doesn\u2019t work, prepend more copies of your AS to the AS path. Eventually, you\u2019ll figure out that no amount of prepending fixes the problem. X2 stubbornly uses the direct path to Site-1 (X2-C1) even if you prepend many copies of 65000 to the AS path. Here\u2019s the relevant printout from C2: c2>show ip bgp | include 192.168.42.0 * > 192.168.42.0/24 10.1.0.14 0 - 100 0 65304 65000 65000 65000 65000 65000 65000 65000 65000 ? BGP Communities to the Rescue It\u2019s time to give up and give ISP-2 a call. After enjoying the on-hold music for too long and going through too many escalation steps, you might find someone who understands what you\u2019re trying to do, pointing you to an online document describing how ISP-2 uses BGP communities. That document might contain a description along these lines 2 : All customer routes received by ISP-2 are assigned a local preference 200. Customers can alter this local preference using the following BGP communities: Community Local Pref Effect 65304:102 190 Used for customer backup when multi-homed to ISP-2 65304:101 100 Sets local preference equal to transit routes 65304:100 50 Lowest possible value. Used for backup when multi-homed to multiple providers It looks like your woes could be fixed by using community 65304:100. Here\u2019s what you have to do: You already created a routing policy on C1 to implement AS path prepending. If you skipped that step, create a new routing policy (often called a route map ) on C1. You have already used routing policies in previous lab exercises and should be familiar with them. In the routing policy, set the BGP community to 65304:100 Attach the routing policy to outgoing updates C1 sends to X2. If needed, configure BGP community propagation on C1 with a BGP configuration command similar to neighbor address send-community . Warning Many BGP implementations strip BGP communities from outgoing BGP updates by default. Your routing policy might be perfect, but it will only affect the EBGP updates if you configure BGP community propagation. Even worse, if you use a command like show ip bgp neighbor address advertised-routes prefix , it might not show the BGP community 3 , leading you to the conclusion that your routing policy might be broken. Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table, as the new routing policy might be evaluated only on new incoming updates. You might have to use a command similar to clear ip bgp * soft to tell your router to resend BGP updates to its neighbors. Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on X1 and X2. The validation tests check: The state of the EBGP session between RTR and X1/X2. Whether C1 is advertising its IPv4 prefix Whether C1 attaches the expected community to the EBGP update sent to X2 Whether X2 lowers the local preference of EBGP path advertised by C1 Whether X2 prefers the transit path (X2-X1-C1) over the direct path (X2-C1). This is the printout you should get after completing the lab exercise: You can also reexamine the BGP table on C2. If you did everything right, you\u2019d see that X2 changed its mind and now advertises the path through X1 (AS 65207) as the best path: c2>show ip bgp | include 192.168.42.0 * > 192.168.42.0/24 10.1.0.14 0 - 100 0 65304 65207 65000 ? Want to know how the magic works behind the scenes? Log into X2 and inspect its BGP table. This is how you would do it on Cumulus Linux 4 (this command also comes in handy if you did something wrong and have to figure out what\u2019s going on): $ netlab connect x2 vtysh -c 'show ip bgp 192.168.42.0' Connecting to container clab-a_community-x2, executing vtysh -c \"show ip bgp 192.168.42.0\" BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #2, table default) Advertised to non peer-group peers: 10.1.0.5 x1(10.1.0.9) 10.1.0.13 65000 65000 65000 65000 65000 65000 65000 65000 10.1.0.5 from 10.1.0.5 (10.0.0.1) Origin incomplete, localpref 50, valid, external, bestpath-from-AS 65000 Community: 65304:100 Last update: Sat Nov 11 08:42:42 2023 65207 65000 10.1.0.9 from x1(10.1.0.9) (10.0.0.10) Origin incomplete, valid, external, bestpath-from-AS 65207, best (Local Pref) Last update: Sat Nov 11 08:41:49 2023 Next: Use No-Export Community to Filter Transit Routes Use BGP Communities in Routing Policies Resolve BGP Wedgies Reference Information This lab uses the 4-router lab topology . Some links are unused to retain the interface names from that topology. The following information might help you if you plan to build custom lab infrastructure: Device Requirements Customer routers: use any device supported by the netlab BGP configuration modules . External routers: while you can use any device supported by the netlab BGP configuration modules , X2 requires additional configuration that is only available for Arista EOS, Cumulus Linux, and FRR. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on external routers. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux. Lab Wiring Link Name Origin Device Origin Port Destination Device Destination Port Primary uplink c1 Ethernet1 x1 swp1 Backup uplink c1 Ethernet2 x2 swp1 Inter-ISP link x1 swp2 x2 swp2 Unused link c2 Ethernet1 x1 swp3 Site 2, uplink 2 c2 Ethernet2 x2 swp3 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 Primary uplink Ethernet2 10.1.0.5/30 Backup uplink c2 10.0.0.2/32 Loopback Ethernet1 Unused link Ethernet2 10.1.0.13/30 Site 2 uplink x1 172.17.207.1/24 Loopback swp1 10.1.0.2/30 Primary uplink swp2 10.1.0.9/30 Inter-ISP link swp3 Unused link x2 172.23.4.1/24 Loopback swp1 10.1.0.6/30 Backup uplink swp2 10.1.0.10/30 Inter-ISP link swp3 10.1.0.14/30 Site 2 uplink I\u2019m using the concise printout of the BGP table ( show ip bgp ) with an output filter to reduce the amount of information you have to sift through. You could also use a command similar to show ip bgp 192.168.42.0 \u21a9 Based on an actual ISP document \u21a9 Details are implementation-dependent. I observed this behavior on Arista EOS. \u21a9 You should also inspect the configuration of X2 to get some hints for one of the upcoming lab exercises. \u21a9","title":"Attach BGP Communities to Outgoing BGP Updates"},{"location":"policy/8-community-attach/#attach-bgp-communities-to-outgoing-bgp-updates","text":"In previous lab exercises, you figured out how to nudge an adjacent network to prefer one of the links with the Multi-Exit Discriminator attribute , and how to push a bit harder with AS path prepending . Sometimes, more than that is needed, and in this lab exercise, you\u2019ll have to deal with a scenario in which a Service Provider routing policy interferes strongly with your intentions. You have two sites. One is connected to two Service Providers (ISP-1 and ISP-2), and the other has only one uplink (to ISP-2). The link from Site-1 to ISP-1 is significantly faster than the alternate link, and you\u2019d like to use it exclusively. The traffic from Site-2 to Site-1 should therefore flow through ISP-2 and ISP-1 (C2\u2192X2\u2192X1\u2192C1) In this lab, you\u2019ll try to influence the Service Provider route selection with AS path prepending and use BGP communities to tell them what changes you\u2019d like them to make to their routing policy.","title":"Attach BGP Communities to Outgoing BGP Updates"},{"location":"policy/8-community-attach/#initial-router-configurations","text":"The routers in your lab use the following BGP AS numbers. Each autonomous system advertises an IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 c1 10.0.0.1 192.168.42.0/24 AS65001 c2 10.0.0.2 192.168.37.0/24 AS65207 x1 10.0.0.10 172.17.207.0/24 AS65304 x2 10.0.0.11 172.23.4.0/24 Your routers have these BGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 c1 10.0.0.1 65000 x1 65207 10.1.0.2 x2 65304 10.1.0.6 c2 10.0.0.2 65001 x2 65304 10.1.0.14","title":"Initial Router Configurations"},{"location":"policy/8-community-attach/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to policy/8-community-attach Execute netlab up ( device requirements ). You can also deploy the lab on some other lab infrastructure . Log into your devices (C1 and C2) with netlab connect and verify their configurations. Note: netlab will configure IP addressing, BGP, EBGP sessions, and BGP prefix advertisements on your routers. If you\u2019re not using netlab , you must configure your routers manually. Warning This lab requires additional configuration on X2. That configuration is currently available only for Arista EOS, Cumulus Linux, and FRR \u2013 you have to use one of those devices as the external BGP router(s).","title":"Start the Lab"},{"location":"policy/8-community-attach/#default-traffic-flow","text":"After starting the lab, log into C2 and examine its BGP table, looking for prefixes advertised by C1. You should get a printout similar to this one (generated on Arista cEOS) 1 : c2>show ip bgp | include 192.168.42.0 * > 192.168.42.0/24 10.1.0.14 0 - 100 0 65304 65000 ? As you can see, X2 decided to reach AS 65100 over the direct link. Let\u2019s fix that with AS path prepending.","title":"Default Traffic Flow"},{"location":"policy/8-community-attach/#configure-as-path-prepending","text":"X2 might select the path through X1 as the best path toward Site-1 (AS 65100) if you inject enough copies of your AS number into the BGP updates C1 sends to X2. Following the procedure outlined in the Use AS-Path Prepending to Influence Incoming Traffic Flow exercise, extend the AS path of the prefixes C1 sends to X2. If that doesn\u2019t work, prepend more copies of your AS to the AS path. Eventually, you\u2019ll figure out that no amount of prepending fixes the problem. X2 stubbornly uses the direct path to Site-1 (X2-C1) even if you prepend many copies of 65000 to the AS path. Here\u2019s the relevant printout from C2: c2>show ip bgp | include 192.168.42.0 * > 192.168.42.0/24 10.1.0.14 0 - 100 0 65304 65000 65000 65000 65000 65000 65000 65000 65000 ?","title":"Configure AS Path Prepending"},{"location":"policy/8-community-attach/#bgp-communities-to-the-rescue","text":"It\u2019s time to give up and give ISP-2 a call. After enjoying the on-hold music for too long and going through too many escalation steps, you might find someone who understands what you\u2019re trying to do, pointing you to an online document describing how ISP-2 uses BGP communities. That document might contain a description along these lines 2 : All customer routes received by ISP-2 are assigned a local preference 200. Customers can alter this local preference using the following BGP communities: Community Local Pref Effect 65304:102 190 Used for customer backup when multi-homed to ISP-2 65304:101 100 Sets local preference equal to transit routes 65304:100 50 Lowest possible value. Used for backup when multi-homed to multiple providers It looks like your woes could be fixed by using community 65304:100. Here\u2019s what you have to do: You already created a routing policy on C1 to implement AS path prepending. If you skipped that step, create a new routing policy (often called a route map ) on C1. You have already used routing policies in previous lab exercises and should be familiar with them. In the routing policy, set the BGP community to 65304:100 Attach the routing policy to outgoing updates C1 sends to X2. If needed, configure BGP community propagation on C1 with a BGP configuration command similar to neighbor address send-community . Warning Many BGP implementations strip BGP communities from outgoing BGP updates by default. Your routing policy might be perfect, but it will only affect the EBGP updates if you configure BGP community propagation. Even worse, if you use a command like show ip bgp neighbor address advertised-routes prefix , it might not show the BGP community 3 , leading you to the conclusion that your routing policy might be broken. Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table, as the new routing policy might be evaluated only on new incoming updates. You might have to use a command similar to clear ip bgp * soft to tell your router to resend BGP updates to its neighbors.","title":"BGP Communities to the Rescue"},{"location":"policy/8-community-attach/#verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on X1 and X2. The validation tests check: The state of the EBGP session between RTR and X1/X2. Whether C1 is advertising its IPv4 prefix Whether C1 attaches the expected community to the EBGP update sent to X2 Whether X2 lowers the local preference of EBGP path advertised by C1 Whether X2 prefers the transit path (X2-X1-C1) over the direct path (X2-C1). This is the printout you should get after completing the lab exercise: You can also reexamine the BGP table on C2. If you did everything right, you\u2019d see that X2 changed its mind and now advertises the path through X1 (AS 65207) as the best path: c2>show ip bgp | include 192.168.42.0 * > 192.168.42.0/24 10.1.0.14 0 - 100 0 65304 65207 65000 ? Want to know how the magic works behind the scenes? Log into X2 and inspect its BGP table. This is how you would do it on Cumulus Linux 4 (this command also comes in handy if you did something wrong and have to figure out what\u2019s going on): $ netlab connect x2 vtysh -c 'show ip bgp 192.168.42.0' Connecting to container clab-a_community-x2, executing vtysh -c \"show ip bgp 192.168.42.0\" BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #2, table default) Advertised to non peer-group peers: 10.1.0.5 x1(10.1.0.9) 10.1.0.13 65000 65000 65000 65000 65000 65000 65000 65000 10.1.0.5 from 10.1.0.5 (10.0.0.1) Origin incomplete, localpref 50, valid, external, bestpath-from-AS 65000 Community: 65304:100 Last update: Sat Nov 11 08:42:42 2023 65207 65000 10.1.0.9 from x1(10.1.0.9) (10.0.0.10) Origin incomplete, valid, external, bestpath-from-AS 65207, best (Local Pref) Last update: Sat Nov 11 08:41:49 2023 Next: Use No-Export Community to Filter Transit Routes Use BGP Communities in Routing Policies Resolve BGP Wedgies","title":"Verification"},{"location":"policy/8-community-attach/#reference-information","text":"This lab uses the 4-router lab topology . Some links are unused to retain the interface names from that topology. The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"policy/8-community-attach/#req","text":"Customer routers: use any device supported by the netlab BGP configuration modules . External routers: while you can use any device supported by the netlab BGP configuration modules , X2 requires additional configuration that is only available for Arista EOS, Cumulus Linux, and FRR. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on external routers. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"policy/8-community-attach/#lab-wiring","text":"Link Name Origin Device Origin Port Destination Device Destination Port Primary uplink c1 Ethernet1 x1 swp1 Backup uplink c1 Ethernet2 x2 swp1 Inter-ISP link x1 swp2 x2 swp2 Unused link c2 Ethernet1 x1 swp3 Site 2, uplink 2 c2 Ethernet2 x2 swp3","title":"Lab Wiring"},{"location":"policy/8-community-attach/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 Primary uplink Ethernet2 10.1.0.5/30 Backup uplink c2 10.0.0.2/32 Loopback Ethernet1 Unused link Ethernet2 10.1.0.13/30 Site 2 uplink x1 172.17.207.1/24 Loopback swp1 10.1.0.2/30 Primary uplink swp2 10.1.0.9/30 Inter-ISP link swp3 Unused link x2 172.23.4.1/24 Loopback swp1 10.1.0.6/30 Backup uplink swp2 10.1.0.10/30 Inter-ISP link swp3 10.1.0.14/30 Site 2 uplink I\u2019m using the concise printout of the BGP table ( show ip bgp ) with an output filter to reduce the amount of information you have to sift through. You could also use a command similar to show ip bgp 192.168.42.0 \u21a9 Based on an actual ISP document \u21a9 Details are implementation-dependent. I observed this behavior on Arista EOS. \u21a9 You should also inspect the configuration of X2 to get some hints for one of the upcoming lab exercises. \u21a9","title":"Lab Addressing"},{"location":"policy/9-community-use/","text":"Use BGP Communities in Routing Policies In the previous lab exercise, you set a BGP community on outbound updates to tell the upstream ISP to reduce its local preference. In this lab, you\u2019ll implement the ISP part of that solution: changing the BGP local preference based on the BGP communities attached to incoming BGP routes. Initial Router Configurations The routers in your lab use the following BGP AS numbers. The customer is advertising IPv4 172.17.207.0/24 . Node/ASN Router ID Advertised prefixes AS65000 (your network) isp 10.0.0.1 10.0.0.1/32 AS65207 (peer ISP) x 10.0.0.11 AS65304 (customer) c 10.0.0.10 172.17.207.0/24 Your router has these BGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 isp 10.0.0.1 65000 c 65304 10.1.0.1 x 65207 10.1.0.6 Start the Lab Assuming you already set up your lab infrastructure : Change directory to policy/9-community-use . Execute netlab up ( device requirements ). You can also deploy the lab on some other lab infrastructure . Log into your device (ISP) with netlab connect and verify its configurations. Warning netlab will configure IP addressing, BGP, EBGP sessions, and BGP prefix advertisements on all devices in your lab. If you\u2019re not using netlab , use the device configurations supplied in the GitHub repository to configure C and X and configure ISP manually. This lab requires additional configuration on C. That configuration is currently available for Arista EOS, Cumulus Linux, and FRR \u2013 you have to use one of those devices as the external BGP router(s). Default Traffic Flow After starting the lab, log into ISP and examine its BGP table, looking for the IPv4 prefixes advertised by C ( 172.17.207.9/24 ). You should get a printout similar to this one (generated on Arista cEOS): isp>show ip bgp 172.17.207.0 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 172.17.207.0/24 Paths: 2 available 65304 10.1.0.1 from 10.1.0.1 (10.0.0.10) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 0, tag 0 Received 00:00:15 ago, valid, external, best Community: 65000:50 Rx SAFI: Unicast 65207 65304 10.1.0.6 from 10.1.0.6 (10.0.0.11) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 0, tag 0 Received 00:00:19 ago, valid, external Rx SAFI: Unicast As you can see, your router uses the customer\u2019s backup link to reach it. Let\u2019s fix that: you\u2019ll use the BGP community attached to the customer\u2019s route ( 65000:50 ) to reduce its local preference. Configure Routing Policy Configure the following routing policy (inspired by RFC 1998 ) on your router and apply it to BGP updates coming from all its BGP neighbors: When a BGP route has a BGP community of 65000:50 , set its local preference to 50. Otherwise, set the local preference of a BGP route to 200. You might have to use configuration commands similar to these to get the job done: You have to match BGP communities \u2013 create an object ( ip community-list or bgp community-list ) matching BGP community 65000:50. Create a routing policy (often called a route-map ) that uses the community-matching object (a typical command would be match community ) and sets the local preference to 50 ( set local-preference ). Add another item to the routing policy to set the default local preference to 200. Apply the routing policy to BGP neighbors with a command similar to neighbor route-map in . Warning Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table, as the new routing policy might be evaluated only on new incoming updates. You might have to use a command similar to clear ip bgp * soft in to tell your BGP neighbors to resend their updates. Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on your router. The validation tests check: The state of the EBGP session between ISP and C/X. Whether RTR receives the prefix 172.17.207.1/24 from C and X. Whether the prefix received from C has a BGP local preference of 50 and the prefix received from X has a BGP local preference of 200. This is the printout you should get after completing the lab exercise: You can also examine the BGP table on the ISP router. If you did everything right, you\u2019d see that the ISP router reduced the local preference of the BGP route received from C and started using the BGP route received from X as the best path toward 172.17.207.0/24 : isp#show ip bgp 172.17.207.0 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 172.17.207.0/24 Paths: 2 available 65207 65304 10.1.0.6 from 10.1.0.6 (10.0.0.11) Origin IGP, metric 0, localpref 200, IGP metric 0, weight 0, tag 0 Received 00:19:18 ago, valid, external, best Rx SAFI: Unicast 65304 10.1.0.1 from 10.1.0.1 (10.0.0.10) Origin IGP, metric 0, localpref 50, IGP metric 0, weight 0, tag 0 Received 00:19:14 ago, valid, external Community: 65000:50 Rx SAFI: Unicast Reference Information This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Use any device supported by the netlab BGP configuration modules for your router (ISP). While you can use any device supported by the netlab BGP configuration modules for other lab routers, router C requires additional configuration that is only available for Arista EOS, Cisco IOSv, Cisco IOS XE, Cumulus Linux, and FRR. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on the lab routers. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains initial device configurations for Cumulus Linux. Lab Wiring Link Name Origin Device Origin Port Destination Device Destination Port Customer uplink to ISP isp Ethernet1 c swp1 Link to peer ISP isp Ethernet2 x swp1 Customer uplink to peer ISP c swp2 x swp2 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description c 172.17.207.1/24 Loopback swp1 10.1.0.1/30 Customer uplink to ISP swp2 10.1.0.9/30 Customer uplink to peer ISP isp 10.0.0.1/32 Loopback Ethernet1 10.1.0.2/30 Customer uplink to ISP Ethernet2 10.1.0.5/30 Link to peer ISP x 10.0.0.11/32 Loopback swp1 10.1.0.6/30 Link to peer ISP swp2 10.1.0.10/30 Customer uplink to peer ISP","title":"Use BGP Communities in Routing Policies"},{"location":"policy/9-community-use/#use-bgp-communities-in-routing-policies","text":"In the previous lab exercise, you set a BGP community on outbound updates to tell the upstream ISP to reduce its local preference. In this lab, you\u2019ll implement the ISP part of that solution: changing the BGP local preference based on the BGP communities attached to incoming BGP routes.","title":"Use BGP Communities in Routing Policies"},{"location":"policy/9-community-use/#initial-router-configurations","text":"The routers in your lab use the following BGP AS numbers. The customer is advertising IPv4 172.17.207.0/24 . Node/ASN Router ID Advertised prefixes AS65000 (your network) isp 10.0.0.1 10.0.0.1/32 AS65207 (peer ISP) x 10.0.0.11 AS65304 (customer) c 10.0.0.10 172.17.207.0/24 Your router has these BGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 isp 10.0.0.1 65000 c 65304 10.1.0.1 x 65207 10.1.0.6","title":"Initial Router Configurations"},{"location":"policy/9-community-use/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to policy/9-community-use . Execute netlab up ( device requirements ). You can also deploy the lab on some other lab infrastructure . Log into your device (ISP) with netlab connect and verify its configurations. Warning netlab will configure IP addressing, BGP, EBGP sessions, and BGP prefix advertisements on all devices in your lab. If you\u2019re not using netlab , use the device configurations supplied in the GitHub repository to configure C and X and configure ISP manually. This lab requires additional configuration on C. That configuration is currently available for Arista EOS, Cumulus Linux, and FRR \u2013 you have to use one of those devices as the external BGP router(s).","title":"Start the Lab"},{"location":"policy/9-community-use/#default-traffic-flow","text":"After starting the lab, log into ISP and examine its BGP table, looking for the IPv4 prefixes advertised by C ( 172.17.207.9/24 ). You should get a printout similar to this one (generated on Arista cEOS): isp>show ip bgp 172.17.207.0 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 172.17.207.0/24 Paths: 2 available 65304 10.1.0.1 from 10.1.0.1 (10.0.0.10) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 0, tag 0 Received 00:00:15 ago, valid, external, best Community: 65000:50 Rx SAFI: Unicast 65207 65304 10.1.0.6 from 10.1.0.6 (10.0.0.11) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 0, tag 0 Received 00:00:19 ago, valid, external Rx SAFI: Unicast As you can see, your router uses the customer\u2019s backup link to reach it. Let\u2019s fix that: you\u2019ll use the BGP community attached to the customer\u2019s route ( 65000:50 ) to reduce its local preference.","title":"Default Traffic Flow"},{"location":"policy/9-community-use/#configure-routing-policy","text":"Configure the following routing policy (inspired by RFC 1998 ) on your router and apply it to BGP updates coming from all its BGP neighbors: When a BGP route has a BGP community of 65000:50 , set its local preference to 50. Otherwise, set the local preference of a BGP route to 200. You might have to use configuration commands similar to these to get the job done: You have to match BGP communities \u2013 create an object ( ip community-list or bgp community-list ) matching BGP community 65000:50. Create a routing policy (often called a route-map ) that uses the community-matching object (a typical command would be match community ) and sets the local preference to 50 ( set local-preference ). Add another item to the routing policy to set the default local preference to 200. Apply the routing policy to BGP neighbors with a command similar to neighbor route-map in . Warning Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table, as the new routing policy might be evaluated only on new incoming updates. You might have to use a command similar to clear ip bgp * soft in to tell your BGP neighbors to resend their updates.","title":"Configure Routing Policy"},{"location":"policy/9-community-use/#verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on your router. The validation tests check: The state of the EBGP session between ISP and C/X. Whether RTR receives the prefix 172.17.207.1/24 from C and X. Whether the prefix received from C has a BGP local preference of 50 and the prefix received from X has a BGP local preference of 200. This is the printout you should get after completing the lab exercise: You can also examine the BGP table on the ISP router. If you did everything right, you\u2019d see that the ISP router reduced the local preference of the BGP route received from C and started using the BGP route received from X as the best path toward 172.17.207.0/24 : isp#show ip bgp 172.17.207.0 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 172.17.207.0/24 Paths: 2 available 65207 65304 10.1.0.6 from 10.1.0.6 (10.0.0.11) Origin IGP, metric 0, localpref 200, IGP metric 0, weight 0, tag 0 Received 00:19:18 ago, valid, external, best Rx SAFI: Unicast 65304 10.1.0.1 from 10.1.0.1 (10.0.0.10) Origin IGP, metric 0, localpref 50, IGP metric 0, weight 0, tag 0 Received 00:19:14 ago, valid, external Community: 65000:50 Rx SAFI: Unicast","title":"Verification"},{"location":"policy/9-community-use/#reference-information","text":"This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"policy/9-community-use/#req","text":"Use any device supported by the netlab BGP configuration modules for your router (ISP). While you can use any device supported by the netlab BGP configuration modules for other lab routers, router C requires additional configuration that is only available for Arista EOS, Cisco IOSv, Cisco IOS XE, Cumulus Linux, and FRR. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on the lab routers. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"policy/9-community-use/#lab-wiring","text":"Link Name Origin Device Origin Port Destination Device Destination Port Customer uplink to ISP isp Ethernet1 c swp1 Link to peer ISP isp Ethernet2 x swp1 Customer uplink to peer ISP c swp2 x swp2","title":"Lab Wiring"},{"location":"policy/9-community-use/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description c 172.17.207.1/24 Loopback swp1 10.1.0.1/30 Customer uplink to ISP swp2 10.1.0.9/30 Customer uplink to peer ISP isp 10.0.0.1/32 Loopback Ethernet1 10.1.0.2/30 Customer uplink to ISP Ethernet2 10.1.0.5/30 Link to peer ISP x 10.0.0.11/32 Loopback swp1 10.1.0.6/30 Link to peer ISP swp2 10.1.0.10/30 Customer uplink to peer ISP","title":"Lab Addressing"},{"location":"policy/a-locpref-route-map/","text":"BGP Local Preference in a Complex Routing Policy In a previous lab exercise, you used BGP local preference to prefer a high-speed uplink over a low-speed uplink . That approach works well if you leave the backup link idle while the primary link is operational. Now, imagine that you want to send at least some of the traffic over the backup link that is connected to a different ISP: In this lab, you\u2019ll create a routing policy using BGP local preference to: Send traffic toward prefixes in AS 65101 over the C2-X2 link Send all other traffic over the C1-X1 link Initial Router Configurations The routers in your lab use the following BGP AS numbers. Each autonomous system advertises an IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 c1 10.0.0.1 192.168.42.0/24 c2 10.0.0.2 192.168.42.0/24 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your routers have these BGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 c1 10.0.0.1 65000 c2 65000 10.0.0.2 x1 65100 10.1.0.2 c2 10.0.0.2 65000 c1 65000 10.0.0.1 x2 65101 10.1.0.10 Your network is also running OSPF in the backbone area: Router Interface IPv4 Address Neighbor(s) c1 Loopback 10.0.0.1/32 Ethernet3 192.168.42.1/24 c2 c2 Loopback 10.0.0.2/32 Ethernet3 192.168.42.2/24 c1 External Autonomous Systems Three other autonomous systems (AS65200, AS65205 and AS65207) are connected to the upstream ISPs: The external autonomous systems advertise these prefixes: Node/ASN Router ID Advertised prefixes AS65200 uc200 192.168.200.1 192.168.200.0/24 AS65205 uc205 192.168.205.1 192.168.205.0/24 AS65207 uc207 192.168.207.1 192.168.207.0/24 The virtual lab topology uses three additional devices to implement the external autonomous systems. If your lab environment is low on memory, or if you want to use lab infrastructure that is not managed by netlab , you can use the common 4-router lab topology with Cumulus Linux as the external devices (additional autonomous systems are emulated during BGP prefix origination on X1 and X2). Start the Lab Assuming you already set up your lab infrastructure : Change directory to policy/a-locpref-route-map Execute netlab up if you have enough memory to start a 7-node lab ( device requirements ) or netlab up topology.4-router.yml if you want to create a 4-node lab 1 . You can also deploy the lab on your lab infrastructure . Log into your devices (C1 and C2) with netlab connect and verify their configurations. Note: netlab will configure IP addressing, OSPF, BGP, IBGP sessions, EBGP sessions, and BGP prefix advertisements on your routers. If you\u2019re not using netlab , you must manually configure your routers. Default Outgoing Traffic Flow After starting the lab, log into C2 and examine its BGP table. You should get a printout similar to this one (generated on Arista cEOS): c2>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.10 0 - 100 0 65101 i * 0.0.0.0/0 10.0.0.1 0 - 100 0 65100 i * > 192.168.42.0/24 - - - - 0 i * 192.168.42.0/24 10.0.0.1 0 - 100 0 i * > 192.168.100.0/24 10.0.0.1 0 - 100 0 65100 i * 192.168.100.0/24 10.1.0.10 0 - 100 0 65101 65100 i * > 192.168.101.0/24 10.1.0.10 0 - 100 0 65101 i * > 192.168.200.0/24 10.0.0.1 0 - 100 0 65100 65200 i * 192.168.200.0/24 10.1.0.10 0 - 100 0 65101 65100 65200 i * > 192.168.205.0/24 10.1.0.10 0 - 100 0 65101 65205 i * 192.168.205.0/24 10.0.0.1 0 - 100 0 65100 65205 i * > 192.168.207.0/24 10.1.0.10 0 - 100 0 65101 65207 i As you can see, C2 uses the C2-X2 link to reach AS 65100, AS 65205, and AS 65207. It also uses the C2-X2 link to reach unknown destinations (the default route points to X2). Hint: there\u2019s an easier way to find BGP prefixes using the C2-X2 link if your devices support printout filters with regular expressions \u2013 match all lines that include the \u2018>\u2019 character (best route) and 10.1.0.10 (the next hop): c2>show ip bgp | include >.*10.1.0.10 * > 0.0.0.0/0 10.1.0.10 0 - 100 0 65101 i * > 192.168.101.0/24 10.1.0.10 0 - 100 0 65101 i * > 192.168.205.0/24 10.1.0.10 0 - 100 0 65101 65205 i * > 192.168.207.0/24 10.1.0.10 0 - 100 0 65101 65207 i Implement Complex Routing Policy We want to use the C2-X2 link only for the traffic toward destinations in AS65101 \u2013 you will have to create a routing policy on C2 that will: Increase the local preference for BGP prefixes originating in AS 65101 (where the AS path ends with 65101) Decrease the local preference for the default route \u2013 BGP routers advertise the default route as belonging to their autonomous system Decrease the local preference for all other BGP prefixes received from AS 65101 Hint: you have probably used routing policies (often called route maps ) in previous lab exercises . You have also practiced: AS-path filters in the Filter Transit Routes exercise Prefix filters in the Minimize the Size of Your BGP Table exercise Warning Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table, as the new routing policy might be evaluated only on new incoming updates. You might have to use a command similar to clear ip bgp * soft in to tell your router to ask its neighbors to resend their BGP updates. Verification Examine the BGP table on C2 to verify the local preference of routes received from X2. You could use the simple show ip bgp command and sift through the printout, or use printout filters matching on the next hop ( 10.1.0.10 ), or display routes from a specific neighbor (assuming your device supports that) 2 . The following printout uses the last mechanism on Arista cEOS: c2#show ip bgp neighbors 10.1.0.10 routes | begin Network Network Next Hop Metric AIGP LocPref Weight Path * 0.0.0.0/0 10.1.0.10 0 - 50 0 65101 i * 192.168.100.0/24 10.1.0.10 0 - 50 0 65101 65100 i * > 192.168.101.0/24 10.1.0.10 0 - 200 0 65101 i * 192.168.200.0/24 10.1.0.10 0 - 50 0 65101 65100 65200 i * 192.168.205.0/24 10.1.0.10 0 - 50 0 65101 65205 i * 192.168.207.0/24 10.1.0.10 0 - 50 0 65101 65207 i As you can see: Routes originating in AS 65101 have local preference 200 and are used as the best routes All other routes advertised by AS 65101 have local preference 50 and are not used. Finally, you should log into C1 and examine routes received from C2. C1 should use C2 only to reach 192.168.101/24 . c1>show ip bgp neighbors 10.0.0.2 routes | begin Network Network Next Hop Metric AIGP LocPref Weight Path * 192.168.42.0/24 10.0.0.2 0 - 100 0 i * > 192.168.101.0/24 10.0.0.2 0 - 200 0 65101 i Tip C2 does not advertise routes it does not use to C1, so you won\u2019t be able to see any other routes from the C2 BGP table on C1. Reference Information Device Requirements Customer- and external routers: use any device supported by the netlab BGP and OSPF configuration modules . The 4-router topology requires additional configuration on X1 and X2. That configuration is only available for Arista EOS, Cumulus Linux, and FRR. Git repository contains external router initial device configurations for Cumulus Linux. Lab Wiring The minimized version of this lab uses a subset of the 4-router lab topology . Some links are unused to retain the interface names from that topology. Link Name Origin Device Origin Port Destination Device Destination Port Primary uplink c1 Ethernet1 x1 swp1 Unused link c1 Ethernet2 x2 swp1 Inter-ISP link x1 swp2 x2 swp2 Unused link c2 Ethernet1 x1 swp3 Backup uplink c2 Ethernet2 x2 swp3 Customer internal link c1 Ethernet3 c2 Ethernet3 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 Primary uplink Ethernet2 Unused link Ethernet3 192.168.42.1/24 Customer internal link c2 10.0.0.2/32 Loopback Ethernet1 Unused link Ethernet2 10.1.0.9/30 Backup uplink Ethernet3 192.168.42.2/24 Customer internal link x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 Primary uplink swp2 10.1.0.5/30 Inter-ISP link swp3 Unused link x2 192.168.101.1/24 Loopback swp1 Unused link swp2 10.1.0.6/30 Inter-ISP link swp3 10.1.0.10/30 Backup uplink The 4-node lab needs additional device configuration on X1 and X2. That configuration is only available for Arista EOS, Cumulus Linux, and FRR. \u21a9 Some devices (example: Arista cEOS) can display routes received from a neighbor (before being processed by inbound routing policies) and routes received and accepted from a neighbor (after the routing policies). Make sure you use the correct form of the show command. \u21a9","title":"BGP Local Preference in a Complex Routing Policy"},{"location":"policy/a-locpref-route-map/#bgp-local-preference-in-a-complex-routing-policy","text":"In a previous lab exercise, you used BGP local preference to prefer a high-speed uplink over a low-speed uplink . That approach works well if you leave the backup link idle while the primary link is operational. Now, imagine that you want to send at least some of the traffic over the backup link that is connected to a different ISP: In this lab, you\u2019ll create a routing policy using BGP local preference to: Send traffic toward prefixes in AS 65101 over the C2-X2 link Send all other traffic over the C1-X1 link","title":"BGP Local Preference in a Complex Routing Policy"},{"location":"policy/a-locpref-route-map/#initial-router-configurations","text":"The routers in your lab use the following BGP AS numbers. Each autonomous system advertises an IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 c1 10.0.0.1 192.168.42.0/24 c2 10.0.0.2 192.168.42.0/24 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your routers have these BGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 c1 10.0.0.1 65000 c2 65000 10.0.0.2 x1 65100 10.1.0.2 c2 10.0.0.2 65000 c1 65000 10.0.0.1 x2 65101 10.1.0.10 Your network is also running OSPF in the backbone area: Router Interface IPv4 Address Neighbor(s) c1 Loopback 10.0.0.1/32 Ethernet3 192.168.42.1/24 c2 c2 Loopback 10.0.0.2/32 Ethernet3 192.168.42.2/24 c1","title":"Initial Router Configurations"},{"location":"policy/a-locpref-route-map/#external-autonomous-systems","text":"Three other autonomous systems (AS65200, AS65205 and AS65207) are connected to the upstream ISPs: The external autonomous systems advertise these prefixes: Node/ASN Router ID Advertised prefixes AS65200 uc200 192.168.200.1 192.168.200.0/24 AS65205 uc205 192.168.205.1 192.168.205.0/24 AS65207 uc207 192.168.207.1 192.168.207.0/24 The virtual lab topology uses three additional devices to implement the external autonomous systems. If your lab environment is low on memory, or if you want to use lab infrastructure that is not managed by netlab , you can use the common 4-router lab topology with Cumulus Linux as the external devices (additional autonomous systems are emulated during BGP prefix origination on X1 and X2).","title":"External Autonomous Systems"},{"location":"policy/a-locpref-route-map/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to policy/a-locpref-route-map Execute netlab up if you have enough memory to start a 7-node lab ( device requirements ) or netlab up topology.4-router.yml if you want to create a 4-node lab 1 . You can also deploy the lab on your lab infrastructure . Log into your devices (C1 and C2) with netlab connect and verify their configurations. Note: netlab will configure IP addressing, OSPF, BGP, IBGP sessions, EBGP sessions, and BGP prefix advertisements on your routers. If you\u2019re not using netlab , you must manually configure your routers.","title":"Start the Lab"},{"location":"policy/a-locpref-route-map/#default-outgoing-traffic-flow","text":"After starting the lab, log into C2 and examine its BGP table. You should get a printout similar to this one (generated on Arista cEOS): c2>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 0.0.0.0/0 10.1.0.10 0 - 100 0 65101 i * 0.0.0.0/0 10.0.0.1 0 - 100 0 65100 i * > 192.168.42.0/24 - - - - 0 i * 192.168.42.0/24 10.0.0.1 0 - 100 0 i * > 192.168.100.0/24 10.0.0.1 0 - 100 0 65100 i * 192.168.100.0/24 10.1.0.10 0 - 100 0 65101 65100 i * > 192.168.101.0/24 10.1.0.10 0 - 100 0 65101 i * > 192.168.200.0/24 10.0.0.1 0 - 100 0 65100 65200 i * 192.168.200.0/24 10.1.0.10 0 - 100 0 65101 65100 65200 i * > 192.168.205.0/24 10.1.0.10 0 - 100 0 65101 65205 i * 192.168.205.0/24 10.0.0.1 0 - 100 0 65100 65205 i * > 192.168.207.0/24 10.1.0.10 0 - 100 0 65101 65207 i As you can see, C2 uses the C2-X2 link to reach AS 65100, AS 65205, and AS 65207. It also uses the C2-X2 link to reach unknown destinations (the default route points to X2). Hint: there\u2019s an easier way to find BGP prefixes using the C2-X2 link if your devices support printout filters with regular expressions \u2013 match all lines that include the \u2018>\u2019 character (best route) and 10.1.0.10 (the next hop): c2>show ip bgp | include >.*10.1.0.10 * > 0.0.0.0/0 10.1.0.10 0 - 100 0 65101 i * > 192.168.101.0/24 10.1.0.10 0 - 100 0 65101 i * > 192.168.205.0/24 10.1.0.10 0 - 100 0 65101 65205 i * > 192.168.207.0/24 10.1.0.10 0 - 100 0 65101 65207 i","title":"Default Outgoing Traffic Flow"},{"location":"policy/a-locpref-route-map/#implement-complex-routing-policy","text":"We want to use the C2-X2 link only for the traffic toward destinations in AS65101 \u2013 you will have to create a routing policy on C2 that will: Increase the local preference for BGP prefixes originating in AS 65101 (where the AS path ends with 65101) Decrease the local preference for the default route \u2013 BGP routers advertise the default route as belonging to their autonomous system Decrease the local preference for all other BGP prefixes received from AS 65101 Hint: you have probably used routing policies (often called route maps ) in previous lab exercises . You have also practiced: AS-path filters in the Filter Transit Routes exercise Prefix filters in the Minimize the Size of Your BGP Table exercise Warning Applying routing policy parameters to BGP neighbors doesn\u2019t necessarily change the BGP table, as the new routing policy might be evaluated only on new incoming updates. You might have to use a command similar to clear ip bgp * soft in to tell your router to ask its neighbors to resend their BGP updates.","title":"Implement Complex Routing Policy"},{"location":"policy/a-locpref-route-map/#verification","text":"Examine the BGP table on C2 to verify the local preference of routes received from X2. You could use the simple show ip bgp command and sift through the printout, or use printout filters matching on the next hop ( 10.1.0.10 ), or display routes from a specific neighbor (assuming your device supports that) 2 . The following printout uses the last mechanism on Arista cEOS: c2#show ip bgp neighbors 10.1.0.10 routes | begin Network Network Next Hop Metric AIGP LocPref Weight Path * 0.0.0.0/0 10.1.0.10 0 - 50 0 65101 i * 192.168.100.0/24 10.1.0.10 0 - 50 0 65101 65100 i * > 192.168.101.0/24 10.1.0.10 0 - 200 0 65101 i * 192.168.200.0/24 10.1.0.10 0 - 50 0 65101 65100 65200 i * 192.168.205.0/24 10.1.0.10 0 - 50 0 65101 65205 i * 192.168.207.0/24 10.1.0.10 0 - 50 0 65101 65207 i As you can see: Routes originating in AS 65101 have local preference 200 and are used as the best routes All other routes advertised by AS 65101 have local preference 50 and are not used. Finally, you should log into C1 and examine routes received from C2. C1 should use C2 only to reach 192.168.101/24 . c1>show ip bgp neighbors 10.0.0.2 routes | begin Network Network Next Hop Metric AIGP LocPref Weight Path * 192.168.42.0/24 10.0.0.2 0 - 100 0 i * > 192.168.101.0/24 10.0.0.2 0 - 200 0 65101 i Tip C2 does not advertise routes it does not use to C1, so you won\u2019t be able to see any other routes from the C2 BGP table on C1.","title":"Verification"},{"location":"policy/a-locpref-route-map/#reference-information","text":"","title":"Reference Information"},{"location":"policy/a-locpref-route-map/#req","text":"Customer- and external routers: use any device supported by the netlab BGP and OSPF configuration modules . The 4-router topology requires additional configuration on X1 and X2. That configuration is only available for Arista EOS, Cumulus Linux, and FRR. Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"policy/a-locpref-route-map/#lab-wiring","text":"The minimized version of this lab uses a subset of the 4-router lab topology . Some links are unused to retain the interface names from that topology. Link Name Origin Device Origin Port Destination Device Destination Port Primary uplink c1 Ethernet1 x1 swp1 Unused link c1 Ethernet2 x2 swp1 Inter-ISP link x1 swp2 x2 swp2 Unused link c2 Ethernet1 x1 swp3 Backup uplink c2 Ethernet2 x2 swp3 Customer internal link c1 Ethernet3 c2 Ethernet3","title":"Lab Wiring"},{"location":"policy/a-locpref-route-map/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 Primary uplink Ethernet2 Unused link Ethernet3 192.168.42.1/24 Customer internal link c2 10.0.0.2/32 Loopback Ethernet1 Unused link Ethernet2 10.1.0.9/30 Backup uplink Ethernet3 192.168.42.2/24 Customer internal link x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 Primary uplink swp2 10.1.0.5/30 Inter-ISP link swp3 Unused link x2 192.168.101.1/24 Loopback swp1 Unused link swp2 10.1.0.6/30 Inter-ISP link swp3 10.1.0.10/30 Backup uplink The 4-node lab needs additional device configuration on X1 and X2. That configuration is only available for Arista EOS, Cumulus Linux, and FRR. \u21a9 Some devices (example: Arista cEOS) can display routes received from a neighbor (before being processed by inbound routing policies) and routes received and accepted from a neighbor (after the routing policies). Make sure you use the correct form of the show command. \u21a9","title":"Lab Addressing"},{"location":"policy/b-disaggregate/","text":"Use Disaggregated Prefixes to Select the Primary Link Previous lab exercises in the \u200cInfluencing Incoming (Ingress) Traffic Flow part of the BGP Routing Policies section described various mechanisms you can use to try to influence the inbound traffic flow. None of these tools work when dealing with \u201csuboptimal\u201d ISPs; in those rare moments, you\u2019ll have to use a bigger hammer. Unfortunately, one scenario often used in the global Internet is prefix disaggregation: a customer owning address space larger than the minimum prefix size accepted in the public Internet can advertise the summary prefix over the backup link and two more specific prefixes over the primary link. That\u2019s what you\u2019ll practice in this lab exercise. Warning Prefix disaggregation should be the tool of last resort as it pollutes the routing tables throughout the Internet. Do not use it unless all the other tools have failed. Existing BGP Configuration The routers in your lab use the following BGP AS numbers. Each router router advertises an IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 172.16.4.0/22 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 rtr 10.0.0.1 65000 x1 65100 10.1.0.2 x2 65101 10.1.0.6 Start the Lab You can start the lab on your own lab infrastructure or in GitHub Codespaces ( more details ): Change directory to policy/b-disaggregate Execute netlab up ( device requirements , other options ) Log into your router (RTR) with netlab connect rtr and verify that the IP addresses and the EBGP sessions are properly configured. The Problem You would like to use the link between RTR and X2 as a backup link; X2 should send the traffic toward 172.16.4.0/22 via X1. Unfortunately, the X2 ISP does not offer flexible BGP routing policies like BGP communities. It uses BGP local preference to prefer customer routes over peer routes; there\u2019s nothing you can do to change that. Don\u2019t believe me? Execute show ip bgp 172.16.4.0/22 (or a similar command) on X2 to inspect the alternate paths for your prefix; the best path points to the RTR-X2 link. Using AS-path prepending won\u2019t change that (you might want to check that claim before proceeding): $ netlab connect -q x2 --show ip bgp 172.16.4.0/22 BGP routing table entry for 172.16.4.0/22 Paths: (2 available, best #2, table default) Advertised to non peer-group peers: 10.1.0.5 x1(10.1.0.9) 65100 65000 10.1.0.9 from x1(10.1.0.9) (10.0.0.10) Origin incomplete, valid, external, bestpath-from-AS 65100 Last update: Tue Jun 25 17:12:20 2024 65000 10.1.0.5 from 10.1.0.5 (10.0.0.1) Origin incomplete, localpref 200, valid, external, bestpath-from-AS 65000, best (Local Pref) Last update: Tue Jun 25 17:12:25 2024 The only way to force X2 to use the path through X1 is to advertise two prefixes (172.16.4.0/23 and 172.16.6.0/23) to X1 while advertising just the summary prefix (172.16.4.0/22) to X2. Advertise Disaggregated Prefixes You mastered all the tools you need to solve this challenge in the previous lab exercises: Start advertising the two more specific prefixes (see Advertise IPv4 Prefixes to BGP Neighbors for more details). Configure two outbound prefix lists, one that matches only the more specific prefixes and another that only matches the aggregate prefixes. Apply them as outbound filters on EBGP sessions with X1 and X2 (see Filter Advertised Prefixes for more details). Verification After completing the lab exercise, your router should: Advertise 172.16.4.0/23 and 172.16.6.0/23 (and nothing else) to X1 Advertise 172.16.4.0/22 to X2 X2 should use the path through X1 to reach the 172.16.4.0/22 address space. You can use the netlab validate command if you\u2019ve installed netlab release 1.7.0 or later and use Cumulus Linux, FRR, or Arista EOS on the external routers. The validation tests check: The state of the EBGP session between RTR and X1/X2 The prefixes RTR advertises to X1/X2 Whether X2 uses X1 to get to the 172.16.4.0/22 address space. For example, this is the result you\u2019d get if you configured the prefix origination but forgot to apply prefix filters to outbound EBGP updates (the printout shows just the final tests): If the netlab validate command fails or you\u2019re using another network operating system on the ISP routers, do manual validation. Inspect the state of the BGP table on X1 and X2 (use a command similar to show ip bgp regex 65000$ to limit the printout to prefixes originated by AS 65000) and check whether it matches the expected results. This is the BGP table you should see on X1: $ netlab connect -q x1 --show 'ip bgp regex 65000$' BGP table version is 12, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 172.16.4.0/22 10.1.0.10 0 65101 65000 ? *> 172.16.4.0/23 10.1.0.1 0 65000 ? *> 172.16.6.0/23 10.1.0.1 0 65000 ? Displayed 3 routes and 5 total paths And this is the BGP table you should see on X2: $ netlab connect -q x2 --show 'ip bgp regex 65000$' BGP table version is 12, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 65101 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 172.16.4.0/22 10.1.0.5 200 0 65000 ? *> 172.16.4.0/23 10.1.0.9 0 65100 65000 ? *> 172.16.6.0/23 10.1.0.9 0 65100 65000 ? Displayed 3 routes and 5 total paths Reference Information This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Use any device supported by the netlab BGP configuration module for the customer routers. Use any device on which netlab can configure BGP local preference for the provider routers. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on X1 and X2. Automated lab validation requires netlab release 1.7.0 or higher. Git repository contains external router initial device configurations for Cumulus Linux. Lab Wiring Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 192.168.101.1/24 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1","title":"Use Disaggregated Prefixes to Select the Primary Link"},{"location":"policy/b-disaggregate/#use-disaggregated-prefixes-to-select-the-primary-link","text":"Previous lab exercises in the \u200cInfluencing Incoming (Ingress) Traffic Flow part of the BGP Routing Policies section described various mechanisms you can use to try to influence the inbound traffic flow. None of these tools work when dealing with \u201csuboptimal\u201d ISPs; in those rare moments, you\u2019ll have to use a bigger hammer. Unfortunately, one scenario often used in the global Internet is prefix disaggregation: a customer owning address space larger than the minimum prefix size accepted in the public Internet can advertise the summary prefix over the backup link and two more specific prefixes over the primary link. That\u2019s what you\u2019ll practice in this lab exercise. Warning Prefix disaggregation should be the tool of last resort as it pollutes the routing tables throughout the Internet. Do not use it unless all the other tools have failed.","title":"Use Disaggregated Prefixes to Select the Primary Link"},{"location":"policy/b-disaggregate/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. Each router router advertises an IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 172.16.4.0/22 AS65100 x1 10.0.0.10 192.168.100.0/24 AS65101 x2 10.0.0.11 192.168.101.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 rtr 10.0.0.1 65000 x1 65100 10.1.0.2 x2 65101 10.1.0.6","title":"Existing BGP Configuration"},{"location":"policy/b-disaggregate/#start-the-lab","text":"You can start the lab on your own lab infrastructure or in GitHub Codespaces ( more details ): Change directory to policy/b-disaggregate Execute netlab up ( device requirements , other options ) Log into your router (RTR) with netlab connect rtr and verify that the IP addresses and the EBGP sessions are properly configured.","title":"Start the Lab"},{"location":"policy/b-disaggregate/#the-problem","text":"You would like to use the link between RTR and X2 as a backup link; X2 should send the traffic toward 172.16.4.0/22 via X1. Unfortunately, the X2 ISP does not offer flexible BGP routing policies like BGP communities. It uses BGP local preference to prefer customer routes over peer routes; there\u2019s nothing you can do to change that. Don\u2019t believe me? Execute show ip bgp 172.16.4.0/22 (or a similar command) on X2 to inspect the alternate paths for your prefix; the best path points to the RTR-X2 link. Using AS-path prepending won\u2019t change that (you might want to check that claim before proceeding): $ netlab connect -q x2 --show ip bgp 172.16.4.0/22 BGP routing table entry for 172.16.4.0/22 Paths: (2 available, best #2, table default) Advertised to non peer-group peers: 10.1.0.5 x1(10.1.0.9) 65100 65000 10.1.0.9 from x1(10.1.0.9) (10.0.0.10) Origin incomplete, valid, external, bestpath-from-AS 65100 Last update: Tue Jun 25 17:12:20 2024 65000 10.1.0.5 from 10.1.0.5 (10.0.0.1) Origin incomplete, localpref 200, valid, external, bestpath-from-AS 65000, best (Local Pref) Last update: Tue Jun 25 17:12:25 2024 The only way to force X2 to use the path through X1 is to advertise two prefixes (172.16.4.0/23 and 172.16.6.0/23) to X1 while advertising just the summary prefix (172.16.4.0/22) to X2.","title":"The Problem"},{"location":"policy/b-disaggregate/#advertise-disaggregated-prefixes","text":"You mastered all the tools you need to solve this challenge in the previous lab exercises: Start advertising the two more specific prefixes (see Advertise IPv4 Prefixes to BGP Neighbors for more details). Configure two outbound prefix lists, one that matches only the more specific prefixes and another that only matches the aggregate prefixes. Apply them as outbound filters on EBGP sessions with X1 and X2 (see Filter Advertised Prefixes for more details).","title":"Advertise Disaggregated Prefixes"},{"location":"policy/b-disaggregate/#verification","text":"After completing the lab exercise, your router should: Advertise 172.16.4.0/23 and 172.16.6.0/23 (and nothing else) to X1 Advertise 172.16.4.0/22 to X2 X2 should use the path through X1 to reach the 172.16.4.0/22 address space. You can use the netlab validate command if you\u2019ve installed netlab release 1.7.0 or later and use Cumulus Linux, FRR, or Arista EOS on the external routers. The validation tests check: The state of the EBGP session between RTR and X1/X2 The prefixes RTR advertises to X1/X2 Whether X2 uses X1 to get to the 172.16.4.0/22 address space. For example, this is the result you\u2019d get if you configured the prefix origination but forgot to apply prefix filters to outbound EBGP updates (the printout shows just the final tests): If the netlab validate command fails or you\u2019re using another network operating system on the ISP routers, do manual validation. Inspect the state of the BGP table on X1 and X2 (use a command similar to show ip bgp regex 65000$ to limit the printout to prefixes originated by AS 65000) and check whether it matches the expected results. This is the BGP table you should see on X1: $ netlab connect -q x1 --show 'ip bgp regex 65000$' BGP table version is 12, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 172.16.4.0/22 10.1.0.10 0 65101 65000 ? *> 172.16.4.0/23 10.1.0.1 0 65000 ? *> 172.16.6.0/23 10.1.0.1 0 65000 ? Displayed 3 routes and 5 total paths And this is the BGP table you should see on X2: $ netlab connect -q x2 --show 'ip bgp regex 65000$' BGP table version is 12, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 65101 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 172.16.4.0/22 10.1.0.5 200 0 65000 ? *> 172.16.4.0/23 10.1.0.9 0 65100 65000 ? *> 172.16.6.0/23 10.1.0.9 0 65100 65000 ? Displayed 3 routes and 5 total paths","title":"Verification"},{"location":"policy/b-disaggregate/#reference-information","text":"This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"policy/b-disaggregate/#req","text":"Use any device supported by the netlab BGP configuration module for the customer routers. Use any device on which netlab can configure BGP local preference for the provider routers. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on X1 and X2. Automated lab validation requires netlab release 1.7.0 or higher. Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"policy/b-disaggregate/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 x1 swp2 x2 swp2","title":"Lab Wiring"},{"location":"policy/b-disaggregate/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback swp1 10.1.0.2/30 x1 -> rtr swp2 10.1.0.9/30 x1 -> x2 x2 192.168.101.1/24 Loopback swp1 10.1.0.6/30 x2 -> rtr swp2 10.1.0.10/30 x2 -> x1","title":"Lab Addressing"},{"location":"policy/d-no-export/","text":"Using No-Export Community to Filter Transit Routes RFC 1997 defined several well-known BGP communities recognized by almost all BGP implementations. One of them is the NO_EXPORT community, defined as: All routes received carrying a communities attribute containing this value MUST NOT be advertised outside a BGP confederation boundary (a stand-alone autonomous system that is not part of a confederation should be considered a confederation itself). Forgetting the weird wording, the NO_EXPORT community attached to a BGP prefix means \u201c do not advertise this one over EBGP sessions \u201d \u2013 seemingly an ideal solution to our do not leak transit routes challenge. You\u2019ll practice that scenario in this lab exercise. Tip Do this lab exercise after completing the Attach BGP Communities to Outgoing BGP Updates one. Existing BGP Configuration The routers in your lab use the following BGP AS numbers. X1 and X2 advertise an IPv4 prefix each. Node/ASN Router ID Advertised prefixes AS65000 c1 10.0.0.1 192.168.42.0/24 c2 10.0.0.2 192.168.42.0/24 AS65100 x1 10.0.0.10 10.42.100.0/24 AS65101 x2 10.0.0.11 10.43.101.0/24 Your routers run OSPF in area 0. They have these EBGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 c1 10.0.0.1 65000 c2 65000 10.0.0.2 x1 65100 10.1.0.2 c2 10.0.0.2 65000 c1 65000 10.0.0.1 x2 65101 10.1.0.6 netlab configures your routers when you start the lab; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure them manually. Start the Lab You can start the lab on your own lab infrastructure or in GitHub Codespaces ( more details ): Change directory to policy/d-no-export Execute netlab up ( device requirements , other options ) Log into your routers with netlab connect and verify they are properly configured. The Problem Assuming your routers don\u2019t use default EBGP route filters compliant with RFC 8212 1 , they will leak prefixes between AS 65100 and AS 65101. Check the BGP table on X1 to see whether it contains the prefix advertised by X2. $ netlab connect -q x1 --show ip bgp BGP table version is 3, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *> 10.42.100.0/24 0.0.0.0(x1) 0 32768 i *> 10.43.101.0/24 10.1.0.1(c1) 0 65000 65101 i *> 192.168.42.0/24 10.1.0.1(c1) 0 0 65000 i Displayed 3 routes and 3 total paths Configuration Tasks All modern BGP implementations should support the NO_EXPORT BGP community. We\u2019ll use that community to stop the route leaks in the customer network. If needed, configure propagation of standard BGP communities between C1 and C2. On C1 and C2, use a route map to add the NO_EXPORT community to all incoming EBGP updates. You did something similar in the Attach BGP Communities to Outgoing BGP Updates lab exercise. Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on your router. The validation tests check: The state of the EBGP sessions between C1 and X1, and between C2 and X2 Whether C1 and C2 advertise the prefix 192.168.42.0/24 to X1 and X2 Whether C1 and C2 block transit routes This is the printout you should get after completing the exercise: You can also check the BGP prefix 10.42.100.0/24 (advertised by X1) on C1. It should have the BGP community NO_EXPORT: $ netlab connect -q c1 --show ip bgp 10.42.100.0 BGP routing table entry for 10.42.100.0/24, version 4 Paths: (1 available, best #1, table default, not advertised to EBGP peer) Advertised to non peer-group peers: c2(10.0.0.2) 65100 10.1.0.2(x1) from x1(10.1.0.2) (10.0.0.10) Origin IGP, metric 0, valid, external, bestpath-from-AS 65100, best (First path received) Community: no-export Last update: Tue Oct 1 17:35:04 2024 When checking the same prefix on C2, the NO_EXPORT community should still be attached to the BGP prefix: $ netlab connect -q c2 --show ip bgp 10.42.100.0 BGP routing table entry for 10.42.100.0/24, version 4 Paths: (1 available, best #1, table default, not advertised to EBGP peer) Not advertised to any peer 65100 10.0.0.1(c1) (metric 10) from c1(10.0.0.1) (10.0.0.1) Origin IGP, metric 0, localpref 100, valid, internal, bestpath-from-AS 65100, best (First path received) Community: no-export Last update: Tue Oct 1 17:35:10 2024 Next, check the routes C2 advertises to X2 to verify C2 no longer advertises the prefix from AS 65100 to X2: $ netlab connect -q c2 --show ip bgp neighbor 10.1.0.6 advertised-routes BGP table version is 5, local router ID is 10.0.0.2, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *> 192.168.42.0/24 0.0.0.0 0 32768 i Total number of prefixes 1 Finally, check the BGP table on X2. It should not contain the BGP prefix advertised by X1 (AS 65100) $ netlab connect -q x2 --show ip bgp BGP table version is 4, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 65101 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *> 10.43.101.0/24 0.0.0.0(x2) 0 32768 i *> 192.168.42.0/24 10.1.0.5(c2) 0 0 65000 i Next: Use BGP Communities in Routing Policies Reference Information This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Use any device supported by the netlab BGP configuration module for the customer- and external routers. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on X1 and X2. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux. Lab Wiring Link Name Origin Device Origin Port Destination Device Destination Port Link to AS 65100 c1 Ethernet1 x1 swp1 Unused link c1 Ethernet2 x2 swp1 Unused link x1 swp2 x2 swp2 Unused link c2 Ethernet1 x1 swp3 Link to AS 65101 c2 Ethernet2 x2 swp3 Customer internal link c1 Ethernet3 c2 Ethernet3 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 Link to AS 65100 Ethernet2 Unused link Ethernet3 172.16.0.1/24 Customer internal link c2 10.0.0.2/32 Loopback Ethernet1 Unused link Ethernet2 10.1.0.5/30 Link to AS 65101 Ethernet3 172.16.0.2/24 Customer internal link x1 10.42.100.1/24 Loopback swp1 10.1.0.2/30 Link to AS 65100 swp2 Unused link swp3 Unused link x2 10.43.101.1/24 Loopback swp1 Unused link swp2 Unused link swp3 10.1.0.6/30 Link to AS 65101 To make this lab exercise useful, configure a permit all EBGP route policy if your devices comply with RFC 8212. \u21a9","title":"Using No-Export Community to Filter Transit Routes"},{"location":"policy/d-no-export/#using-no-export-community-to-filter-transit-routes","text":"RFC 1997 defined several well-known BGP communities recognized by almost all BGP implementations. One of them is the NO_EXPORT community, defined as: All routes received carrying a communities attribute containing this value MUST NOT be advertised outside a BGP confederation boundary (a stand-alone autonomous system that is not part of a confederation should be considered a confederation itself). Forgetting the weird wording, the NO_EXPORT community attached to a BGP prefix means \u201c do not advertise this one over EBGP sessions \u201d \u2013 seemingly an ideal solution to our do not leak transit routes challenge. You\u2019ll practice that scenario in this lab exercise. Tip Do this lab exercise after completing the Attach BGP Communities to Outgoing BGP Updates one.","title":"Using No-Export Community to Filter Transit Routes"},{"location":"policy/d-no-export/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. X1 and X2 advertise an IPv4 prefix each. Node/ASN Router ID Advertised prefixes AS65000 c1 10.0.0.1 192.168.42.0/24 c2 10.0.0.2 192.168.42.0/24 AS65100 x1 10.0.0.10 10.42.100.0/24 AS65101 x2 10.0.0.11 10.43.101.0/24 Your routers run OSPF in area 0. They have these EBGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 c1 10.0.0.1 65000 c2 65000 10.0.0.2 x1 65100 10.1.0.2 c2 10.0.0.2 65000 c1 65000 10.0.0.1 x2 65101 10.1.0.6 netlab configures your routers when you start the lab; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure them manually.","title":"Existing BGP Configuration"},{"location":"policy/d-no-export/#start-the-lab","text":"You can start the lab on your own lab infrastructure or in GitHub Codespaces ( more details ): Change directory to policy/d-no-export Execute netlab up ( device requirements , other options ) Log into your routers with netlab connect and verify they are properly configured.","title":"Start the Lab"},{"location":"policy/d-no-export/#the-problem","text":"Assuming your routers don\u2019t use default EBGP route filters compliant with RFC 8212 1 , they will leak prefixes between AS 65100 and AS 65101. Check the BGP table on X1 to see whether it contains the prefix advertised by X2. $ netlab connect -q x1 --show ip bgp BGP table version is 3, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *> 10.42.100.0/24 0.0.0.0(x1) 0 32768 i *> 10.43.101.0/24 10.1.0.1(c1) 0 65000 65101 i *> 192.168.42.0/24 10.1.0.1(c1) 0 0 65000 i Displayed 3 routes and 3 total paths","title":"The Problem"},{"location":"policy/d-no-export/#configuration-tasks","text":"All modern BGP implementations should support the NO_EXPORT BGP community. We\u2019ll use that community to stop the route leaks in the customer network. If needed, configure propagation of standard BGP communities between C1 and C2. On C1 and C2, use a route map to add the NO_EXPORT community to all incoming EBGP updates. You did something similar in the Attach BGP Communities to Outgoing BGP Updates lab exercise.","title":"Configuration Tasks"},{"location":"policy/d-no-export/#verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on your router. The validation tests check: The state of the EBGP sessions between C1 and X1, and between C2 and X2 Whether C1 and C2 advertise the prefix 192.168.42.0/24 to X1 and X2 Whether C1 and C2 block transit routes This is the printout you should get after completing the exercise: You can also check the BGP prefix 10.42.100.0/24 (advertised by X1) on C1. It should have the BGP community NO_EXPORT: $ netlab connect -q c1 --show ip bgp 10.42.100.0 BGP routing table entry for 10.42.100.0/24, version 4 Paths: (1 available, best #1, table default, not advertised to EBGP peer) Advertised to non peer-group peers: c2(10.0.0.2) 65100 10.1.0.2(x1) from x1(10.1.0.2) (10.0.0.10) Origin IGP, metric 0, valid, external, bestpath-from-AS 65100, best (First path received) Community: no-export Last update: Tue Oct 1 17:35:04 2024 When checking the same prefix on C2, the NO_EXPORT community should still be attached to the BGP prefix: $ netlab connect -q c2 --show ip bgp 10.42.100.0 BGP routing table entry for 10.42.100.0/24, version 4 Paths: (1 available, best #1, table default, not advertised to EBGP peer) Not advertised to any peer 65100 10.0.0.1(c1) (metric 10) from c1(10.0.0.1) (10.0.0.1) Origin IGP, metric 0, localpref 100, valid, internal, bestpath-from-AS 65100, best (First path received) Community: no-export Last update: Tue Oct 1 17:35:10 2024 Next, check the routes C2 advertises to X2 to verify C2 no longer advertises the prefix from AS 65100 to X2: $ netlab connect -q c2 --show ip bgp neighbor 10.1.0.6 advertised-routes BGP table version is 5, local router ID is 10.0.0.2, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *> 192.168.42.0/24 0.0.0.0 0 32768 i Total number of prefixes 1 Finally, check the BGP table on X2. It should not contain the BGP prefix advertised by X1 (AS 65100) $ netlab connect -q x2 --show ip bgp BGP table version is 4, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 65101 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *> 10.43.101.0/24 0.0.0.0(x2) 0 32768 i *> 192.168.42.0/24 10.1.0.5(c2) 0 0 65000 i Next: Use BGP Communities in Routing Policies","title":"Verification"},{"location":"policy/d-no-export/#reference-information","text":"This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"policy/d-no-export/#req","text":"Use any device supported by the netlab BGP configuration module for the customer- and external routers. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on X1 and X2. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"policy/d-no-export/#lab-wiring","text":"Link Name Origin Device Origin Port Destination Device Destination Port Link to AS 65100 c1 Ethernet1 x1 swp1 Unused link c1 Ethernet2 x2 swp1 Unused link x1 swp2 x2 swp2 Unused link c2 Ethernet1 x1 swp3 Link to AS 65101 c2 Ethernet2 x2 swp3 Customer internal link c1 Ethernet3 c2 Ethernet3","title":"Lab Wiring"},{"location":"policy/d-no-export/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 Link to AS 65100 Ethernet2 Unused link Ethernet3 172.16.0.1/24 Customer internal link c2 10.0.0.2/32 Loopback Ethernet1 Unused link Ethernet2 10.1.0.5/30 Link to AS 65101 Ethernet3 172.16.0.2/24 Customer internal link x1 10.42.100.1/24 Loopback swp1 10.1.0.2/30 Link to AS 65100 swp2 Unused link swp3 Unused link x2 10.43.101.1/24 Loopback swp1 Unused link swp2 Unused link swp3 10.1.0.6/30 Link to AS 65101 To make this lab exercise useful, configure a permit all EBGP route policy if your devices comply with RFC 8212. \u21a9","title":"Lab Addressing"},{"location":"policy/e-wedgies/","text":"Resolve BGP Wedgies In the Attach BGP Communities to Outgoing BGP Updates exercise, you\u2019ve learned how to use BGP communities to tell Internet Service Providers to reduce BGP local preference on their end because you want to use a connection as a backup link. Even that\u2019s not enough in larger environments, as the global BGP routing system might have more than one stable state, and it might be hard to push the system from the current stable state into the one you prefer. RFC 4264 lovingly calls the unintended stable BGP states BGP Wedgies ; you\u2019ll explore- and fix them in this lab exercise that uses a pretty standard two-tier ISP topology: Existing BGP Configuration The routers in your lab use the following BGP AS numbers. C1, P1, and P2 advertise an IPv4 prefix. BGP AS Numbers Node/ASN Router ID Advertised prefixes AS65000 c1 10.0.0.1 192.168.42.0/24 AS65101 u1 10.0.0.4 AS65102 u2 10.0.0.5 AS65207 p1 172.17.207.1 172.17.207.0/24 AS65304 p2 172.23.4.1 172.23.4.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 c1 10.0.0.1 65000 p1 65207 10.1.0.2 p2 65304 10.1.0.6 Start the Lab Assuming you already set up your lab infrastructure : Change directory to policy/e-wedgies Execute netlab up ( device requirements ) Log into your router (RTR) with netlab connect c1 and verify that the IP addresses and the EBGP sessions are properly configured. Warning The netlab connect --show command used in the verification section was introduced in netlab release 1.7.0. Automated lab validation requires netlab release 1.8.3. The Problem Without additional BGP policy configuration, the P2 (upstream ISP) router prefers the direct connection to reach the customer prefix 192.168.42.0/24: $ netlab connect -q p2 --show ip bgp BGP table version is 6, local router ID is 172.23.4.1, vrf id 0 Default local pref 100, local AS 65304 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 10.0.0.1/32 10.1.0.5 200 0 65000 i *> 172.17.207.0/24 10.1.0.14 0 65102 65101 65207 i *> 172.23.4.0/24 0.0.0.0 0 32768 i *> 192.168.42.0/24 10.1.0.5 200 0 65000 ? You could try using the AS path prepending to make P2 prefer the alternate path (going through U2, U1, and P1) with a longer AS path, but that wouldn\u2019t work. P2 always prefers customer paths over upstream paths and sets a high local preference for paths received from its customers. If you inspect the BGP information for the customer prefix on P2, you\u2019ll notice that the local preference is higher than the default 100. $ netlab connect -q p2 --show ip bgp 192.168.42.0 BGP routing table entry for 192.168.42.0/24 Paths: (1 available, best #1, table default) Advertised to non peer-group peers: 10.1.0.5 u2(10.1.0.14) 65000 10.1.0.5 from 10.1.0.5 (10.0.0.1) Origin incomplete, localpref 200, valid, external, bestpath-from-AS 65000, best (First path received) Last update: Mon Jun 24 11:35:05 2024 Fortunately, the P2 ISP implemented a BGP community scheme (described in the Attach BGP Communities to Outgoing BGP Updates lab exercise) that allows you to tell P2 to lower the local preference of your prefix to 50 by attaching BGP community 65304:100 to BGP paths sent in EBGP updates to P2. Change BGP Local Preference on P2 Attach the BGP community 65304:100 to all EBGP updates sent from C1 to P2 using the configuration mechanisms you mastered in the Attach BGP Communities to Outgoing BGP Updates lab exercise. Execute show ip bgp (or similar) command on P2 to confirm the change in BGP local preference. You can also use the netlab validate command . Setting BGP Community Is Not Enough Even after P2 lowers the local preference of the 192.168.42.0/24 prefix, it does not receive an alternate path (via P1, U1, and U2) because U2 prefers the path through P2 due to its shorter AS path; we\u2019re dealing with a BGP wedgie. You can verify that with the show ip bgp 192.168.42.0/24 (or similar) command executed on U2 (you can also use the netlab validate command ): $ netlab connect -q u2 --show ip bgp 192.168.42.0 BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #2, table default) Advertised to non peer-group peers: p2(10.1.0.13) u1(10.1.0.17) 65101 65207 65000 10.1.0.17 from u1(10.1.0.17) (10.0.0.4) Origin incomplete, valid, external, bestpath-from-AS 65101 Last update: Mon Jun 24 11:35:01 2024 65304 65000 10.1.0.13 from p2(10.1.0.13) (172.23.4.1) Origin incomplete, valid, external, bestpath-from-AS 65304, best (AS Path) Community: 65304:100 Last update: Mon Jun 24 11:54:14 2024 Even though you can observe the BGP community 65304:100 attached to the BGP path for 192.168.42.0/24 on U2, U2 does not recognize the community, ignores it, and uses AS-path length as the path selection criterion. Let\u2019s see if we\u2019re dealing with a true BGP wedgie: Clear the BGP session between C1 and P2. P2 will send an \u201c I lost the prefix \u201d update to U2. U2 will select an alternate route and send it to P2. When P2 receives the route from the customer, it will already have an alternate route with a better local preference. The traffic from P2 to C1 will go over U2, U1, and P1. Clear the BGP session between C1 and P1. P1 will send an \u201c I lost the prefix \u201d update to U1, U1 will propagate it to U2, and U2 will send it to P2. P2 will have a single path to 192.168.42.0/24 left and will advertise it to U2, flipping the routing system back into the undesired stable state. Increase the AS Path Length In real life, you could figure out what BGP community to use to influence the BGP best path selection process on U2; we\u2019ll use a brute-force approach and prepend a few AS numbers to the AS path C1 advertises to P2. Prepend at least three copies of your AS number (65000) to the EBGP updates C1 sends to P2. Use the configuration mechanisms you mastered in the Use AS-Path Prepending to Influence Incoming Traffic Flow lab exercise. Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on the external routers. The validation tests check: The state of the EBGP session between C1 and P1/P2 Whether C1 advertises its prefix to P1/P2 and whether that gets propagated to U1/U2. The community attached to the EBGP updates C1 sends to P2. Whether the next hop of the best path toward 192.168.42.0/24 on U2 points to U1. If the netlab validate command fails or you\u2019re using another network operating system on the ISP routers: Check the BGP prefix advertised by C1 on P2 with a command similar to show ip bgp 192.168.42.0/24 . The prefix advertised by C1 should have a long AS path, BGP community 65304:100, and local preference set to 50. $ netlab connect -q p2 --show ip bgp 192.168.42.0 BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #1, table default) Advertised to non peer-group peers: 10.1.0.5 u2(10.1.0.14) 65102 65101 65207 65000 10.1.0.14 from u2(10.1.0.14) (10.0.0.5) Origin incomplete, valid, external, bestpath-from-AS 65102, best (Local Pref) Last update: Mon Jun 24 11:59:55 2024 65000 65000 65000 65000 65000 65000 65000 65000 10.1.0.5 from 10.1.0.5 (10.0.0.1) Origin incomplete, localpref 50, valid, external, bestpath-from-AS 65000 Community: 65304:100 Last update: Mon Jun 24 11:59:55 2024 Check the same prefix on U2. There should be a single BGP path for that prefix in the U2 BGP table, and it should be advertised by U1: $ netlab connect -q u2 --show ip bgp 192.168.42.0 BGP routing table entry for 192.168.42.0/24 Paths: (1 available, best #1, table default) Advertised to non peer-group peers: p2(10.1.0.13) u1(10.1.0.17) 65101 65207 65000 10.1.0.17 from u1(10.1.0.17) (10.0.0.4) Origin incomplete, valid, external, bestpath-from-AS 65101, best (First path received) Last update: Mon Jun 24 11:35:00 2024 Next: Use Disaggregated Prefixes to Select the Primary Link Reference Information The following information might help you if you plan to build custom lab infrastructure: Device Requirements Use any device supported by the netlab BGP configuration module for C1, P1, U1, and U2. P2 requires additional configuration that sets BGP local preference based on BGP communities. The lab exercise includes configuration templates for Arista EOS, Cumulus Linux, and FRR. If you decide to use any other device for P2, you\u2019ll have to configure it manually. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on P1, P2, U1, and U2. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains initial device configurations for Cumulus Linux. Lab Wiring Link Name Origin Device Origin Port Destination Device Destination Port Primary uplink c1 Ethernet1 p1 swp1 Backup uplink c1 Ethernet2 p2 swp1 P1 uplink p1 swp2 u1 swp1 P2 uplink p2 swp2 u2 swp1 Upstream peering link u1 swp2 u2 swp2 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 Primary uplink Ethernet2 10.1.0.5/30 Backup uplink p1 172.17.207.1/24 Loopback swp1 10.1.0.2/30 Primary uplink swp2 10.1.0.9/30 P1 uplink p2 172.23.4.1/24 Loopback swp1 10.1.0.6/30 Backup uplink swp2 10.1.0.13/30 P2 uplink u1 10.0.0.4/32 Loopback swp1 10.1.0.10/30 P1 uplink swp2 10.1.0.17/30 Upstream peering link u2 10.0.0.5/32 Loopback swp1 10.1.0.14/30 P2 uplink swp2 10.1.0.18/30 Upstream peering link","title":"Resolve BGP Wedgies"},{"location":"policy/e-wedgies/#resolve-bgp-wedgies","text":"In the Attach BGP Communities to Outgoing BGP Updates exercise, you\u2019ve learned how to use BGP communities to tell Internet Service Providers to reduce BGP local preference on their end because you want to use a connection as a backup link. Even that\u2019s not enough in larger environments, as the global BGP routing system might have more than one stable state, and it might be hard to push the system from the current stable state into the one you prefer. RFC 4264 lovingly calls the unintended stable BGP states BGP Wedgies ; you\u2019ll explore- and fix them in this lab exercise that uses a pretty standard two-tier ISP topology:","title":"Resolve BGP Wedgies"},{"location":"policy/e-wedgies/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. C1, P1, and P2 advertise an IPv4 prefix.","title":"Existing BGP Configuration"},{"location":"policy/e-wedgies/#bgp-as-numbers","text":"Node/ASN Router ID Advertised prefixes AS65000 c1 10.0.0.1 192.168.42.0/24 AS65101 u1 10.0.0.4 AS65102 u2 10.0.0.5 AS65207 p1 172.17.207.1 172.17.207.0/24 AS65304 p2 172.23.4.1 172.23.4.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 c1 10.0.0.1 65000 p1 65207 10.1.0.2 p2 65304 10.1.0.6","title":"BGP AS Numbers"},{"location":"policy/e-wedgies/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to policy/e-wedgies Execute netlab up ( device requirements ) Log into your router (RTR) with netlab connect c1 and verify that the IP addresses and the EBGP sessions are properly configured. Warning The netlab connect --show command used in the verification section was introduced in netlab release 1.7.0. Automated lab validation requires netlab release 1.8.3.","title":"Start the Lab"},{"location":"policy/e-wedgies/#the-problem","text":"Without additional BGP policy configuration, the P2 (upstream ISP) router prefers the direct connection to reach the customer prefix 192.168.42.0/24: $ netlab connect -q p2 --show ip bgp BGP table version is 6, local router ID is 172.23.4.1, vrf id 0 Default local pref 100, local AS 65304 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 10.0.0.1/32 10.1.0.5 200 0 65000 i *> 172.17.207.0/24 10.1.0.14 0 65102 65101 65207 i *> 172.23.4.0/24 0.0.0.0 0 32768 i *> 192.168.42.0/24 10.1.0.5 200 0 65000 ? You could try using the AS path prepending to make P2 prefer the alternate path (going through U2, U1, and P1) with a longer AS path, but that wouldn\u2019t work. P2 always prefers customer paths over upstream paths and sets a high local preference for paths received from its customers. If you inspect the BGP information for the customer prefix on P2, you\u2019ll notice that the local preference is higher than the default 100. $ netlab connect -q p2 --show ip bgp 192.168.42.0 BGP routing table entry for 192.168.42.0/24 Paths: (1 available, best #1, table default) Advertised to non peer-group peers: 10.1.0.5 u2(10.1.0.14) 65000 10.1.0.5 from 10.1.0.5 (10.0.0.1) Origin incomplete, localpref 200, valid, external, bestpath-from-AS 65000, best (First path received) Last update: Mon Jun 24 11:35:05 2024 Fortunately, the P2 ISP implemented a BGP community scheme (described in the Attach BGP Communities to Outgoing BGP Updates lab exercise) that allows you to tell P2 to lower the local preference of your prefix to 50 by attaching BGP community 65304:100 to BGP paths sent in EBGP updates to P2.","title":"The Problem"},{"location":"policy/e-wedgies/#change-bgp-local-preference-on-p2","text":"Attach the BGP community 65304:100 to all EBGP updates sent from C1 to P2 using the configuration mechanisms you mastered in the Attach BGP Communities to Outgoing BGP Updates lab exercise. Execute show ip bgp (or similar) command on P2 to confirm the change in BGP local preference. You can also use the netlab validate command .","title":"Change BGP Local Preference on P2"},{"location":"policy/e-wedgies/#setting-bgp-community-is-not-enough","text":"Even after P2 lowers the local preference of the 192.168.42.0/24 prefix, it does not receive an alternate path (via P1, U1, and U2) because U2 prefers the path through P2 due to its shorter AS path; we\u2019re dealing with a BGP wedgie. You can verify that with the show ip bgp 192.168.42.0/24 (or similar) command executed on U2 (you can also use the netlab validate command ): $ netlab connect -q u2 --show ip bgp 192.168.42.0 BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #2, table default) Advertised to non peer-group peers: p2(10.1.0.13) u1(10.1.0.17) 65101 65207 65000 10.1.0.17 from u1(10.1.0.17) (10.0.0.4) Origin incomplete, valid, external, bestpath-from-AS 65101 Last update: Mon Jun 24 11:35:01 2024 65304 65000 10.1.0.13 from p2(10.1.0.13) (172.23.4.1) Origin incomplete, valid, external, bestpath-from-AS 65304, best (AS Path) Community: 65304:100 Last update: Mon Jun 24 11:54:14 2024 Even though you can observe the BGP community 65304:100 attached to the BGP path for 192.168.42.0/24 on U2, U2 does not recognize the community, ignores it, and uses AS-path length as the path selection criterion. Let\u2019s see if we\u2019re dealing with a true BGP wedgie: Clear the BGP session between C1 and P2. P2 will send an \u201c I lost the prefix \u201d update to U2. U2 will select an alternate route and send it to P2. When P2 receives the route from the customer, it will already have an alternate route with a better local preference. The traffic from P2 to C1 will go over U2, U1, and P1. Clear the BGP session between C1 and P1. P1 will send an \u201c I lost the prefix \u201d update to U1, U1 will propagate it to U2, and U2 will send it to P2. P2 will have a single path to 192.168.42.0/24 left and will advertise it to U2, flipping the routing system back into the undesired stable state.","title":"Setting BGP Community Is Not Enough"},{"location":"policy/e-wedgies/#increase-the-as-path-length","text":"In real life, you could figure out what BGP community to use to influence the BGP best path selection process on U2; we\u2019ll use a brute-force approach and prepend a few AS numbers to the AS path C1 advertises to P2. Prepend at least three copies of your AS number (65000) to the EBGP updates C1 sends to P2. Use the configuration mechanisms you mastered in the Use AS-Path Prepending to Influence Incoming Traffic Flow lab exercise.","title":"Increase the AS Path Length"},{"location":"policy/e-wedgies/#validate","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on the external routers. The validation tests check: The state of the EBGP session between C1 and P1/P2 Whether C1 advertises its prefix to P1/P2 and whether that gets propagated to U1/U2. The community attached to the EBGP updates C1 sends to P2. Whether the next hop of the best path toward 192.168.42.0/24 on U2 points to U1. If the netlab validate command fails or you\u2019re using another network operating system on the ISP routers: Check the BGP prefix advertised by C1 on P2 with a command similar to show ip bgp 192.168.42.0/24 . The prefix advertised by C1 should have a long AS path, BGP community 65304:100, and local preference set to 50. $ netlab connect -q p2 --show ip bgp 192.168.42.0 BGP routing table entry for 192.168.42.0/24 Paths: (2 available, best #1, table default) Advertised to non peer-group peers: 10.1.0.5 u2(10.1.0.14) 65102 65101 65207 65000 10.1.0.14 from u2(10.1.0.14) (10.0.0.5) Origin incomplete, valid, external, bestpath-from-AS 65102, best (Local Pref) Last update: Mon Jun 24 11:59:55 2024 65000 65000 65000 65000 65000 65000 65000 65000 10.1.0.5 from 10.1.0.5 (10.0.0.1) Origin incomplete, localpref 50, valid, external, bestpath-from-AS 65000 Community: 65304:100 Last update: Mon Jun 24 11:59:55 2024 Check the same prefix on U2. There should be a single BGP path for that prefix in the U2 BGP table, and it should be advertised by U1: $ netlab connect -q u2 --show ip bgp 192.168.42.0 BGP routing table entry for 192.168.42.0/24 Paths: (1 available, best #1, table default) Advertised to non peer-group peers: p2(10.1.0.13) u1(10.1.0.17) 65101 65207 65000 10.1.0.17 from u1(10.1.0.17) (10.0.0.4) Origin incomplete, valid, external, bestpath-from-AS 65101, best (First path received) Last update: Mon Jun 24 11:35:00 2024 Next: Use Disaggregated Prefixes to Select the Primary Link","title":"Verification"},{"location":"policy/e-wedgies/#reference-information","text":"The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"policy/e-wedgies/#req","text":"Use any device supported by the netlab BGP configuration module for C1, P1, U1, and U2. P2 requires additional configuration that sets BGP local preference based on BGP communities. The lab exercise includes configuration templates for Arista EOS, Cumulus Linux, and FRR. If you decide to use any other device for P2, you\u2019ll have to configure it manually. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on P1, P2, U1, and U2. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"policy/e-wedgies/#lab-wiring","text":"Link Name Origin Device Origin Port Destination Device Destination Port Primary uplink c1 Ethernet1 p1 swp1 Backup uplink c1 Ethernet2 p2 swp1 P1 uplink p1 swp2 u1 swp1 P2 uplink p2 swp2 u2 swp1 Upstream peering link u1 swp2 u2 swp2","title":"Lab Wiring"},{"location":"policy/e-wedgies/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 Primary uplink Ethernet2 10.1.0.5/30 Backup uplink p1 172.17.207.1/24 Loopback swp1 10.1.0.2/30 Primary uplink swp2 10.1.0.9/30 P1 uplink p2 172.23.4.1/24 Loopback swp1 10.1.0.6/30 Backup uplink swp2 10.1.0.13/30 P2 uplink u1 10.0.0.4/32 Loopback swp1 10.1.0.10/30 P1 uplink swp2 10.1.0.17/30 Upstream peering link u2 10.0.0.5/32 Loopback swp1 10.1.0.14/30 P2 uplink swp2 10.1.0.18/30 Upstream peering link","title":"Lab Addressing"},{"location":"policy/f-orf/","text":"Use Outbound Route Filters (ORF) for IP Prefixes In the Minimize the Size of Your BGP Table lab exercise, you learned how to configure an inbound prefix list that filters incoming BGP updates. However, filtering incoming updates seems like a waste of CPU cycles and bandwidth: The upstream router has to build BGP update messages containing all the prefixes it wants to advertise. The receiving router has to process all those prefixes and filter many of them. Wouldn\u2019t it be better if an inbound prefix list would automatically install an outbound prefix filter in the adjacent router? Welcome to the Outbound Route Filters (ORF), defined in RFC 5292 (prefix-based ORF) and RFC 5291 (ORF BGP capability). Tip Outbound route filters make sense only when (A) the bandwidth is expensive and (B) the receiving router has significantly fewer CPU resources than the sending router. They also move the CPU load to the sending router, so you probably won\u2019t see them deployed between ISPs and their customers. Existing BGP Configuration The routers in your lab use the following BGP AS numbers. X1 advertises several IPv4 prefixes plus the default route: Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 10.0.0.1/32 AS65100 x1 10.0.0.2 192.168.100.1/24 172.16.8.0/22 172.16.1.0/24 10.0.0.2/32 There is a single EBGP session between RTR and X2. netlab configures it automatically; if you\u2019re using another lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 rtr 10.0.0.1 65000 x1 65100 10.1.0.2 x1 10.0.0.2 65100 rtr 65000 10.1.0.1 Start the Lab Assuming you already set up your lab infrastructure : Find a device that supports prefix-based ORF (for example, Cumulus Linux or FRR) If needed, temporarily change the lab device type with the NETLAB_DEVICE environment variable, for example: $ export NETLAB_DEVICE=cumulus Change directory to policy/f-orf Execute netlab up Log into the lab devices with the netlab connect command and verify that the IP addresses and the EBGP sessions are properly configured. Configure an Inbound Prefix List Using the configuration commands you mastered in the Minimize the Size of Your BGP Table lab exercise, create an inbound prefix list on RTR that will permit the default route and prefixes in the 172.16.0.0/16 address space with prefix length lower than /24. Apply that prefix list to inbound EBGP updates received from X1. Inspect the BGP table on RTR to verify the proper operation of the prefix list. You should get a printout similar to this one: rtr# show ip bgp BGP table version is 17, local router ID is 10.0.0.1, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *> 0.0.0.0/0 10.1.0.2(x1) 0 0 65100 i *> 10.0.0.1/32 0.0.0.0(rtr) 0 32768 i *> 172.16.8.0/22 10.1.0.2(x1) 0 0 65100 i Displayed 3 routes and 3 total paths Turn on BGP update debugging and clear the BGP session between RTR and X1 (use terminal monitor , followed by debug bgp updates in and clear ip bgp * on recent FRR releases). You should see incoming BGP updates for all prefixes known by X1, several of them filtered by the inbound prefix list on RTR: Enable Outbound Route Filters With the inbound prefix list configured on RTR, it\u2019s time to get ORF working on X1. ORF is a negotiated BGP capability that is usually not enabled by default. You must enable it on both ends of a BGP session with a configuration command similar to neighbor capability within the BGP routing process configuration or the BGP address family configuration. Use a command similar to show bgp neighbors to verify that the routers in your lab agreed to use ORF. You should get a printout like this one on FRR (ORF capability is negotiated within a BGP address family): rtr# show bgp neighbors 10.1.0.2 BGP neighbor is 10.1.0.2, remote AS 65100, local AS 65000, external link ... For address family: IPv4 Unicast Update group 8, subgroup 8 Packet Queue length 0 AF-dependant capabilities: Outbound Route Filter (ORF) type (64) Prefix-list: Send-mode: advertised, received Receive-mode: advertised, received Outbound Route Filter (ORF): sent; Community attribute sent to this neighbor(large) Inbound path policy configured Incoming update prefix filter list is *inbound 2 accepted prefixes Once you have verified your routers agreed to use ORF, clear the EBGP session and observe the reduced number of inbound updates on RTR: Note The BGP daemon in FRR release 10.0.1 resends the BGP prefixes permitted by the ORF filter three times. That\u2019s probably a bug that might be fixed when you do this lab exercise. Some devices have show commands that display installed ORF entries. For example, you can use the show bgp af neighbor address received prefix-filter command on FRR to display them: x1# show bgp ipv4 nei 10.1.0.1 received prefix-filter Address Family: IPv4 Unicast ip prefix-list 10.1.0.1.1.1: 2 entries seq 5 permit 0.0.0.0/0 seq 10 permit 172.0.0.0/8 le 23 Dynamic Changes in ORF Prefix Filters Finally, add another entry to the inbound prefix list on RTR and use the debug bgp updates together with debug bgp neighbor-events on FRR (other platforms have similar debugging commands) to observe the ORF updates and refreshed routing updates triggered by changes in the inbound prefix list. Reference Information This lab can run on a subset of the 4-router lab topology . Device Requirements Use any device supported by the netlab BGP configuration module that implements prefix-based ORF (for example, Cumulus Linux or FRR) Git repository contains initial device configurations for Cumulus Linux. If you want to use the terminal monitor command on FRR, you must use a newer image 1 than the one used by other BGP labs 2 . You can change the lab defaults or change the FRR image with an environment variable before executing netlab up , for example: export NETLAB_DEVICES_FRR_CLAB_IMAGE=quay.io/frrouting/frr:10.0.1 Lab Wiring Origin Device Origin Port Destination Device Destination Port rtr swp1 x1 swp1 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback eth1 10.1.0.2/30 x1 -> rtr x2 192.168.101.1/24 Loopback eth1 10.1.0.6/30 x2 -> rtr Inspect the list of available FRR containers to select a recent image. \u21a9 We have to use an older version of FRR due to the undesired OSPF/BGP interaction behavior in recent FRR versions . \u21a9","title":"Use Outbound Route Filters (ORF) for IP Prefixes"},{"location":"policy/f-orf/#use-outbound-route-filters-orf-for-ip-prefixes","text":"In the Minimize the Size of Your BGP Table lab exercise, you learned how to configure an inbound prefix list that filters incoming BGP updates. However, filtering incoming updates seems like a waste of CPU cycles and bandwidth: The upstream router has to build BGP update messages containing all the prefixes it wants to advertise. The receiving router has to process all those prefixes and filter many of them. Wouldn\u2019t it be better if an inbound prefix list would automatically install an outbound prefix filter in the adjacent router? Welcome to the Outbound Route Filters (ORF), defined in RFC 5292 (prefix-based ORF) and RFC 5291 (ORF BGP capability). Tip Outbound route filters make sense only when (A) the bandwidth is expensive and (B) the receiving router has significantly fewer CPU resources than the sending router. They also move the CPU load to the sending router, so you probably won\u2019t see them deployed between ISPs and their customers.","title":"Use Outbound Route Filters (ORF) for IP Prefixes"},{"location":"policy/f-orf/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. X1 advertises several IPv4 prefixes plus the default route: Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 10.0.0.1/32 AS65100 x1 10.0.0.2 192.168.100.1/24 172.16.8.0/22 172.16.1.0/24 10.0.0.2/32 There is a single EBGP session between RTR and X2. netlab configures it automatically; if you\u2019re using another lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 rtr 10.0.0.1 65000 x1 65100 10.1.0.2 x1 10.0.0.2 65100 rtr 65000 10.1.0.1","title":"Existing BGP Configuration"},{"location":"policy/f-orf/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Find a device that supports prefix-based ORF (for example, Cumulus Linux or FRR) If needed, temporarily change the lab device type with the NETLAB_DEVICE environment variable, for example: $ export NETLAB_DEVICE=cumulus Change directory to policy/f-orf Execute netlab up Log into the lab devices with the netlab connect command and verify that the IP addresses and the EBGP sessions are properly configured.","title":"Start the Lab"},{"location":"policy/f-orf/#configure-an-inbound-prefix-list","text":"Using the configuration commands you mastered in the Minimize the Size of Your BGP Table lab exercise, create an inbound prefix list on RTR that will permit the default route and prefixes in the 172.16.0.0/16 address space with prefix length lower than /24. Apply that prefix list to inbound EBGP updates received from X1. Inspect the BGP table on RTR to verify the proper operation of the prefix list. You should get a printout similar to this one: rtr# show ip bgp BGP table version is 17, local router ID is 10.0.0.1, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *> 0.0.0.0/0 10.1.0.2(x1) 0 0 65100 i *> 10.0.0.1/32 0.0.0.0(rtr) 0 32768 i *> 172.16.8.0/22 10.1.0.2(x1) 0 0 65100 i Displayed 3 routes and 3 total paths Turn on BGP update debugging and clear the BGP session between RTR and X1 (use terminal monitor , followed by debug bgp updates in and clear ip bgp * on recent FRR releases). You should see incoming BGP updates for all prefixes known by X1, several of them filtered by the inbound prefix list on RTR:","title":"Configure an Inbound Prefix List"},{"location":"policy/f-orf/#enable-outbound-route-filters","text":"With the inbound prefix list configured on RTR, it\u2019s time to get ORF working on X1. ORF is a negotiated BGP capability that is usually not enabled by default. You must enable it on both ends of a BGP session with a configuration command similar to neighbor capability within the BGP routing process configuration or the BGP address family configuration. Use a command similar to show bgp neighbors to verify that the routers in your lab agreed to use ORF. You should get a printout like this one on FRR (ORF capability is negotiated within a BGP address family): rtr# show bgp neighbors 10.1.0.2 BGP neighbor is 10.1.0.2, remote AS 65100, local AS 65000, external link ... For address family: IPv4 Unicast Update group 8, subgroup 8 Packet Queue length 0 AF-dependant capabilities: Outbound Route Filter (ORF) type (64) Prefix-list: Send-mode: advertised, received Receive-mode: advertised, received Outbound Route Filter (ORF): sent; Community attribute sent to this neighbor(large) Inbound path policy configured Incoming update prefix filter list is *inbound 2 accepted prefixes Once you have verified your routers agreed to use ORF, clear the EBGP session and observe the reduced number of inbound updates on RTR: Note The BGP daemon in FRR release 10.0.1 resends the BGP prefixes permitted by the ORF filter three times. That\u2019s probably a bug that might be fixed when you do this lab exercise. Some devices have show commands that display installed ORF entries. For example, you can use the show bgp af neighbor address received prefix-filter command on FRR to display them: x1# show bgp ipv4 nei 10.1.0.1 received prefix-filter Address Family: IPv4 Unicast ip prefix-list 10.1.0.1.1.1: 2 entries seq 5 permit 0.0.0.0/0 seq 10 permit 172.0.0.0/8 le 23","title":"Enable Outbound Route Filters"},{"location":"policy/f-orf/#dynamic-changes-in-orf-prefix-filters","text":"Finally, add another entry to the inbound prefix list on RTR and use the debug bgp updates together with debug bgp neighbor-events on FRR (other platforms have similar debugging commands) to observe the ORF updates and refreshed routing updates triggered by changes in the inbound prefix list.","title":"Dynamic Changes in ORF Prefix Filters"},{"location":"policy/f-orf/#reference-information","text":"This lab can run on a subset of the 4-router lab topology .","title":"Reference Information"},{"location":"policy/f-orf/#req","text":"Use any device supported by the netlab BGP configuration module that implements prefix-based ORF (for example, Cumulus Linux or FRR) Git repository contains initial device configurations for Cumulus Linux. If you want to use the terminal monitor command on FRR, you must use a newer image 1 than the one used by other BGP labs 2 . You can change the lab defaults or change the FRR image with an environment variable before executing netlab up , for example: export NETLAB_DEVICES_FRR_CLAB_IMAGE=quay.io/frrouting/frr:10.0.1","title":"Device Requirements"},{"location":"policy/f-orf/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port rtr swp1 x1 swp1","title":"Lab Wiring"},{"location":"policy/f-orf/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback eth1 10.1.0.2/30 x1 -> rtr x2 192.168.101.1/24 Loopback eth1 10.1.0.6/30 x2 -> rtr Inspect the list of available FRR containers to select a recent image. \u21a9 We have to use an older version of FRR due to the undesired OSPF/BGP interaction behavior in recent FRR versions . \u21a9","title":"Lab Addressing"},{"location":"session/1-allowas_in/","text":"Reuse a BGP AS Number Across Multiple Sites In the Redistribute IGP Information Into BGP exercise, you practiced using BGP with a service provider offering MPLS/VPN services. At that time, the service provider gave you two autonomous systems (one per site), which might not be feasible for large service providers 1 . In this lab, you\u2019ll practice a more realistic scenario in which you get the same BGP AS number for all sites. Existing BGP Configuration The routers in your lab use the following BGP AS numbers. The ISP routers do not advertise local prefixes; your routers advertise their loopbacks. Node/ASN Router ID Advertised prefixes AS65000 ce1 10.0.0.1 10.0.0.1/32 ce2 10.0.0.2 10.0.0.2/32 AS65100 pe1 10.0.0.10 pe2 10.0.0.11 Your routers have these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 ce1 10.0.0.1 65000 pe1 65100 10.1.0.2 ce2 10.0.0.2 65000 pe2 65100 10.1.0.10 PE1 and PE2 run OSPF and exchange BGP routes over an IBGP session. Start the Lab Assuming you already set up your lab infrastructure : Change directory to session/1-allowas_in Execute netlab up ( device requirements , other options ) Log into your devices (CE1, CE2) with netlab connect and verify that they have established EBGP sessions with the PE routers. Note: netlab will configure IP addressing, BGP sessions, and BGP prefix advertisements on all routers. It will also configure OSPF between PE1 and PE2. You must manually configure your routers if you\u2019re not using netlab . The Problem Assuming your routers are configured correctly, you should see the local loopback address in the BGP table. For example, this is how the BGP table looks on CE1 running Arista EOS: ce1>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.1/32 - - - - 0 i The loopback prefixes are propagated to the PE-routers and are visible in their BGP tables: $ netlab connect pe1 --show ip bgp Connecting to container clab-allowas-pe1, executing sudo vtysh -c \"show ip bgp\" BGP table version is 2, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 10.0.0.1/32 10.1.0.1 0 65000 i *>i10.0.0.2/32 10.0.0.11 100 0 65000 i However, the loopback prefix of CE2 is not visible on CE1 and vice versa. It\u2019s time for a troubleshooting session. Why Are the Loopback Prefixes Not Propagated? It\u2019s relatively easy to find out what\u2019s wrong on platforms supporting debugging of BGP updates. This is a printout you\u2019d get on CE1 running Cisco IOS after enabling BGP update debugging 2 and clearing the EBGP session: ce1#debug ip bgp updates BGP updates debugging is on for address family: IPv4 Unicast ce1#clear ip bgp * ce1# %BGP-3-NOTIFICATION_MANY: sent to 1 sessions 6/4 (Administrative Reset) for all peers %BGP-5-ADJCHANGE: neighbor 10.1.0.2 Down User reset %BGP_SESSION-5-ADJCHANGE: neighbor 10.1.0.2 IPv4 Unicast topology base removed from session User reset %BGP-5-ADJCHANGE: neighbor 10.1.0.2 Up BGP(0): 10.1.0.2 rcv UPDATE w/ attr: nexthop 10.1.0.2, origin i, originator 0.0.0.0, merged path 65100 65000, AS_PATH , community , extended community , SSA attribute *Dec 11 08:18:35.013: BGP(0): 10.1.0.2 rcv UPDATE about 10.0.0.2/32 -- DENIED due to: AS-PATH contains our own AS; The debugging printouts are unambiguous: the incoming update contains the local AS number in the AS path. BGP loop prevention logic kicks in, and the update is dropped. You\u2019d have a tough time figuring out what\u2019s wrong if your device does not support BGP update debugging. For example, the only hint you\u2019d get on Arista EOS 3 is hidden deep within the show ip bgp neighbor printout: ce1>show ip bgp neighbor BGP neighbor is 10.1.0.2, remote AS 65100, external link Description: pe1 BGP version 4, remote router ID 10.0.0.10, VRF default Last read 00:00:01, last write 00:00:01 Hold time is 9, keepalive interval is 3 seconds ... skipped tons of irrelevant information ... Prefix Statistics: Sent Rcvd Best Paths Best ECMP Paths IPv4 Unicast: 1 0 0 0 IPv6 Unicast: 0 0 0 0 Configured maximum total number of routes is 256000, warning limit is 204800 Inbound updates dropped by reason: AS path loop detection: 2 Now that we\u2019ve identified the problem, let\u2019s deploy a kludge to fix it. Configuration Task Most BGP implementations have a nerd knob that disables the BGP AS-path-based loop prevention logic. It\u2019s usually configured on individual BGP sessions (per neighbor) with a command similar to neighbor allowas-in . Disable the BGP loop prevention logic on CE1 and CE2 Refresh the BGP tables on CE1 and CE2. You can either clear the EBGP sessions with the PE routers or perform a route refresh with a command similar to clear ip bgp soft in Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on your devices. You\u2019ll get this printout if you configure allowas-in on CE1 but not CE2. If that command fails or you\u2019re using another network operating system on your devices, check the BGP tables on CE1 and CE2 and verify that they contain both loopback prefixes. This is the printout you could get on Arista EOS: ce1#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.1/32 - - - - 0 i * 10.0.0.1/32 10.1.0.2 0 - 100 0 65100 65000 i * > 10.0.0.2/32 10.1.0.2 0 - 100 0 65100 65000 i Note The PE routers might send the prefix advertised by a CE router back to that same CE router (the behavior is probably implementation-dependent), in which case you will see two paths to the local loopback prefix. Next : Fix AS-Path in Environments Reusing BGP AS Numbers . Reference Information This lab uses the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Customer routers: use any device supported by the netlab BGP configuration module . Provider routers: use any device supported by the netlab BGP and OSPF configuration modules . You can perform automated lab validation with Arista EOS, Cumulus Linux, or FRR running on the customer routers. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains initial provider routers\u2019 device configurations for Cumulus Linux. Lab Wiring Link Name Origin Device Origin Port Destination Device Destination Port Site_A-to-ISP ce1 Ethernet1 pe1 swp1 Unused link ce1 Ethernet2 pe2 swp1 Intra-ISP link pe1 swp2 pe2 swp2 Unused link ce2 Ethernet1 pe1 swp3 Site_B-to-ISP ce2 Ethernet2 pe2 swp3 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description ce1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 Site_A-to-ISP Ethernet2 Unused link ce2 10.0.0.2/32 Loopback Ethernet1 Unused link Ethernet2 10.1.0.9/30 Site_B-to-ISP pe1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 Site_A-to-ISP swp2 10.1.0.5/30 Intra-ISP link swp3 Unused link pe2 10.0.0.11/32 Loopback swp1 Unused link swp2 10.1.0.6/30 Intra-ISP link swp3 10.1.0.10/30 Site_B-to-ISP There are only 1024 unique private AS numbers unless you use 4-byte BGP AS numbers. \u21a9 Do not use the debug ip bgp updates command on a production router. That\u2019s how I disconnected a small country from the global Internet in the 1990s. The only somewhat safe way to use this powerful tool is with an access control list (ACL) that selects only the few prefixes you\u2019re interested in. \u21a9 According to their Basic BGP Troubleshooting documentation \u21a9","title":"Reuse a BGP AS Number Across Multiple Sites"},{"location":"session/1-allowas_in/#reuse-a-bgp-as-number-across-multiple-sites","text":"In the Redistribute IGP Information Into BGP exercise, you practiced using BGP with a service provider offering MPLS/VPN services. At that time, the service provider gave you two autonomous systems (one per site), which might not be feasible for large service providers 1 . In this lab, you\u2019ll practice a more realistic scenario in which you get the same BGP AS number for all sites.","title":"Reuse a BGP AS Number Across Multiple Sites"},{"location":"session/1-allowas_in/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. The ISP routers do not advertise local prefixes; your routers advertise their loopbacks. Node/ASN Router ID Advertised prefixes AS65000 ce1 10.0.0.1 10.0.0.1/32 ce2 10.0.0.2 10.0.0.2/32 AS65100 pe1 10.0.0.10 pe2 10.0.0.11 Your routers have these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 ce1 10.0.0.1 65000 pe1 65100 10.1.0.2 ce2 10.0.0.2 65000 pe2 65100 10.1.0.10 PE1 and PE2 run OSPF and exchange BGP routes over an IBGP session.","title":"Existing BGP Configuration"},{"location":"session/1-allowas_in/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to session/1-allowas_in Execute netlab up ( device requirements , other options ) Log into your devices (CE1, CE2) with netlab connect and verify that they have established EBGP sessions with the PE routers. Note: netlab will configure IP addressing, BGP sessions, and BGP prefix advertisements on all routers. It will also configure OSPF between PE1 and PE2. You must manually configure your routers if you\u2019re not using netlab .","title":"Start the Lab"},{"location":"session/1-allowas_in/#the-problem","text":"Assuming your routers are configured correctly, you should see the local loopback address in the BGP table. For example, this is how the BGP table looks on CE1 running Arista EOS: ce1>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.1/32 - - - - 0 i The loopback prefixes are propagated to the PE-routers and are visible in their BGP tables: $ netlab connect pe1 --show ip bgp Connecting to container clab-allowas-pe1, executing sudo vtysh -c \"show ip bgp\" BGP table version is 2, local router ID is 10.0.0.10, vrf id 0 Default local pref 100, local AS 65100 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 10.0.0.1/32 10.1.0.1 0 65000 i *>i10.0.0.2/32 10.0.0.11 100 0 65000 i However, the loopback prefix of CE2 is not visible on CE1 and vice versa. It\u2019s time for a troubleshooting session.","title":"The Problem"},{"location":"session/1-allowas_in/#why-are-the-loopback-prefixes-not-propagated","text":"It\u2019s relatively easy to find out what\u2019s wrong on platforms supporting debugging of BGP updates. This is a printout you\u2019d get on CE1 running Cisco IOS after enabling BGP update debugging 2 and clearing the EBGP session: ce1#debug ip bgp updates BGP updates debugging is on for address family: IPv4 Unicast ce1#clear ip bgp * ce1# %BGP-3-NOTIFICATION_MANY: sent to 1 sessions 6/4 (Administrative Reset) for all peers %BGP-5-ADJCHANGE: neighbor 10.1.0.2 Down User reset %BGP_SESSION-5-ADJCHANGE: neighbor 10.1.0.2 IPv4 Unicast topology base removed from session User reset %BGP-5-ADJCHANGE: neighbor 10.1.0.2 Up BGP(0): 10.1.0.2 rcv UPDATE w/ attr: nexthop 10.1.0.2, origin i, originator 0.0.0.0, merged path 65100 65000, AS_PATH , community , extended community , SSA attribute *Dec 11 08:18:35.013: BGP(0): 10.1.0.2 rcv UPDATE about 10.0.0.2/32 -- DENIED due to: AS-PATH contains our own AS; The debugging printouts are unambiguous: the incoming update contains the local AS number in the AS path. BGP loop prevention logic kicks in, and the update is dropped. You\u2019d have a tough time figuring out what\u2019s wrong if your device does not support BGP update debugging. For example, the only hint you\u2019d get on Arista EOS 3 is hidden deep within the show ip bgp neighbor printout: ce1>show ip bgp neighbor BGP neighbor is 10.1.0.2, remote AS 65100, external link Description: pe1 BGP version 4, remote router ID 10.0.0.10, VRF default Last read 00:00:01, last write 00:00:01 Hold time is 9, keepalive interval is 3 seconds ... skipped tons of irrelevant information ... Prefix Statistics: Sent Rcvd Best Paths Best ECMP Paths IPv4 Unicast: 1 0 0 0 IPv6 Unicast: 0 0 0 0 Configured maximum total number of routes is 256000, warning limit is 204800 Inbound updates dropped by reason: AS path loop detection: 2 Now that we\u2019ve identified the problem, let\u2019s deploy a kludge to fix it.","title":"Why Are the Loopback Prefixes Not Propagated?"},{"location":"session/1-allowas_in/#configuration-task","text":"Most BGP implementations have a nerd knob that disables the BGP AS-path-based loop prevention logic. It\u2019s usually configured on individual BGP sessions (per neighbor) with a command similar to neighbor allowas-in . Disable the BGP loop prevention logic on CE1 and CE2 Refresh the BGP tables on CE1 and CE2. You can either clear the EBGP sessions with the PE routers or perform a route refresh with a command similar to clear ip bgp soft in","title":"Configuration Task"},{"location":"session/1-allowas_in/#ver","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on your devices. You\u2019ll get this printout if you configure allowas-in on CE1 but not CE2. If that command fails or you\u2019re using another network operating system on your devices, check the BGP tables on CE1 and CE2 and verify that they contain both loopback prefixes. This is the printout you could get on Arista EOS: ce1#show ip bgp BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending BGP convergence Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.1/32 - - - - 0 i * 10.0.0.1/32 10.1.0.2 0 - 100 0 65100 65000 i * > 10.0.0.2/32 10.1.0.2 0 - 100 0 65100 65000 i Note The PE routers might send the prefix advertised by a CE router back to that same CE router (the behavior is probably implementation-dependent), in which case you will see two paths to the local loopback prefix. Next : Fix AS-Path in Environments Reusing BGP AS Numbers .","title":"Verification"},{"location":"session/1-allowas_in/#reference-information","text":"This lab uses the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"session/1-allowas_in/#req","text":"Customer routers: use any device supported by the netlab BGP configuration module . Provider routers: use any device supported by the netlab BGP and OSPF configuration modules . You can perform automated lab validation with Arista EOS, Cumulus Linux, or FRR running on the customer routers. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains initial provider routers\u2019 device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"session/1-allowas_in/#lab-wiring","text":"Link Name Origin Device Origin Port Destination Device Destination Port Site_A-to-ISP ce1 Ethernet1 pe1 swp1 Unused link ce1 Ethernet2 pe2 swp1 Intra-ISP link pe1 swp2 pe2 swp2 Unused link ce2 Ethernet1 pe1 swp3 Site_B-to-ISP ce2 Ethernet2 pe2 swp3","title":"Lab Wiring"},{"location":"session/1-allowas_in/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description ce1 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 Site_A-to-ISP Ethernet2 Unused link ce2 10.0.0.2/32 Loopback Ethernet1 Unused link Ethernet2 10.1.0.9/30 Site_B-to-ISP pe1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 Site_A-to-ISP swp2 10.1.0.5/30 Intra-ISP link swp3 Unused link pe2 10.0.0.11/32 Loopback swp1 Unused link swp2 10.1.0.6/30 Intra-ISP link swp3 10.1.0.10/30 Site_B-to-ISP There are only 1024 unique private AS numbers unless you use 4-byte BGP AS numbers. \u21a9 Do not use the debug ip bgp updates command on a production router. That\u2019s how I disconnected a small country from the global Internet in the 1990s. The only somewhat safe way to use this powerful tool is with an access control list (ACL) that selects only the few prefixes you\u2019re interested in. \u21a9 According to their Basic BGP Troubleshooting documentation \u21a9","title":"Lab Addressing"},{"location":"session/2-asoverride/","text":"Fix AS-Path in Environments Reusing BGP AS Numbers In the previous lab exercise exercise, you connected multiple sites using the same BGP AS number to a Service Provider network. While that works, it does require the customers to configure BGP nerd knobs that might not be supported on all devices. Wouldn\u2019t it be better if you could fix the AS path on the Service Provider routers? That\u2019s what you\u2019ll accomplish in this lab exercise \u2013 you\u2019ll configure the Provider Edge (PE) routers to replace the customer AS number with the provider AS number. Existing Router Configuration The routers in your lab use the following BGP AS numbers. The Provider Edge (PE) routers do not advertise local prefixes; each Customer Edge (CE) router advertises an IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 ce1 192.168.10.1 192.168.10.1/24 ce2 192.168.11.1 192.168.11.1/24 AS65100 pe1 10.0.0.1 pe2 10.0.0.2 Your routers have these BGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure them manually. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 pe1 10.0.0.1 65100 pe2 65100 10.0.0.2 ce1 65000 10.1.0.1 pe2 10.0.0.2 65100 pe1 65100 10.0.0.1 ce2 65000 10.1.0.5 PE1 and PE2 also run OSPF in the backbone area. Router Interface IPv4 Address Neighbor(s) pe1 Loopback 10.0.0.1/32 swp3 10.1.0.9/30 pe2 pe2 Loopback 10.0.0.2/32 swp3 10.1.0.10/30 pe1 Start the Lab Assuming you already set up your lab infrastructure : Change directory to session/2-asoverride Execute netlab up ( device requirements , other options ) Log into your devices (PE1, PE2) with netlab connect and verify that they have established OSPF adjacency, an IBGP session between themselves, and the EBGP sessions with the CE routers. Note: netlab will configure IP addressing, OSPF routing, BGP sessions, and BGP prefix advertisements on all routers. You must manually configure your routers if you\u2019re not using netlab . Warning Some BGP implementations do not support the AS override functionality. For example, it\u2019s not available on Arista EOS. The Problem Assuming your routers are configured correctly, you should see the customer prefixes in the BGP table on the PE routers. For example, this is how the BGP table looks on PE1 running Arista EOS: pe1>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 192.168.10.0/24 10.1.0.1 0 - 100 0 65000 i * > 192.168.11.0/24 10.0.0.2 0 - 100 0 65000 i However, the customer routers do not accept the prefixes advertised by other customer sites because the local AS number appears in the AS path. You can see the difference between received and accepted routes if you\u2019re using Cumulus Linux or FRR on the CE routers 1 : $ netlab connect ce1 Connecting to container clab-allowas-ce1, starting bash Use vtysh to connect to FRR daemon ce1(bash)#sudo vtysh Hello, this is FRRouting (version 7.5+cl4.4.0u4). Copyright 1996-2005 Kunihiro Ishiguro, et al. ce1# show ip bgp neighbors 10.1.0.2 received-routes BGP table version is 1, local router ID is 192.168.10.1, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 192.168.11.0/24 10.1.0.2 0 65100 65000 i Total number of prefixes 1 ce1# show ip bgp neighbors 10.1.0.2 routes ce1# Configuration Task Many BGP implementations have a nerd knob that replaces the neighbor AS number in the AS path with the local AS number. It\u2019s usually configured on individual BGP sessions (per neighbor) with a command similar to neighbor as-override . Replace the neighbor AS number with the local AS number on EBGP sessions on PE1 and PE2 Resend the EBGP updates from PE1 and PE2, usually using a command similar to clear ip bgp soft out Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on CE routers. You\u2019ll get this printout if you configure as-override on PE1 but not PE2. If that command fails or you\u2019re using another network operating system on your CE routers, check the BGP tables on CE1 and CE2. This is the printout you should get on CE1 running Cumulus Linux: $ netlab connect ce1 --show ip bgp Connecting to container clab-allowas-ce1, executing sudo vtysh -c \"show ip bgp\" BGP table version is 2, local router ID is 192.168.10.1, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path * 192.168.10.0/24 10.1.0.2 0 65100 65100 i *> 0.0.0.0 0 32768 i *> 192.168.11.0/24 10.1.0.2 0 65100 65100 i Tip The PE routers advertise the CE prefixes back to the CE routers, and the AS override functionality effectively disables the BGP loop prevention logic. You\u2019ll usually see two copies of the local prefixes in the BGP table. Reference Information This lab uses the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Provider routers: use any device supported by the netlab BGP and OSPF configuration modules . The device also has to support the AS override functionality. Customer routers: use any device supported by the netlab BGP configuration modules . The lab topology configures BGP soft reconfiguration on Cumulus Linux and FRR; if you use other devices as CE routers, you might want to configure something similar on the EBGP sessions. You can perform automated lab validation with Arista EOS, Cumulus Linux, or FRR running on the CE routers. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains initial CE router device configurations for Cumulus Linux. Lab Wiring Link Name Origin Device Origin Port Destination Device Destination Port PE1-to-CE1 pe1 eth1 ce1 swp1 Unused link pe1 eth2 ce2 swp1 Unused link ce1 swp2 ce2 swp2 Unused link pe2 eth1 ce1 swp3 PE2-to-CE2 pe2 eth2 ce2 swp3 SP internal link pe1 eth3 pe2 eth3 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description ce1 192.168.10.1/24 Loopback swp1 10.1.0.1/30 PE1-to-CE1 swp2 Unused link swp3 Unused link ce2 192.168.11.1/24 Loopback swp1 Unused link swp2 Unused link swp3 10.1.0.5/30 PE2-to-CE2 pe1 10.0.0.1/32 Loopback eth1 10.1.0.2/30 PE1-to-CE1 eth2 Unused link eth3 10.1.0.9/30 SP internal link pe2 10.0.0.2/32 Loopback eth1 Unused link eth2 10.1.0.6/30 PE2-to-CE2 eth3 10.1.0.10/30 SP internal link Arista EOS does not display routes dropped by the BGP loop prevention logic even when the BGP soft reconfiguration is configured. \u21a9","title":"Fix AS-Path in Environments Reusing BGP AS Numbers"},{"location":"session/2-asoverride/#fix-as-path-in-environments-reusing-bgp-as-numbers","text":"In the previous lab exercise exercise, you connected multiple sites using the same BGP AS number to a Service Provider network. While that works, it does require the customers to configure BGP nerd knobs that might not be supported on all devices. Wouldn\u2019t it be better if you could fix the AS path on the Service Provider routers? That\u2019s what you\u2019ll accomplish in this lab exercise \u2013 you\u2019ll configure the Provider Edge (PE) routers to replace the customer AS number with the provider AS number.","title":"Fix AS-Path in Environments Reusing BGP AS Numbers"},{"location":"session/2-asoverride/#existing-router-configuration","text":"The routers in your lab use the following BGP AS numbers. The Provider Edge (PE) routers do not advertise local prefixes; each Customer Edge (CE) router advertises an IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 ce1 192.168.10.1 192.168.10.1/24 ce2 192.168.11.1 192.168.11.1/24 AS65100 pe1 10.0.0.1 pe2 10.0.0.2 Your routers have these BGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure them manually. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 pe1 10.0.0.1 65100 pe2 65100 10.0.0.2 ce1 65000 10.1.0.1 pe2 10.0.0.2 65100 pe1 65100 10.0.0.1 ce2 65000 10.1.0.5 PE1 and PE2 also run OSPF in the backbone area. Router Interface IPv4 Address Neighbor(s) pe1 Loopback 10.0.0.1/32 swp3 10.1.0.9/30 pe2 pe2 Loopback 10.0.0.2/32 swp3 10.1.0.10/30 pe1","title":"Existing Router Configuration"},{"location":"session/2-asoverride/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to session/2-asoverride Execute netlab up ( device requirements , other options ) Log into your devices (PE1, PE2) with netlab connect and verify that they have established OSPF adjacency, an IBGP session between themselves, and the EBGP sessions with the CE routers. Note: netlab will configure IP addressing, OSPF routing, BGP sessions, and BGP prefix advertisements on all routers. You must manually configure your routers if you\u2019re not using netlab . Warning Some BGP implementations do not support the AS override functionality. For example, it\u2019s not available on Arista EOS.","title":"Start the Lab"},{"location":"session/2-asoverride/#the-problem","text":"Assuming your routers are configured correctly, you should see the customer prefixes in the BGP table on the PE routers. For example, this is how the BGP table looks on PE1 running Arista EOS: pe1>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 192.168.10.0/24 10.1.0.1 0 - 100 0 65000 i * > 192.168.11.0/24 10.0.0.2 0 - 100 0 65000 i However, the customer routers do not accept the prefixes advertised by other customer sites because the local AS number appears in the AS path. You can see the difference between received and accepted routes if you\u2019re using Cumulus Linux or FRR on the CE routers 1 : $ netlab connect ce1 Connecting to container clab-allowas-ce1, starting bash Use vtysh to connect to FRR daemon ce1(bash)#sudo vtysh Hello, this is FRRouting (version 7.5+cl4.4.0u4). Copyright 1996-2005 Kunihiro Ishiguro, et al. ce1# show ip bgp neighbors 10.1.0.2 received-routes BGP table version is 1, local router ID is 192.168.10.1, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 192.168.11.0/24 10.1.0.2 0 65100 65000 i Total number of prefixes 1 ce1# show ip bgp neighbors 10.1.0.2 routes ce1#","title":"The Problem"},{"location":"session/2-asoverride/#configuration-task","text":"Many BGP implementations have a nerd knob that replaces the neighbor AS number in the AS path with the local AS number. It\u2019s usually configured on individual BGP sessions (per neighbor) with a command similar to neighbor as-override . Replace the neighbor AS number with the local AS number on EBGP sessions on PE1 and PE2 Resend the EBGP updates from PE1 and PE2, usually using a command similar to clear ip bgp soft out","title":"Configuration Task"},{"location":"session/2-asoverride/#verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on CE routers. You\u2019ll get this printout if you configure as-override on PE1 but not PE2. If that command fails or you\u2019re using another network operating system on your CE routers, check the BGP tables on CE1 and CE2. This is the printout you should get on CE1 running Cumulus Linux: $ netlab connect ce1 --show ip bgp Connecting to container clab-allowas-ce1, executing sudo vtysh -c \"show ip bgp\" BGP table version is 2, local router ID is 192.168.10.1, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path * 192.168.10.0/24 10.1.0.2 0 65100 65100 i *> 0.0.0.0 0 32768 i *> 192.168.11.0/24 10.1.0.2 0 65100 65100 i Tip The PE routers advertise the CE prefixes back to the CE routers, and the AS override functionality effectively disables the BGP loop prevention logic. You\u2019ll usually see two copies of the local prefixes in the BGP table.","title":"Verification"},{"location":"session/2-asoverride/#reference-information","text":"This lab uses the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"session/2-asoverride/#req","text":"Provider routers: use any device supported by the netlab BGP and OSPF configuration modules . The device also has to support the AS override functionality. Customer routers: use any device supported by the netlab BGP configuration modules . The lab topology configures BGP soft reconfiguration on Cumulus Linux and FRR; if you use other devices as CE routers, you might want to configure something similar on the EBGP sessions. You can perform automated lab validation with Arista EOS, Cumulus Linux, or FRR running on the CE routers. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains initial CE router device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"session/2-asoverride/#lab-wiring","text":"Link Name Origin Device Origin Port Destination Device Destination Port PE1-to-CE1 pe1 eth1 ce1 swp1 Unused link pe1 eth2 ce2 swp1 Unused link ce1 swp2 ce2 swp2 Unused link pe2 eth1 ce1 swp3 PE2-to-CE2 pe2 eth2 ce2 swp3 SP internal link pe1 eth3 pe2 eth3","title":"Lab Wiring"},{"location":"session/2-asoverride/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description ce1 192.168.10.1/24 Loopback swp1 10.1.0.1/30 PE1-to-CE1 swp2 Unused link swp3 Unused link ce2 192.168.11.1/24 Loopback swp1 Unused link swp2 Unused link swp3 10.1.0.5/30 PE2-to-CE2 pe1 10.0.0.1/32 Loopback eth1 10.1.0.2/30 PE1-to-CE1 eth2 Unused link eth3 10.1.0.9/30 SP internal link pe2 10.0.0.2/32 Loopback eth1 Unused link eth2 10.1.0.6/30 PE2-to-CE2 eth3 10.1.0.10/30 SP internal link Arista EOS does not display routes dropped by the BGP loop prevention logic even when the BGP soft reconfiguration is configured. \u21a9","title":"Lab Addressing"},{"location":"session/3-localas/","text":"Use Multiple AS Numbers on the Same Router Some end-customers want to run BGP with their Internet Service Providers (ISPs) without acquiring a public BGP AS number. In such cases, ISPs might allocate a private BGP AS number to them. However, if you want to connect to multiple ISPs, you cannot expect to get the same private BGP AS number from all of them; your router will have to pretend it has multiple identities. Existing BGP Configuration The routers in your lab use the following BGP AS numbers. Each router router advertises an IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 10.0.0.1/32 AS65100 x1 10.0.0.10 192.168.100.1/24 AS65101 x2 10.0.0.11 192.168.101.1/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 rtr 10.0.0.1 65000 x1 65100 10.1.0.2 x2 65101 10.1.0.6 However, X2 (belonging to ISP-2) thinks your router should have AS number 65007: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 x2 10.0.0.11 65101 rtr 65007 10.1.0.5 Start the Lab Assuming you already set up your lab infrastructure : Change directory to session/3-localas Execute netlab up ( device requirements , other options ) Log into your router (RTR) with netlab connect rtr and verify that the IP addresses and the EBGP sessions are properly configured. The Problem Log into your router and check its EBGP sessions. The session with X1 should be established; the one with X2 should be stuck in the Active or Idle state 1 . This is the printout you would get on Arista EOS: rtr>show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc x1 10.1.0.2 4 65100 10 10 0 0 00:00:16 Estab 1 1 x2 10.1.0.6 4 65101 12 12 0 0 00:00:17 Active You know that the BGP session with X2 is not established due to a BGP AS number mismatch, but you might not be so lucky in real life. Figure out how you\u2019d discover that in a production environment. For example, Arista EOS BGP logging messages tell you that the BGP neighbor (X2) keeps rejecting your BGP OPEN message due to \u201ca bad AS number\u201d: %BGP-3-NOTIFICATION: received from neighbor 10.1.0.6 (VRF default AS 65101) 2/2 (Open Message Error/bad AS number) 2 bytes Configuration Tasks Most BGP implementations have a nerd knob that changes the local BGP AS number on a single EBGP session. It\u2019s usually configured with a command similar to neighbor local-as . The syntax and capabilities of this command vary between implementations. Some implementations cannot do anything else but \u201c use a different AS number \u201d while others have configurable AS-path handling behavior. For example, you can decide whether to include the node BGP AS number in the AS path on Cumulus Linux. Configure BGP local AS on the EBGP session between RTR and X2 to be 65007. Ensure that the AS number 65000 never appears in the AS path advertised to X2. Warning After configuring the BGP local AS number, you might have to clear the BGP session with X2. Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on the external routers. The validation tests check: The state of the EBGP session between RTR and X2 Whether RTR sends any routing updates to X2 Whether RTR removes AS 65000 from the AS path before sending the updates to X2. For example, this is the result you\u2019d get if you configured the BGP local AS number on Cumulus Linux but forgot to remove AS 65000 from the outbound AS path: If the netlab validate command fails or you\u2019re using another network operating system on the ISP routers, it\u2019s time to start a troubleshooting session. Check the state of the BGP sessions on RTR with a command similar to show ip bgp summary . All sessions should be in the established state. Check the BGP table on X2 with a command similar to show ip bgp . If you forgot to remove AS 65000 from the updates sent to X2, X2 will have a BGP table similar to the following one: x2# show ip bgp BGP table version is 3, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 65101 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 10.0.0.1/32 10.1.0.5 0 0 65007 65000 i *> 192.168.100.0/24 10.1.0.5 0 65007 65000 65100 i *> 192.168.101.0/24 0.0.0.0 0 32768 i Displayed 3 routes and 3 total paths The correct version of the BGP table on X2 is in the following printout. Please note that the AS 65000 is no longer in the AS path. x2# show ip bgp BGP table version is 11, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 65101 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 10.0.0.1/32 10.1.0.5 0 0 65007 i *> 192.168.100.0/24 10.1.0.5 0 65007 65100 i *> 192.168.101.0/24 0.0.0.0 0 32768 i Displayed 3 routes and 3 total paths Next: Remove private AS numbers from the AS path . Reference Information This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Use any device supported by the netlab BGP configuration module for the customer- and provider routers. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on X1 and X2. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux. Lab Wiring Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback eth1 10.1.0.2/30 x1 -> rtr x2 192.168.101.1/24 Loopback eth1 10.1.0.6/30 x2 -> rtr Most BGP implementations keep trying and show a BGP session that cannot be successfully established as Active . FRR (also used by Cumulus Linux) gives up and shows it as Idle . You have to clear the BGP session to tell FRR to retry. \u21a9","title":"Use Multiple AS Numbers on the Same Router"},{"location":"session/3-localas/#use-multiple-as-numbers-on-the-same-router","text":"Some end-customers want to run BGP with their Internet Service Providers (ISPs) without acquiring a public BGP AS number. In such cases, ISPs might allocate a private BGP AS number to them. However, if you want to connect to multiple ISPs, you cannot expect to get the same private BGP AS number from all of them; your router will have to pretend it has multiple identities.","title":"Use Multiple AS Numbers on the Same Router"},{"location":"session/3-localas/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. Each router router advertises an IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 10.0.0.1/32 AS65100 x1 10.0.0.10 192.168.100.1/24 AS65101 x2 10.0.0.11 192.168.101.1/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 rtr 10.0.0.1 65000 x1 65100 10.1.0.2 x2 65101 10.1.0.6 However, X2 (belonging to ISP-2) thinks your router should have AS number 65007: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 x2 10.0.0.11 65101 rtr 65007 10.1.0.5","title":"Existing BGP Configuration"},{"location":"session/3-localas/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to session/3-localas Execute netlab up ( device requirements , other options ) Log into your router (RTR) with netlab connect rtr and verify that the IP addresses and the EBGP sessions are properly configured.","title":"Start the Lab"},{"location":"session/3-localas/#the-problem","text":"Log into your router and check its EBGP sessions. The session with X1 should be established; the one with X2 should be stuck in the Active or Idle state 1 . This is the printout you would get on Arista EOS: rtr>show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc x1 10.1.0.2 4 65100 10 10 0 0 00:00:16 Estab 1 1 x2 10.1.0.6 4 65101 12 12 0 0 00:00:17 Active You know that the BGP session with X2 is not established due to a BGP AS number mismatch, but you might not be so lucky in real life. Figure out how you\u2019d discover that in a production environment. For example, Arista EOS BGP logging messages tell you that the BGP neighbor (X2) keeps rejecting your BGP OPEN message due to \u201ca bad AS number\u201d: %BGP-3-NOTIFICATION: received from neighbor 10.1.0.6 (VRF default AS 65101) 2/2 (Open Message Error/bad AS number) 2 bytes","title":"The Problem"},{"location":"session/3-localas/#configuration-tasks","text":"Most BGP implementations have a nerd knob that changes the local BGP AS number on a single EBGP session. It\u2019s usually configured with a command similar to neighbor local-as . The syntax and capabilities of this command vary between implementations. Some implementations cannot do anything else but \u201c use a different AS number \u201d while others have configurable AS-path handling behavior. For example, you can decide whether to include the node BGP AS number in the AS path on Cumulus Linux. Configure BGP local AS on the EBGP session between RTR and X2 to be 65007. Ensure that the AS number 65000 never appears in the AS path advertised to X2. Warning After configuring the BGP local AS number, you might have to clear the BGP session with X2.","title":"Configuration Tasks"},{"location":"session/3-localas/#verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on the external routers. The validation tests check: The state of the EBGP session between RTR and X2 Whether RTR sends any routing updates to X2 Whether RTR removes AS 65000 from the AS path before sending the updates to X2. For example, this is the result you\u2019d get if you configured the BGP local AS number on Cumulus Linux but forgot to remove AS 65000 from the outbound AS path: If the netlab validate command fails or you\u2019re using another network operating system on the ISP routers, it\u2019s time to start a troubleshooting session. Check the state of the BGP sessions on RTR with a command similar to show ip bgp summary . All sessions should be in the established state. Check the BGP table on X2 with a command similar to show ip bgp . If you forgot to remove AS 65000 from the updates sent to X2, X2 will have a BGP table similar to the following one: x2# show ip bgp BGP table version is 3, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 65101 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 10.0.0.1/32 10.1.0.5 0 0 65007 65000 i *> 192.168.100.0/24 10.1.0.5 0 65007 65000 65100 i *> 192.168.101.0/24 0.0.0.0 0 32768 i Displayed 3 routes and 3 total paths The correct version of the BGP table on X2 is in the following printout. Please note that the AS 65000 is no longer in the AS path. x2# show ip bgp BGP table version is 11, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 65101 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 10.0.0.1/32 10.1.0.5 0 0 65007 i *> 192.168.100.0/24 10.1.0.5 0 65007 65100 i *> 192.168.101.0/24 0.0.0.0 0 32768 i Displayed 3 routes and 3 total paths Next: Remove private AS numbers from the AS path .","title":"Verification"},{"location":"session/3-localas/#reference-information","text":"This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"session/3-localas/#req","text":"Use any device supported by the netlab BGP configuration module for the customer- and provider routers. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on X1 and X2. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"session/3-localas/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1","title":"Lab Wiring"},{"location":"session/3-localas/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.100.1/24 Loopback eth1 10.1.0.2/30 x1 -> rtr x2 192.168.101.1/24 Loopback eth1 10.1.0.6/30 x2 -> rtr Most BGP implementations keep trying and show a BGP session that cannot be successfully established as Active . FRR (also used by Cumulus Linux) gives up and shows it as Idle . You have to clear the BGP session to tell FRR to retry. \u21a9","title":"Lab Addressing"},{"location":"session/4-removeprivate/","text":"Remove Private BGP AS Numbers from the AS Path Some end customers use private BGP AS numbers when running BGP with their Internet Service Providers (ISPs). Those AS numbers should not appear in the BGP AS path when the ISP advertises those prefixes to its peers and upstream providers. In this lab exercise, you\u2019ll use the remove private AS feature available in many BGP implementations to remove the customer\u2019s private BGP AS number from the BGP AS path sent in EBGP updates. Existing BGP Configuration The routers in your lab use the following BGP AS numbers. Each router advertises an IPv4 prefix. Node/ASN Router ID Advertised prefixes AS64500 rtr 10.0.0.1 10.0.0.1/32 AS64507 x2 10.0.0.11 10.0.0.11/32 AS65000 x1 10.0.0.10 192.168.42.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Node Neighbor Neighbor AS Neighbor IPv4 rtr x1 65000 10.1.0.2 x2 64507 10.1.0.6 Start the Lab Assuming you already set up your lab infrastructure : Change directory to session/4-removeprivate Execute netlab up ( device requirements , other options ) Log into your router (RTR) with the netlab connect rtr command and verify that the IP addresses and the EBGP sessions are properly configured. The Problem Log into X2 and check its BGP table. You\u2019ll notice that the AS path for the prefix 192.168.42.0/24 contains a private AS number 1 65000 that should not be visible outside your autonomous system. For example, you would get the following printout when running Cumulus Linux on X2: 2 $ netlab connect x2 -q --show ip bgp BGP table version is 3, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 64507 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 10.0.0.1/32 10.1.0.5 0 64500 i *> 10.0.0.11/32 0.0.0.0 0 32768 i *> 192.168.42.0/24 10.1.0.5 0 64500 65000 i Displayed 3 routes and 3 total paths You must change your router\u2019s configuration to make AS 65000 disappear from the AS path. Configuration Tasks Most BGP implementations have a nerd knob that removes private AS numbers from the AS path. It\u2019s usually configured with a command similar to neighbor remove-private-as . Configure removal of private AS numbers on the EBGP session between rtr and x2 . Warning After changing the BGP configuration, you might have to do a soft reset of the EBGP session to force your router to resend the routing updates with modified AS paths. Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on the external routers. The validation tests check: The state of the EBGP session between RTR and X1/X2 Whether RTR sends the prefix received from X1 to X2 Whether RTR removes private AS numbers (AS 65000) from the AS path before sending the updates to X2. For example, this is the result you\u2019d get if you forgot to remove the private AS numbers from the updates sent to X2: If the netlab validate command fails or you\u2019re using another network operating system on the ISP routers, do manual validation. Check the BGP table on X2. None of the AS paths should contain private AS numbers. This is the printout you should get on Cumulus Linux: $ netlab connect x2 -q --show ip bgp BGP table version is 4, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 64507 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 10.0.0.1/32 10.1.0.5 0 64500 i *> 10.0.0.11/32 0.0.0.0 0 32768 i *> 192.168.42.0/24 10.1.0.5 0 64500 i Displayed 3 routes and 3 total paths Reference Information This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Use any device supported by the netlab BGP configuration module for the customer- and provider routers. Git repository contains initial Cumulus Linux device configurations for X1 and X2. Lab Wiring Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.42.1/24 Loopback swp1 10.1.0.2/30 x1 -> rtr x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr AS numbers 64496-64511 are not private AS numbers. RFC 5398 reserved them for documentation. Private AS numbers start with AS 64512. \u21a9 You need netlab release 1.7.0 or later to use the netlab connect \u2013show command. Read this document if you use an older netlab release and use Cumulus Linux or FRR as the external routers. \u21a9","title":"Remove Private BGP AS Numbers from the AS Path"},{"location":"session/4-removeprivate/#remove-private-bgp-as-numbers-from-the-as-path","text":"Some end customers use private BGP AS numbers when running BGP with their Internet Service Providers (ISPs). Those AS numbers should not appear in the BGP AS path when the ISP advertises those prefixes to its peers and upstream providers. In this lab exercise, you\u2019ll use the remove private AS feature available in many BGP implementations to remove the customer\u2019s private BGP AS number from the BGP AS path sent in EBGP updates.","title":"Remove Private BGP AS Numbers from the AS Path"},{"location":"session/4-removeprivate/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. Each router advertises an IPv4 prefix. Node/ASN Router ID Advertised prefixes AS64500 rtr 10.0.0.1 10.0.0.1/32 AS64507 x2 10.0.0.11 10.0.0.11/32 AS65000 x1 10.0.0.10 192.168.42.0/24 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to configure EBGP neighbors and advertised prefixes manually. Node Neighbor Neighbor AS Neighbor IPv4 rtr x1 65000 10.1.0.2 x2 64507 10.1.0.6","title":"Existing BGP Configuration"},{"location":"session/4-removeprivate/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to session/4-removeprivate Execute netlab up ( device requirements , other options ) Log into your router (RTR) with the netlab connect rtr command and verify that the IP addresses and the EBGP sessions are properly configured.","title":"Start the Lab"},{"location":"session/4-removeprivate/#the-problem","text":"Log into X2 and check its BGP table. You\u2019ll notice that the AS path for the prefix 192.168.42.0/24 contains a private AS number 1 65000 that should not be visible outside your autonomous system. For example, you would get the following printout when running Cumulus Linux on X2: 2 $ netlab connect x2 -q --show ip bgp BGP table version is 3, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 64507 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 10.0.0.1/32 10.1.0.5 0 64500 i *> 10.0.0.11/32 0.0.0.0 0 32768 i *> 192.168.42.0/24 10.1.0.5 0 64500 65000 i Displayed 3 routes and 3 total paths You must change your router\u2019s configuration to make AS 65000 disappear from the AS path.","title":"The Problem"},{"location":"session/4-removeprivate/#configuration-tasks","text":"Most BGP implementations have a nerd knob that removes private AS numbers from the AS path. It\u2019s usually configured with a command similar to neighbor remove-private-as . Configure removal of private AS numbers on the EBGP session between rtr and x2 . Warning After changing the BGP configuration, you might have to do a soft reset of the EBGP session to force your router to resend the routing updates with modified AS paths.","title":"Configuration Tasks"},{"location":"session/4-removeprivate/#verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on the external routers. The validation tests check: The state of the EBGP session between RTR and X1/X2 Whether RTR sends the prefix received from X1 to X2 Whether RTR removes private AS numbers (AS 65000) from the AS path before sending the updates to X2. For example, this is the result you\u2019d get if you forgot to remove the private AS numbers from the updates sent to X2: If the netlab validate command fails or you\u2019re using another network operating system on the ISP routers, do manual validation. Check the BGP table on X2. None of the AS paths should contain private AS numbers. This is the printout you should get on Cumulus Linux: $ netlab connect x2 -q --show ip bgp BGP table version is 4, local router ID is 10.0.0.11, vrf id 0 Default local pref 100, local AS 64507 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete Network Next Hop Metric LocPrf Weight Path *> 10.0.0.1/32 10.1.0.5 0 64500 i *> 10.0.0.11/32 0.0.0.0 0 32768 i *> 192.168.42.0/24 10.1.0.5 0 64500 i Displayed 3 routes and 3 total paths","title":"Verification"},{"location":"session/4-removeprivate/#reference-information","text":"This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"session/4-removeprivate/#req","text":"Use any device supported by the netlab BGP configuration module for the customer- and provider routers. Git repository contains initial Cumulus Linux device configurations for X1 and X2.","title":"Device Requirements"},{"location":"session/4-removeprivate/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1","title":"Lab Wiring"},{"location":"session/4-removeprivate/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 192.168.42.1/24 Loopback swp1 10.1.0.2/30 x1 -> rtr x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr AS numbers 64496-64511 are not private AS numbers. RFC 5398 reserved them for documentation. Private AS numbers start with AS 64512. \u21a9 You need netlab release 1.7.0 or later to use the netlab connect \u2013show command. Read this document if you use an older netlab release and use Cumulus Linux or FRR as the external routers. \u21a9","title":"Lab Addressing"},{"location":"session/5-routeserver/","text":"BGP Route Server in an Internet Exchange Point Internet Exchange Points (IXPs) provide a layer-2 network shared between participating Internet Service Providers (ISPs). While IP forwarding and BGP peering remain under the control of the ISPs, many IXPs offer a route server functionality \u2013 participants can peer with a shared BGP daemon that distributes the participants\u2019 BGP prefixes without modifying the AS path or BGP next hops . In this lab exercise, you\u2019ll implement a BGP route server on a small Internet Exchange Point. Existing BGP Configuration The routers in your lab use the following BGP AS numbers. Each ISP router advertises an IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 rs 10.0.0.1 AS65100 isp1 192.168.100.1 192.168.100.0/24 AS65103 isp2 192.168.103.1 192.168.103.0/24 AS65107 isp3 192.168.107.1 192.168.107.0/24 The routers have these EBGP sessions. netlab configures them automatically; if you\u2019re using another lab infrastructure, you\u2019ll have to configure your devices manually. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 isp1 192.168.100.1 65100 rs 65000 172.16.42.1 isp2 192.168.103.1 65103 rs 65000 172.16.42.1 isp3 192.168.107.1 65107 rs 65000 172.16.42.1 rs 10.0.0.1 65000 isp1 65100 172.16.42.2 isp2 65103 172.16.42.3 isp3 65107 172.16.42.4 Start the Lab You can start the lab on your own lab infrastructure or in GitHub Codespaces ( more details ): Change directory to session/5-routeserver Execute netlab up ( device requirements , other options ). Log into your devices with netlab connect and verify their IP addresses and EBGP sessions. Tip If the device you want to work with does not support the BGP Route Server functionality, use Cumulus Linux as the route server. Start the lab with netlab up -s nodes.rs.device=cumulus and (if you\u2019re not familiar with FRRouting configuration) configure the route server with netlab config route_server -l rs . The Problem Log into ISP1 and check its BGP table. The routes from AS 65103 and 65107 are in the BGP table, but while the next hops point to ISP2 and ISP3, the AS path contains AS 65000 (IXP AS number): $ netlab connect isp1 --show ip bgp Connecting to clab-rs-isp1 using SSH port 22, executing show ip bgp BGP routing table information for VRF default Router identifier 10.0.1.1, local AS number 65100 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending best path selection Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 192.168.100.0/24 - - - - 0 i * > 192.168.103.0/24 172.16.42.3 0 - 100 0 65000 65103 i * > 192.168.107.0/24 172.16.42.4 0 - 100 0 65000 65107 i We would like to hide the fact that the routes (but not traffic) pass through AS 65000, and a BGP route server (defined in RFC 7947 ) is exactly what we need. Configuration Tasks Configuring BGP route server clients is easy (assuming your device supports the BGP route server functionality) and usually takes a single command similar to neighbor route-server-client configured either in the BGP routing process or within an address family: On RS, configure ISP1, ISP2, and ISP3 as route server clients. After configuring the route server clients, the route server sends EBGP updates without its AS number in the AS path. Most BGP implementations reject such updates as the first AS number in the AS path should be the neighbor\u2019s AS number. You have to turn off that check with a command similar to no neighbor enforce-first-as : On ISP1, turn off the first AS check on the EBGP session with RS (it\u2019s already turned off on ISP2 and ISP3). Warning After configuring RS and ISP1, you might have to resend the EBGP updates from RS. Use a command similar to clear ip bgp * soft or clear ip bgp * . Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Arista EOS, Cumulus Linux, or FRR on ISP2 and ISP3. The validation tests check: The state of the EBGP session between RS and ISP1/ISP2. Whether RS propagates routing updates from ISP1 to ISP2/ISP3. Whether the EBGP updates from RS contain the unmodified AS path. Whether ISP1 accepts EBGP updates from RS (we have to use a ping command to check that). For example, this is the result you\u2019d get if you ran the validation test before performing the configuration tasks: If the netlab validate command fails or you\u2019re using another network operating system on the ISP routers, check the state of the BGP table on ISP1. It should contain prefixes advertised by ISP2/ISP3 without AS 65000 in the AS path: $ netlab connect isp1 --show ip bgp Connecting to clab-rs-isp1 using SSH port 22, executing show ip bgp BGP routing table information for VRF default Router identifier 10.0.1.1, local AS number 65100 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending best path selection Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 192.168.100.0/24 - - - - 0 i * > 192.168.103.0/24 172.16.42.3 0 - 100 0 65103 i * > 192.168.107.0/24 172.16.42.4 0 - 100 0 65107 i Next: Dynamic BGP Peers Passive BGP Sessions Reference Information Device Requirements Use any device supported by the netlab BGP configuration module for ISP1 and RS routers. Use Arista EOS, Cumulus Linux, or FRR for ISP2 and ISP3. You can do automated lab validation with Arista, Cumulus Linux, or FRR running on ISP2 and ISP3. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains Cumulus Linux initial device configurations for RS, ISP2, and ISP3. Lab Wiring Origin Device Origin Port Link Name (NET) Description isp1 Ethernet1 rs_1 IXP LAN isp2 swp1 rs_1 IXP LAN isp3 swp1 rs_1 IXP LAN rs Ethernet1 rs_1 IXP LAN Lab Addressing Node/Interface IPv4 Address IPv6 Address Description isp1 192.168.100.1/24 Loopback Ethernet1 172.16.42.2/24 IXP LAN isp2 192.168.103.1/24 Loopback swp1 172.16.42.3/24 IXP LAN isp3 192.168.107.1/24 Loopback swp1 172.16.42.4/24 IXP LAN rs 10.0.0.1/32 Loopback Ethernet1 172.16.42.1/24 IXP LAN","title":"BGP Route Server in an Internet Exchange Point"},{"location":"session/5-routeserver/#bgp-route-server-in-an-internet-exchange-point","text":"Internet Exchange Points (IXPs) provide a layer-2 network shared between participating Internet Service Providers (ISPs). While IP forwarding and BGP peering remain under the control of the ISPs, many IXPs offer a route server functionality \u2013 participants can peer with a shared BGP daemon that distributes the participants\u2019 BGP prefixes without modifying the AS path or BGP next hops . In this lab exercise, you\u2019ll implement a BGP route server on a small Internet Exchange Point.","title":"BGP Route Server in an Internet Exchange Point"},{"location":"session/5-routeserver/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. Each ISP router advertises an IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 rs 10.0.0.1 AS65100 isp1 192.168.100.1 192.168.100.0/24 AS65103 isp2 192.168.103.1 192.168.103.0/24 AS65107 isp3 192.168.107.1 192.168.107.0/24 The routers have these EBGP sessions. netlab configures them automatically; if you\u2019re using another lab infrastructure, you\u2019ll have to configure your devices manually. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 isp1 192.168.100.1 65100 rs 65000 172.16.42.1 isp2 192.168.103.1 65103 rs 65000 172.16.42.1 isp3 192.168.107.1 65107 rs 65000 172.16.42.1 rs 10.0.0.1 65000 isp1 65100 172.16.42.2 isp2 65103 172.16.42.3 isp3 65107 172.16.42.4","title":"Existing BGP Configuration"},{"location":"session/5-routeserver/#start-the-lab","text":"You can start the lab on your own lab infrastructure or in GitHub Codespaces ( more details ): Change directory to session/5-routeserver Execute netlab up ( device requirements , other options ). Log into your devices with netlab connect and verify their IP addresses and EBGP sessions. Tip If the device you want to work with does not support the BGP Route Server functionality, use Cumulus Linux as the route server. Start the lab with netlab up -s nodes.rs.device=cumulus and (if you\u2019re not familiar with FRRouting configuration) configure the route server with netlab config route_server -l rs .","title":"Start the Lab"},{"location":"session/5-routeserver/#the-problem","text":"Log into ISP1 and check its BGP table. The routes from AS 65103 and 65107 are in the BGP table, but while the next hops point to ISP2 and ISP3, the AS path contains AS 65000 (IXP AS number): $ netlab connect isp1 --show ip bgp Connecting to clab-rs-isp1 using SSH port 22, executing show ip bgp BGP routing table information for VRF default Router identifier 10.0.1.1, local AS number 65100 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending best path selection Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 192.168.100.0/24 - - - - 0 i * > 192.168.103.0/24 172.16.42.3 0 - 100 0 65000 65103 i * > 192.168.107.0/24 172.16.42.4 0 - 100 0 65000 65107 i We would like to hide the fact that the routes (but not traffic) pass through AS 65000, and a BGP route server (defined in RFC 7947 ) is exactly what we need.","title":"The Problem"},{"location":"session/5-routeserver/#configuration-tasks","text":"Configuring BGP route server clients is easy (assuming your device supports the BGP route server functionality) and usually takes a single command similar to neighbor route-server-client configured either in the BGP routing process or within an address family: On RS, configure ISP1, ISP2, and ISP3 as route server clients. After configuring the route server clients, the route server sends EBGP updates without its AS number in the AS path. Most BGP implementations reject such updates as the first AS number in the AS path should be the neighbor\u2019s AS number. You have to turn off that check with a command similar to no neighbor enforce-first-as : On ISP1, turn off the first AS check on the EBGP session with RS (it\u2019s already turned off on ISP2 and ISP3). Warning After configuring RS and ISP1, you might have to resend the EBGP updates from RS. Use a command similar to clear ip bgp * soft or clear ip bgp * .","title":"Configuration Tasks"},{"location":"session/5-routeserver/#verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Arista EOS, Cumulus Linux, or FRR on ISP2 and ISP3. The validation tests check: The state of the EBGP session between RS and ISP1/ISP2. Whether RS propagates routing updates from ISP1 to ISP2/ISP3. Whether the EBGP updates from RS contain the unmodified AS path. Whether ISP1 accepts EBGP updates from RS (we have to use a ping command to check that). For example, this is the result you\u2019d get if you ran the validation test before performing the configuration tasks: If the netlab validate command fails or you\u2019re using another network operating system on the ISP routers, check the state of the BGP table on ISP1. It should contain prefixes advertised by ISP2/ISP3 without AS 65000 in the AS path: $ netlab connect isp1 --show ip bgp Connecting to clab-rs-isp1 using SSH port 22, executing show ip bgp BGP routing table information for VRF default Router identifier 10.0.1.1, local AS number 65100 Route status codes: s - suppressed contributor, * - valid, > - active, E - ECMP head, e - ECMP S - Stale, c - Contributing to ECMP, b - backup, L - labeled-unicast % - Pending best path selection Origin codes: i - IGP, e - EGP, ? - incomplete RPKI Origin Validation codes: V - valid, I - invalid, U - unknown AS Path Attributes: Or-ID - Originator ID, C-LST - Cluster List, LL Nexthop - Link Local Nexthop Network Next Hop Metric AIGP LocPref Weight Path * > 192.168.100.0/24 - - - - 0 i * > 192.168.103.0/24 172.16.42.3 0 - 100 0 65103 i * > 192.168.107.0/24 172.16.42.4 0 - 100 0 65107 i Next: Dynamic BGP Peers Passive BGP Sessions","title":"Verification"},{"location":"session/5-routeserver/#reference-information","text":"","title":"Reference Information"},{"location":"session/5-routeserver/#req","text":"Use any device supported by the netlab BGP configuration module for ISP1 and RS routers. Use Arista EOS, Cumulus Linux, or FRR for ISP2 and ISP3. You can do automated lab validation with Arista, Cumulus Linux, or FRR running on ISP2 and ISP3. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains Cumulus Linux initial device configurations for RS, ISP2, and ISP3.","title":"Device Requirements"},{"location":"session/5-routeserver/#lab-wiring","text":"Origin Device Origin Port Link Name (NET) Description isp1 Ethernet1 rs_1 IXP LAN isp2 swp1 rs_1 IXP LAN isp3 swp1 rs_1 IXP LAN rs Ethernet1 rs_1 IXP LAN","title":"Lab Wiring"},{"location":"session/5-routeserver/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description isp1 192.168.100.1/24 Loopback Ethernet1 172.16.42.2/24 IXP LAN isp2 192.168.103.1/24 Loopback swp1 172.16.42.3/24 IXP LAN isp3 192.168.107.1/24 Loopback swp1 172.16.42.4/24 IXP LAN rs 10.0.0.1/32 Loopback Ethernet1 172.16.42.1/24 IXP LAN","title":"Lab Addressing"},{"location":"session/6-templates/","text":"BGP Session Templates In the Use BGP Route Reflectors exercise, you had to configure numerous IBGP neighbors on BGP route servers. All the neighbor configurations were identical; you had to: Specify the source interface for the IBGP session; Set the remote AS number to be equal to the local AS number; Configure the neighbor as a route reflector client. Wouldn\u2019t it be great if you could configure all those parameters in another configuration object and then apply them to the IBGP neighbors? Most BGP implementations have something along those lines and call that feature BGP groups , BGP peer groups , or BGP session templates . That\u2019s what you\u2019ll practice in this lab exercise. Existing BGP Configuration All routers in your lab are in AS 65000. The spine routers (S1 and S2) are route reflectors; the leaf routers (L1 and L2) advertise one IPv4 prefix each. Node/ASN Router ID BGP RR Advertised prefixes AS65000 l1 10.0.0.3 192.168.42.0/24 l2 10.0.0.4 192.168.43.0/24 s1 10.0.0.1 \u2705 s2 10.0.0.2 \u2705 The routers in your lab have these IBGP neighbors: Node Neighbor Neighbor AS Neighbor IPv4 l1 s1 65000 10.0.0.1 s2 65000 10.0.0.2 l2 s1 65000 10.0.0.1 s2 65000 10.0.0.2 s1 s2 65000 10.0.0.2 l1 65000 10.0.0.3 l2 65000 10.0.0.4 s2 s1 65000 10.0.0.1 l1 65000 10.0.0.3 l2 65000 10.0.0.4 All four routers are running OSPF in area 0: Router Interface IPv4 Address Neighbor(s) l1 Loopback 10.0.0.3/32 swp1 10.1.0.1/30 s1 swp2 10.1.0.5/30 s2 l2 Loopback 10.0.0.4/32 swp1 10.1.0.9/30 s1 swp2 10.1.0.13/30 s2 s1 Loopback 10.0.0.1/32 Ethernet1 10.1.0.2/30 l1 Ethernet2 10.1.0.10/30 l2 s2 Loopback 10.0.0.2/32 Ethernet1 10.1.0.6/30 l1 Ethernet2 10.1.0.14/30 l2 When starting the lab, netlab configures IP addresses, OSPF, BGP, IBGP neighbors, and the advertised prefixes. If you\u2019re using another lab infrastructure, you\u2019ll have to configure all that manually. Start the Lab Assuming you already set up your lab infrastructure : Change directory to session/6-templates Execute netlab up ( device requirements , other options ) Log into the lab routers with netlab connect and verify that the IP addresses, OSPF routing, and the IBGP sessions are properly configured. The Problem Log into one of the spine routers and check its BGP configuration. You\u2019ll notice that it has the same set of parameters specified on most IBGP sessions. For example, this is the configuration you would get on Arista EOS: router bgp 65000 router-id 10.0.0.1 no bgp default ipv4-unicast bgp cluster-id 10.0.0.1 bgp advertise-inactive neighbor 10.0.0.2 remote-as 65000 neighbor 10.0.0.2 update-source Loopback0 neighbor 10.0.0.2 description s2 neighbor 10.0.0.2 send-community standard extended neighbor 10.0.0.3 remote-as 65000 neighbor 10.0.0.3 update-source Loopback0 neighbor 10.0.0.3 description l1 neighbor 10.0.0.3 route-reflector-client neighbor 10.0.0.3 send-community standard extended neighbor 10.0.0.4 remote-as 65000 neighbor 10.0.0.4 update-source Loopback0 neighbor 10.0.0.4 description l2 neighbor 10.0.0.4 route-reflector-client neighbor 10.0.0.4 send-community standard extended Configuration Tasks Most BGP implementations can group BGP neighbor parameters into groups , peer groups , or templates that can then be applied en-masse to the BGP neighbors. Define two session templates on S1 and S2: ibgp : Regular IBGP peers (other route reflectors). They share the update source, the AS number, and the BGP community propagation settings. rr-client : Route reflector clients. They share the ibgp parameters and the route-reflector-client settings. Tip Some BGP implementations support hierarchical templates with inheritance. If you\u2019re using such an implementation, define the \u200crr-client template as a child template of the ibgp\u200c template. Some BGP implementations have \u200csession templates that specify the parameters of the BGP TCP session (update source, remote AS) and \u200cpolicy templates that specify all parameters that can be applied to an address family (BGP community propagation, route reflector clients). You might have to create both templates to get the job done. After creating the BGP templates, change the BGP configuration on S1 and S2 to use the BGP templates: Remove all neighbor parameters from the IBGP neighbors Apply appropriate BGP templates or peer groups to the IBGP neighbors. Tip It might be easier to remove the IBGP neighbors and recreate them. If you do this, remember to activate the IPv4 address family (if needed) for the recreated neighbors. Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on the leaf routers. The validation tests check: The state of the IBGP session between L1/L2 and S1/S2 Whether S1 and S2 both propagate the L2 prefix to L1. This is the printout you should get after completing the lab exercise: If the netlab validate command fails or you\u2019re using another network operating system on the leaf routers: Log into the leaf routers Check the state of the IBGP sessions with a command similar to show ip bgp summary . All sessions should be in the established state. For example, this is the printout you should get on FRRouting or Cumulus Linux: l1# show ip bgp summary IPv4 Unicast Summary: BGP router identifier 10.0.0.3, local AS number 65000 VRF default vrf-id 0 BGP table version 2 RIB entries 3, using 288 bytes of memory Peers 2, using 26 KiB of memory Neighbor V AS MsgRcvd MsgSent TblVer InQ OutQ Up/Down State/PfxRcd PfxSnt Desc s1(10.0.0.1) 4 65000 80 79 2 0 0 00:03:47 1 1 s1 s2(10.0.0.2) 4 65000 78 77 2 0 0 00:03:42 1 1 s2 Total number of neighbors 2 Check the BGP table with a command similar to show ip bgp . It should contain the local prefix and two paths to the remote prefix, resulting in a printout similar to the one you\u2019d get on FRRouting or Cumulus Linux: l1# show ip bgp BGP table version is 2, local router ID is 10.0.0.3, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *> 192.168.42.0/24 0.0.0.0(l1) 0 32768 i *>i192.168.43.0/24 10.0.0.4(s1) 0 100 0 i * i 10.0.0.4(s2) 0 100 0 i Next: If you already completed the basic routing policy lab exercises , try out BGP policy templates . Use BGP peer groups to set up dynamic BGP neighbors . Reference Information Device Requirements Use any device supported by the netlab BGP configuration module for the leaf- and spine routers. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on S1 and S2. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains leaf router initial device configurations for Cumulus Linux. Lab Wiring Origin Device Origin Port Destination Device Destination Port l1 swp1 s1 Ethernet1 l1 swp2 s2 Ethernet1 l2 swp1 s1 Ethernet2 l2 swp2 s2 Ethernet2 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description l1 10.0.0.3/32 Loopback swp1 10.1.0.1/30 l1 -> s1 swp2 10.1.0.5/30 l1 -> s2 l2 10.0.0.4/32 Loopback swp1 10.1.0.9/30 l2 -> s1 swp2 10.1.0.13/30 l2 -> s2 s1 10.0.0.1/32 Loopback Ethernet1 10.1.0.2/30 s1 -> l1 Ethernet2 10.1.0.10/30 s1 -> l2 s2 10.0.0.2/32 Loopback Ethernet1 10.1.0.6/30 s2 -> l1 Ethernet2 10.1.0.14/30 s2 -> l2","title":"BGP Session Templates"},{"location":"session/6-templates/#bgp-session-templates","text":"In the Use BGP Route Reflectors exercise, you had to configure numerous IBGP neighbors on BGP route servers. All the neighbor configurations were identical; you had to: Specify the source interface for the IBGP session; Set the remote AS number to be equal to the local AS number; Configure the neighbor as a route reflector client. Wouldn\u2019t it be great if you could configure all those parameters in another configuration object and then apply them to the IBGP neighbors? Most BGP implementations have something along those lines and call that feature BGP groups , BGP peer groups , or BGP session templates . That\u2019s what you\u2019ll practice in this lab exercise.","title":"BGP Session Templates"},{"location":"session/6-templates/#existing-bgp-configuration","text":"All routers in your lab are in AS 65000. The spine routers (S1 and S2) are route reflectors; the leaf routers (L1 and L2) advertise one IPv4 prefix each. Node/ASN Router ID BGP RR Advertised prefixes AS65000 l1 10.0.0.3 192.168.42.0/24 l2 10.0.0.4 192.168.43.0/24 s1 10.0.0.1 \u2705 s2 10.0.0.2 \u2705 The routers in your lab have these IBGP neighbors: Node Neighbor Neighbor AS Neighbor IPv4 l1 s1 65000 10.0.0.1 s2 65000 10.0.0.2 l2 s1 65000 10.0.0.1 s2 65000 10.0.0.2 s1 s2 65000 10.0.0.2 l1 65000 10.0.0.3 l2 65000 10.0.0.4 s2 s1 65000 10.0.0.1 l1 65000 10.0.0.3 l2 65000 10.0.0.4 All four routers are running OSPF in area 0: Router Interface IPv4 Address Neighbor(s) l1 Loopback 10.0.0.3/32 swp1 10.1.0.1/30 s1 swp2 10.1.0.5/30 s2 l2 Loopback 10.0.0.4/32 swp1 10.1.0.9/30 s1 swp2 10.1.0.13/30 s2 s1 Loopback 10.0.0.1/32 Ethernet1 10.1.0.2/30 l1 Ethernet2 10.1.0.10/30 l2 s2 Loopback 10.0.0.2/32 Ethernet1 10.1.0.6/30 l1 Ethernet2 10.1.0.14/30 l2 When starting the lab, netlab configures IP addresses, OSPF, BGP, IBGP neighbors, and the advertised prefixes. If you\u2019re using another lab infrastructure, you\u2019ll have to configure all that manually.","title":"Existing BGP Configuration"},{"location":"session/6-templates/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to session/6-templates Execute netlab up ( device requirements , other options ) Log into the lab routers with netlab connect and verify that the IP addresses, OSPF routing, and the IBGP sessions are properly configured.","title":"Start the Lab"},{"location":"session/6-templates/#the-problem","text":"Log into one of the spine routers and check its BGP configuration. You\u2019ll notice that it has the same set of parameters specified on most IBGP sessions. For example, this is the configuration you would get on Arista EOS: router bgp 65000 router-id 10.0.0.1 no bgp default ipv4-unicast bgp cluster-id 10.0.0.1 bgp advertise-inactive neighbor 10.0.0.2 remote-as 65000 neighbor 10.0.0.2 update-source Loopback0 neighbor 10.0.0.2 description s2 neighbor 10.0.0.2 send-community standard extended neighbor 10.0.0.3 remote-as 65000 neighbor 10.0.0.3 update-source Loopback0 neighbor 10.0.0.3 description l1 neighbor 10.0.0.3 route-reflector-client neighbor 10.0.0.3 send-community standard extended neighbor 10.0.0.4 remote-as 65000 neighbor 10.0.0.4 update-source Loopback0 neighbor 10.0.0.4 description l2 neighbor 10.0.0.4 route-reflector-client neighbor 10.0.0.4 send-community standard extended","title":"The Problem"},{"location":"session/6-templates/#configuration-tasks","text":"Most BGP implementations can group BGP neighbor parameters into groups , peer groups , or templates that can then be applied en-masse to the BGP neighbors. Define two session templates on S1 and S2: ibgp : Regular IBGP peers (other route reflectors). They share the update source, the AS number, and the BGP community propagation settings. rr-client : Route reflector clients. They share the ibgp parameters and the route-reflector-client settings. Tip Some BGP implementations support hierarchical templates with inheritance. If you\u2019re using such an implementation, define the \u200crr-client template as a child template of the ibgp\u200c template. Some BGP implementations have \u200csession templates that specify the parameters of the BGP TCP session (update source, remote AS) and \u200cpolicy templates that specify all parameters that can be applied to an address family (BGP community propagation, route reflector clients). You might have to create both templates to get the job done. After creating the BGP templates, change the BGP configuration on S1 and S2 to use the BGP templates: Remove all neighbor parameters from the IBGP neighbors Apply appropriate BGP templates or peer groups to the IBGP neighbors. Tip It might be easier to remove the IBGP neighbors and recreate them. If you do this, remember to activate the IPv4 address family (if needed) for the recreated neighbors.","title":"Configuration Tasks"},{"location":"session/6-templates/#verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Cumulus Linux, FRR, or Arista EOS on the leaf routers. The validation tests check: The state of the IBGP session between L1/L2 and S1/S2 Whether S1 and S2 both propagate the L2 prefix to L1. This is the printout you should get after completing the lab exercise: If the netlab validate command fails or you\u2019re using another network operating system on the leaf routers: Log into the leaf routers Check the state of the IBGP sessions with a command similar to show ip bgp summary . All sessions should be in the established state. For example, this is the printout you should get on FRRouting or Cumulus Linux: l1# show ip bgp summary IPv4 Unicast Summary: BGP router identifier 10.0.0.3, local AS number 65000 VRF default vrf-id 0 BGP table version 2 RIB entries 3, using 288 bytes of memory Peers 2, using 26 KiB of memory Neighbor V AS MsgRcvd MsgSent TblVer InQ OutQ Up/Down State/PfxRcd PfxSnt Desc s1(10.0.0.1) 4 65000 80 79 2 0 0 00:03:47 1 1 s1 s2(10.0.0.2) 4 65000 78 77 2 0 0 00:03:42 1 1 s2 Total number of neighbors 2 Check the BGP table with a command similar to show ip bgp . It should contain the local prefix and two paths to the remote prefix, resulting in a printout similar to the one you\u2019d get on FRRouting or Cumulus Linux: l1# show ip bgp BGP table version is 2, local router ID is 10.0.0.3, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *> 192.168.42.0/24 0.0.0.0(l1) 0 32768 i *>i192.168.43.0/24 10.0.0.4(s1) 0 100 0 i * i 10.0.0.4(s2) 0 100 0 i Next: If you already completed the basic routing policy lab exercises , try out BGP policy templates . Use BGP peer groups to set up dynamic BGP neighbors .","title":"Verification"},{"location":"session/6-templates/#reference-information","text":"","title":"Reference Information"},{"location":"session/6-templates/#req","text":"Use any device supported by the netlab BGP configuration module for the leaf- and spine routers. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on S1 and S2. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains leaf router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"session/6-templates/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port l1 swp1 s1 Ethernet1 l1 swp2 s2 Ethernet1 l2 swp1 s1 Ethernet2 l2 swp2 s2 Ethernet2","title":"Lab Wiring"},{"location":"session/6-templates/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description l1 10.0.0.3/32 Loopback swp1 10.1.0.1/30 l1 -> s1 swp2 10.1.0.5/30 l1 -> s2 l2 10.0.0.4/32 Loopback swp1 10.1.0.9/30 l2 -> s1 swp2 10.1.0.13/30 l2 -> s2 s1 10.0.0.1/32 Loopback Ethernet1 10.1.0.2/30 s1 -> l1 Ethernet2 10.1.0.10/30 s1 -> l2 s2 10.0.0.2/32 Loopback Ethernet1 10.1.0.6/30 s2 -> l1 Ethernet2 10.1.0.14/30 s2 -> l2","title":"Lab Addressing"},{"location":"session/7-policy/","text":"BGP Policy Templates Finishing at least some of the BGP routing policies exercises probably made you realize how many nerd knobs one can attach to a BGP neighbor. Now imagine applying that set of settings to dozens of neighbors you have at an Internet Exchange Point (or to hundreds of customer connections) while making sure the changes in your policy are consistently applied to every neighbor. While network automation is the obvious answer to the above challenge, you might find BGP policy templates (or BGP peer groups ) helpful. They allow you to group all relevant BGP settings into a single object and apply them as a group to a BGP neighbor. That\u2019s what you\u2019ll practice in this lab exercise. Tip This lab exercise uses AS-path filters, prefix filters, and BGP communities. Before starting this one, complete the routing policies lab exercises. Existing BGP Configuration The routers in your lab use the following BGP AS numbers. Each router advertises one or more IPv4 prefixes. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 10.0.0.1/32 AS65100 x1 10.0.0.10 192.168.100.1/24 10.0.0.10/32 AS65101 x2 10.0.0.11 192.168.101.1/24 10.0.0.11/32 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to manually configure EBGP neighbors and advertised prefixes. Node Neighbor Neighbor AS Neighbor IPv4 rtr x1 65100 10.1.0.2 x2 65101 10.1.0.6 Start the Lab Assuming you already set up your lab infrastructure : Change directory to session/7-policy Execute netlab up ( device requirements , other options ) Log into your router (RTR) with the netlab connect rtr command and verify that the IP addresses and the EBGP sessions are properly configured. The Problem The neighboring autonomous systems advertise too specific prefixes to your router, and your current configuration is no better. This is the current BGP table of your router as displayed on an Arista cEOS container: rtr>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.1/32 - - - - 0 i * > 10.0.0.10/32 10.1.0.2 0 - 100 0 65100 i * > 10.0.0.11/32 10.1.0.6 0 - 100 0 65101 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i * > 192.168.101.0/24 10.1.0.6 0 - 100 0 65101 i You\u2019ll have to deploy input and output filters to remove the unwanted prefixes, and you\u2019ll have to apply them to all misbehaving neighbors \u2013 an ideal use case for BGP policy templates. Configuration Steps You\u2019ll have to configure the BGP route filters before getting to the crux of this exercise. That shouldn\u2019t be a problem: you already did that in the Filter Advertised Prefixes and Minimize the Size of Your BGP Table lab exercises. To make things more interesting: Attach BGP community 65000:200 to BGP prefixes received from X1 and X2 Attach BGP community 65000:300 to local prefixes. 1 Tip You did something similar in the Attach BGP Communities to Outgoing BGP Updates lab exercise. Once you have configured the necessary route filters: Create a BGP policy template (some implementations might call them peer groups ). Attach the route filters to the policy template. Attach the policy template to all EBGP neighbors. Resend the BGP updates to the EBGP neighbors with soft inbound and outbound resets of the EBGP sessions. Tip Some BGP implementations (for example, Cisco IOS) have session templates that control the parameters of a BGP session (source interface, MD5 password) and policy templates that control the processing of inbound- and outbound BGP updates. You usually apply session templates to BGP neighbors at the routing protocol level and policy templates at the address family level. Other BGP implementations (for example, Arista EOS) have just the BGP \u200cpeer groups . You can use them to apply \u200csession and \u200cpolicy parameters to BGP neighbors, often at the routing protocol level. Sometimes, you must apply the same peer groups at the address family level to attach the routing filters to BGP neighbors. Verification Inspect the BGP table on your router. You should see the /24 prefixes from X1 and X2 but not their /32 prefixes. rtr>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.1/32 - - - - 0 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i * > 192.168.101.0/24 10.1.0.6 0 - 100 0 65101 i Inspect an individual prefix received from X1 or X2. It should have the BGP community 65000:200. rtr>show ip bgp 192.168.100.0 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 192.168.100.0/24 Paths: 1 available 65100 10.1.0.2 from 10.1.0.2 (10.0.0.10) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 0, tag 0 Received 00:27:02 ago, valid, external, best Community: 65000:200 Rx SAFI: Unicast Inspect the BGP table on X1. You should see the /24 prefixes from RTR and X2 but not their /32 prefixes. $ netlab connect x1 -q --show ip bgp | grep Network -A 100 Network Next Hop Metric LocPrf Weight Path *> 10.0.0.10/32 0.0.0.0 0 32768 i *> 192.168.42.0/24 10.1.0.1 0 65000 ? *> 192.168.100.0/24 0.0.0.0 0 32768 i *> 192.168.101.0/24 10.1.0.1 0 65000 65101 i Displayed 4 routes and 4 total paths Inspect the prefix 192.168.101.0/24 (advertised by X2) on X1. It should have the BGP community 65000:200. BGP routing table entry for 192.168.101.0/24 Paths: (1 available, best #1, table default) Advertised to non peer-group peers: 10.1.0.1 65000 65101 10.1.0.1 from 10.1.0.1 (10.0.0.1) Origin IGP, valid, external, bestpath-from-AS 65000, best (First path received) Community: 65000:200 Last update: Fri Feb 2 09:17:58 2024 Inspect the prefix 192.168.42.0/24 (advertised by RTR) on X1. It should have the BGP community 65000:300. $ netlab connect x1 -q --show ip bgp 192.168.42.0/24 BGP routing table entry for 192.168.42.0/24 Paths: (1 available, best #1, table default) Advertised to non peer-group peers: 10.1.0.1 65000 10.1.0.1 from 10.1.0.1 (10.0.0.1) Origin incomplete, valid, external, bestpath-from-AS 65000, best (First path received) Community: 65000:300 Last update: Fri Feb 2 09:17:58 2024 On X2, repeat the tests you did on X1. Reference Information This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure: Device Requirements Use any device supported by the netlab BGP configuration module for the customer- and provider routers. Git repository contains external router initial device configurations for Cumulus Linux. Lab Wiring Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr Those communities could be used in other autonomous systems to separate peer routes from transit routes. \u21a9","title":"BGP Policy Templates"},{"location":"session/7-policy/#bgp-policy-templates","text":"Finishing at least some of the BGP routing policies exercises probably made you realize how many nerd knobs one can attach to a BGP neighbor. Now imagine applying that set of settings to dozens of neighbors you have at an Internet Exchange Point (or to hundreds of customer connections) while making sure the changes in your policy are consistently applied to every neighbor. While network automation is the obvious answer to the above challenge, you might find BGP policy templates (or BGP peer groups ) helpful. They allow you to group all relevant BGP settings into a single object and apply them as a group to a BGP neighbor. That\u2019s what you\u2019ll practice in this lab exercise. Tip This lab exercise uses AS-path filters, prefix filters, and BGP communities. Before starting this one, complete the routing policies lab exercises.","title":"BGP Policy Templates"},{"location":"session/7-policy/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. Each router advertises one or more IPv4 prefixes. Node/ASN Router ID Advertised prefixes AS65000 rtr 10.0.0.1 192.168.42.0/24 10.0.0.1/32 AS65100 x1 10.0.0.10 192.168.100.1/24 10.0.0.10/32 AS65101 x2 10.0.0.11 192.168.101.1/24 10.0.0.11/32 Your router has these EBGP neighbors. netlab configures them automatically; if you\u2019re using some other lab infrastructure, you\u2019ll have to manually configure EBGP neighbors and advertised prefixes. Node Neighbor Neighbor AS Neighbor IPv4 rtr x1 65100 10.1.0.2 x2 65101 10.1.0.6","title":"Existing BGP Configuration"},{"location":"session/7-policy/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to session/7-policy Execute netlab up ( device requirements , other options ) Log into your router (RTR) with the netlab connect rtr command and verify that the IP addresses and the EBGP sessions are properly configured.","title":"Start the Lab"},{"location":"session/7-policy/#the-problem","text":"The neighboring autonomous systems advertise too specific prefixes to your router, and your current configuration is no better. This is the current BGP table of your router as displayed on an Arista cEOS container: rtr>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.1/32 - - - - 0 i * > 10.0.0.10/32 10.1.0.2 0 - 100 0 65100 i * > 10.0.0.11/32 10.1.0.6 0 - 100 0 65101 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i * > 192.168.101.0/24 10.1.0.6 0 - 100 0 65101 i You\u2019ll have to deploy input and output filters to remove the unwanted prefixes, and you\u2019ll have to apply them to all misbehaving neighbors \u2013 an ideal use case for BGP policy templates.","title":"The Problem"},{"location":"session/7-policy/#configuration-steps","text":"You\u2019ll have to configure the BGP route filters before getting to the crux of this exercise. That shouldn\u2019t be a problem: you already did that in the Filter Advertised Prefixes and Minimize the Size of Your BGP Table lab exercises. To make things more interesting: Attach BGP community 65000:200 to BGP prefixes received from X1 and X2 Attach BGP community 65000:300 to local prefixes. 1 Tip You did something similar in the Attach BGP Communities to Outgoing BGP Updates lab exercise. Once you have configured the necessary route filters: Create a BGP policy template (some implementations might call them peer groups ). Attach the route filters to the policy template. Attach the policy template to all EBGP neighbors. Resend the BGP updates to the EBGP neighbors with soft inbound and outbound resets of the EBGP sessions. Tip Some BGP implementations (for example, Cisco IOS) have session templates that control the parameters of a BGP session (source interface, MD5 password) and policy templates that control the processing of inbound- and outbound BGP updates. You usually apply session templates to BGP neighbors at the routing protocol level and policy templates at the address family level. Other BGP implementations (for example, Arista EOS) have just the BGP \u200cpeer groups . You can use them to apply \u200csession and \u200cpolicy parameters to BGP neighbors, often at the routing protocol level. Sometimes, you must apply the same peer groups at the address family level to attach the routing filters to BGP neighbors.","title":"Configuration Steps"},{"location":"session/7-policy/#verification","text":"Inspect the BGP table on your router. You should see the /24 prefixes from X1 and X2 but not their /32 prefixes. rtr>show ip bgp | begin Network Network Next Hop Metric AIGP LocPref Weight Path * > 10.0.0.1/32 - - - - 0 i * > 192.168.42.0/24 - - - - 0 ? * > 192.168.100.0/24 10.1.0.2 0 - 100 0 65100 i * > 192.168.101.0/24 10.1.0.6 0 - 100 0 65101 i Inspect an individual prefix received from X1 or X2. It should have the BGP community 65000:200. rtr>show ip bgp 192.168.100.0 BGP routing table information for VRF default Router identifier 10.0.0.1, local AS number 65000 BGP routing table entry for 192.168.100.0/24 Paths: 1 available 65100 10.1.0.2 from 10.1.0.2 (10.0.0.10) Origin IGP, metric 0, localpref 100, IGP metric 0, weight 0, tag 0 Received 00:27:02 ago, valid, external, best Community: 65000:200 Rx SAFI: Unicast Inspect the BGP table on X1. You should see the /24 prefixes from RTR and X2 but not their /32 prefixes. $ netlab connect x1 -q --show ip bgp | grep Network -A 100 Network Next Hop Metric LocPrf Weight Path *> 10.0.0.10/32 0.0.0.0 0 32768 i *> 192.168.42.0/24 10.1.0.1 0 65000 ? *> 192.168.100.0/24 0.0.0.0 0 32768 i *> 192.168.101.0/24 10.1.0.1 0 65000 65101 i Displayed 4 routes and 4 total paths Inspect the prefix 192.168.101.0/24 (advertised by X2) on X1. It should have the BGP community 65000:200. BGP routing table entry for 192.168.101.0/24 Paths: (1 available, best #1, table default) Advertised to non peer-group peers: 10.1.0.1 65000 65101 10.1.0.1 from 10.1.0.1 (10.0.0.1) Origin IGP, valid, external, bestpath-from-AS 65000, best (First path received) Community: 65000:200 Last update: Fri Feb 2 09:17:58 2024 Inspect the prefix 192.168.42.0/24 (advertised by RTR) on X1. It should have the BGP community 65000:300. $ netlab connect x1 -q --show ip bgp 192.168.42.0/24 BGP routing table entry for 192.168.42.0/24 Paths: (1 available, best #1, table default) Advertised to non peer-group peers: 10.1.0.1 65000 10.1.0.1 from 10.1.0.1 (10.0.0.1) Origin incomplete, valid, external, bestpath-from-AS 65000, best (First path received) Community: 65000:300 Last update: Fri Feb 2 09:17:58 2024 On X2, repeat the tests you did on X1.","title":"Verification"},{"location":"session/7-policy/#reference-information","text":"This lab uses a subset of the 4-router lab topology . The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"session/7-policy/#req","text":"Use any device supported by the netlab BGP configuration module for the customer- and provider routers. Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"session/7-policy/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 swp1 rtr Ethernet2 x2 swp1","title":"Lab Wiring"},{"location":"session/7-policy/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.10/32 Loopback swp1 10.1.0.2/30 x1 -> rtr x2 10.0.0.11/32 Loopback swp1 10.1.0.6/30 x2 -> rtr Those communities could be used in other autonomous systems to separate peer routes from transit routes. \u21a9","title":"Lab Addressing"},{"location":"session/8-passive/","text":"Passive BGP Sessions BGP routers continuously try to establish TCP sessions (and start the BGP protocol) with the configured neighbors. That persistence might result in performance challenges when a hub router has hundreds (or thousands) of spoke neighbors that might not always be reachable. In those cases, a passive BGP router might offer an advantage; such a router would accept incoming TCP sessions to port 179 but never try to establish a TCP session with its BGP neighbors. Passive BGP is a rarely used feature but might make sense in these scenarios: Route reflectors with many clients, Route servers , Hubs in large VPN deployments, Leaf switches running BGP with servers or virtual machines, BGP monitoring tools, Routers outside a firewall running BGP with an inside router . In this lab exercise, you\u2019ll make the hub BGP router passive and explore what happens with its view of its BGP neighbors as they shut down their BGP sessions. Existing BGP Configuration The routers in your lab use the following BGP AS numbers. Each router router advertises an IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 hub 10.0.0.1 10.0.0.1/32 AS65100 s1 10.0.0.2 10.0.0.2/32 AS65103 s2 10.0.0.3 10.0.0.3/32 AS65107 s3 10.0.0.4 10.0.0.4/32 The hub router has these EBGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 hub 10.0.0.1 65000 s1 65100 172.16.0.2 s2 65103 172.16.0.3 s3 65107 172.16.0.4 netlab automatically configures device interfaces, IP addresses, and BGP routing; if you\u2019re using another lab infrastructure, you\u2019ll have to configure lab devices manually. Device Requirements Use any device supported by the netlab BGP configuration module for HUB and S1. Use any device for which netlab implements passive BGP neighbors and BGP timers for the external routers (S2 and S3). The Git repository contains external router initial device configurations for Cumulus Linux. Start the Lab Assuming you already set up your lab infrastructure : Change directory to session/8-passive Execute netlab up Log into your devices (HUB and S1) with netlab connect and verify that their IP addresses and the EBGP sessions are properly configured. The Problem Log into the hub router and check its EBGP sessions. It should have three established EBGP sessions. Now shut down S2: Use netlab status to find the container/VM name of S2. Use docker kill container if you\u2019re running network devices as containers. Use vagrant halt vm if you\u2019re running network devices as virtual machines After the BGP hold timer expires 1 , the corresponding EBGP session on the hub router will most probably enter the Connect state 2 : hub>show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc s1 172.16.0.2 4 65100 10 12 0 0 00:04:32 Estab 1 1 s2 172.16.0.3 4 65103 65 75 0 0 00:01:36 Connect s3 172.16.0.4 4 65107 101 114 0 0 00:04:31 Estab 1 1 We don\u2019t want that; we would like the hub router to ignore the unreachable neighbors. Configuration Tasks On the hub router, configure all EBGP neighbors as passive BGP neighbors with a configuration command similar to neighbor passive . Warning Cumulus Linux or FRR might reset the BGP session when you configure the device to be a passive BGP neighbor. Verification Inspect the state of the BGP sessions on the hub router with a command similar to show ip bgp summary . The session with S2 should be in an Idle or Active state (but not in Connect state). This is the printout you should get on Arista EOS: hub>show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc s1 172.16.0.2 4 65100 6 8 0 0 00:01:24 Estab 1 1 s2 172.16.0.3 4 65103 47 56 0 0 00:00:46 Active s3 172.16.0.4 4 65107 38 42 0 0 00:01:24 Estab 1 1 Tip When in doubt (the BGP states displayed by network devices can be confusing), use a command similar to show ip bgp neighbor ip-address and look for the passive keyword in the printout. Now clear all BGP sessions on the hub router with a command similar to clear ip bgp * . The session with S3 should enter the Idle or Active state \u2013 S3 is configured to be a passive EBGP peer, and two passive peers cannot establish a session. Reference Information Lab Wiring Origin Device Origin Port Link Name (NET) Description hub Ethernet1 passive_1 Carrier Ethernet LAN s1 Ethernet1 passive_1 Carrier Ethernet LAN s2 swp1 passive_1 Carrier Ethernet LAN s3 swp1 passive_1 Carrier Ethernet LAN Lab Addressing Node/Interface IPv4 Address IPv6 Address Description hub 10.0.0.1/32 Loopback Ethernet1 172.16.0.1/24 Carrier Ethernet LAN s1 10.0.0.2/32 Loopback Ethernet1 172.16.0.2/24 Carrier Ethernet LAN s2 10.0.0.3/32 Loopback swp1 172.16.0.3/24 Carrier Ethernet LAN s3 10.0.0.4/32 Loopback swp1 172.16.0.4/24 Carrier Ethernet LAN S2 tries to negotiate a 3-second BGP hold timer with the hub router \u21a9 The state in which a device actively tries to open a TCP session with a BGP neighbor might be displayed as an Active state on some other network devices. \u21a9","title":"Passive BGP Sessions"},{"location":"session/8-passive/#passive-bgp-sessions","text":"BGP routers continuously try to establish TCP sessions (and start the BGP protocol) with the configured neighbors. That persistence might result in performance challenges when a hub router has hundreds (or thousands) of spoke neighbors that might not always be reachable. In those cases, a passive BGP router might offer an advantage; such a router would accept incoming TCP sessions to port 179 but never try to establish a TCP session with its BGP neighbors. Passive BGP is a rarely used feature but might make sense in these scenarios: Route reflectors with many clients, Route servers , Hubs in large VPN deployments, Leaf switches running BGP with servers or virtual machines, BGP monitoring tools, Routers outside a firewall running BGP with an inside router . In this lab exercise, you\u2019ll make the hub BGP router passive and explore what happens with its view of its BGP neighbors as they shut down their BGP sessions.","title":"Passive BGP Sessions"},{"location":"session/8-passive/#existing-bgp-configuration","text":"The routers in your lab use the following BGP AS numbers. Each router router advertises an IPv4 prefix. Node/ASN Router ID Advertised prefixes AS65000 hub 10.0.0.1 10.0.0.1/32 AS65100 s1 10.0.0.2 10.0.0.2/32 AS65103 s2 10.0.0.3 10.0.0.3/32 AS65107 s3 10.0.0.4 10.0.0.4/32 The hub router has these EBGP neighbors: Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 hub 10.0.0.1 65000 s1 65100 172.16.0.2 s2 65103 172.16.0.3 s3 65107 172.16.0.4 netlab automatically configures device interfaces, IP addresses, and BGP routing; if you\u2019re using another lab infrastructure, you\u2019ll have to configure lab devices manually.","title":"Existing BGP Configuration"},{"location":"session/8-passive/#req","text":"Use any device supported by the netlab BGP configuration module for HUB and S1. Use any device for which netlab implements passive BGP neighbors and BGP timers for the external routers (S2 and S3). The Git repository contains external router initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"session/8-passive/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to session/8-passive Execute netlab up Log into your devices (HUB and S1) with netlab connect and verify that their IP addresses and the EBGP sessions are properly configured.","title":"Start the Lab"},{"location":"session/8-passive/#the-problem","text":"Log into the hub router and check its EBGP sessions. It should have three established EBGP sessions. Now shut down S2: Use netlab status to find the container/VM name of S2. Use docker kill container if you\u2019re running network devices as containers. Use vagrant halt vm if you\u2019re running network devices as virtual machines After the BGP hold timer expires 1 , the corresponding EBGP session on the hub router will most probably enter the Connect state 2 : hub>show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc s1 172.16.0.2 4 65100 10 12 0 0 00:04:32 Estab 1 1 s2 172.16.0.3 4 65103 65 75 0 0 00:01:36 Connect s3 172.16.0.4 4 65107 101 114 0 0 00:04:31 Estab 1 1 We don\u2019t want that; we would like the hub router to ignore the unreachable neighbors.","title":"The Problem"},{"location":"session/8-passive/#configuration-tasks","text":"On the hub router, configure all EBGP neighbors as passive BGP neighbors with a configuration command similar to neighbor passive . Warning Cumulus Linux or FRR might reset the BGP session when you configure the device to be a passive BGP neighbor.","title":"Configuration Tasks"},{"location":"session/8-passive/#verification","text":"Inspect the state of the BGP sessions on the hub router with a command similar to show ip bgp summary . The session with S2 should be in an Idle or Active state (but not in Connect state). This is the printout you should get on Arista EOS: hub>show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Description Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc s1 172.16.0.2 4 65100 6 8 0 0 00:01:24 Estab 1 1 s2 172.16.0.3 4 65103 47 56 0 0 00:00:46 Active s3 172.16.0.4 4 65107 38 42 0 0 00:01:24 Estab 1 1 Tip When in doubt (the BGP states displayed by network devices can be confusing), use a command similar to show ip bgp neighbor ip-address and look for the passive keyword in the printout. Now clear all BGP sessions on the hub router with a command similar to clear ip bgp * . The session with S3 should enter the Idle or Active state \u2013 S3 is configured to be a passive EBGP peer, and two passive peers cannot establish a session.","title":"Verification"},{"location":"session/8-passive/#reference-information","text":"","title":"Reference Information"},{"location":"session/8-passive/#lab-wiring","text":"Origin Device Origin Port Link Name (NET) Description hub Ethernet1 passive_1 Carrier Ethernet LAN s1 Ethernet1 passive_1 Carrier Ethernet LAN s2 swp1 passive_1 Carrier Ethernet LAN s3 swp1 passive_1 Carrier Ethernet LAN","title":"Lab Wiring"},{"location":"session/8-passive/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description hub 10.0.0.1/32 Loopback Ethernet1 172.16.0.1/24 Carrier Ethernet LAN s1 10.0.0.2/32 Loopback Ethernet1 172.16.0.2/24 Carrier Ethernet LAN s2 10.0.0.3/32 Loopback swp1 172.16.0.3/24 Carrier Ethernet LAN s3 10.0.0.4/32 Loopback swp1 172.16.0.4/24 Carrier Ethernet LAN S2 tries to negotiate a 3-second BGP hold timer with the hub router \u21a9 The state in which a device actively tries to open a TCP session with a BGP neighbor might be displayed as an Active state on some other network devices. \u21a9","title":"Lab Addressing"},{"location":"session/9-dynamic/","text":"Dynamic BGP Peers Unless you have a fully automated network provisioning system, configuring BGP neighbors on routers with hundreds or thousands of neighbors can become cumbersome. Fortunately, most BGP implementations support dynamic peers ; when configuring them on a BGP router, it accepts any incoming TCP session on port 179 as long as it matches an IP prefix, an IP access-control list, or a prefix list. Warning When deployed incorrectly, dynamic BGP peers could become a huge security risk. Use BGP security mechanisms like MD5 passwords and GTSM to stop an intruder from connecting to your BGP router from outside of your network. Dynamic BGP peers make sense in these scenarios: Route reflectors with many clients, Route servers, Hubs in large VPN deployments, Leaf switches running BGP with servers or virtual machines. In this lab exercise, you\u2019ll configure two types of dynamic peers on a hub router: EBGP peers (spoke sites) and IBGP peers (core routers). We\u2019ll use the same BGP AS number on all spoke sites (see Reuse a BGP AS Number Across Multiple Sites for an explanation of that design decision). Existing Device Configuration The routers in your lab use the following BGP AS numbers. The external routers and the hub router advertise IPv4 prefixes. Node/ASN Router ID Advertised prefixes AS65000 c1 10.0.0.4 c2 10.0.0.5 hub 10.0.0.1 192.168.42.0/24 AS65100 s1 10.0.0.2 10.0.0.2/32 s2 10.0.0.3 10.0.0.3/32 These BGP neighbors are configured in your lab. Please note that the Hub router has no neighbors; you will use the dynamic BGP neighbors functionality to establish BGP sessions with all the other lab routers. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 c1 10.0.0.4 65000 hub 65000 10.0.0.1 c2 65000 10.0.0.5 c2 10.0.0.5 65000 hub 65000 10.0.0.1 c1 65000 10.0.0.4 s1 10.0.0.2 65100 hub 65000 172.16.42.1 s2 10.0.0.3 65100 hub 65000 172.16.42.1 Hub, C1, and C2 also run OSPF in the backbone area. Start the Lab Assuming you already set up your lab infrastructure : Change directory to session/9-dynamic Execute netlab up ( device requirements ) Log into the Hub router with the netlab connect hub command and verify its IP addresses and OSPF neighbors. Configuration Tasks Configuring dynamic BGP neighbors is usually a two-step process: Configure a peer group to define the dynamic neighbor\u2019s characteristics. In this lab, you\u2019ll have to define two peer groups, one for IBGP sessions and another one for EBGP sessions. Tip Revisit: Establish an IBGP Session lab if you have a problem configuring IBGP sessions. BGP Session Templates lab if you\u2019re struggling with peer groups. Also, you might have to activate the peer groups for the IPv4 address family. Configure the BGP router to accept incoming TCP sessions on port 179 from an IP address range with a configuration command similar to bgp listen . You\u2019ll have to tie the allowed IP address range to a peer group to tell your router which parameters to use for a dynamic BGP neighbor. Use the following IP address ranges: Address range Peer group 10.0.0.0/24 IBGP sessions 172.16.42.0/24 EBGP sessions with AS 65100 Verification You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Arista EOS, Cumulus Linux, or FRR on S1, S2, C1, and C2. The validation tests check: The state of the BGP session between those routers and the Hub router. Whether those routers receive the loopback IPv4 prefix from the Hub router. You can also validate your work on the Hub router: Check the state of the BGP sessions with a command similar to show ip bgp summary . You should see four BGP neighbors, two from AS 65000 and two from AS 65100. $ netlab connect -q hub --show ip bgp sum IPv4 Unicast Summary: BGP router identifier 10.0.0.1, local AS number 65000 VRF default vrf-id 0 BGP table version 3 RIB entries 5, using 480 bytes of memory Peers 4, using 52 KiB of memory Peer groups 2, using 128 bytes of memory Neighbor V AS MsgRcvd MsgSent TblVer InQ OutQ Up/Down State/PfxRcd PfxSnt Desc *s1(172.16.42.2) 4 65100 42 43 3 0 0 00:01:52 1 3 FRRouting/10.0.1_git *s2(172.16.42.3) 4 65100 42 43 3 0 0 00:01:52 1 3 FRRouting/10.0.1_git *c1(10.0.0.4) 4 65000 44 47 3 0 0 00:02:05 0 3 FRRouting/10.0.1_git *c2(10.0.0.5) 4 65000 44 47 3 0 0 00:02:04 0 3 FRRouting/10.0.1_git Total number of neighbors 4 * - dynamic neighbor 4 dynamic neighbor(s), limit 100 Check the BGP table on the Hub router with a command similar to show ip bgp . You should see the prefixes advertised by S1 and S2 as well as the local prefix: $ netlab connect -q hub --show ip bgp BGP table version is 3, local router ID is 10.0.0.1, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *> 10.0.0.2/32 172.16.42.2(s1) 0 0 65100 i *> 10.0.0.3/32 172.16.42.3(s2) 0 0 65100 i *> 192.168.42.0/24 0.0.0.0(hub) 0 32768 i Displayed 3 routes and 3 total paths Impact of BGP Session Loss A router using dynamic BGP neighbors usually removes all neighbor-related information once a BGP session with the neighbor is lost. You can shut down a BGP neighbor on one of the other routers to explore how the hub router reacts to the BGP session loss. Tip You can use the netlab config command to shut down the BGP session with the Hub router if you\u2019re running Cumulus Linux, FRR, or Arista EOS on the other routers: Use netlab config disable --limit C1 1 to shut down the BGP session Use netlab config enable --limit C1 to reenable it. For example, after shutting down the BGP session with the Hub router on C1, you could observe the following BGP logging messages on the Hub router running Arista EOS: Bgp: %BGP-3-NOTIFICATION: received from neighbor 10.0.0.4 (VRF default AS 65000) 6/2 (Cease/administrative shutdown) reason: Bgp: %BGP-5-ADJCHANGE: peer 10.0.0.4 (VRF default AS 65000) old state Established event RecvNotify new state Idle However, even though the BGP log message claims the BGP neighbor is now in the Idle state, the neighbor is no longer visible in the list of BGP neighbors (printout from Arista EOS): hub#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 10.0.0.5 4 65000 1881 2210 0 0 01:33:54 Estab 1 1 172.16.42.2 4 65100 1832 2146 0 0 01:31:15 Estab 1 1 172.16.42.3 4 65100 1832 2147 0 0 01:31:15 Estab 1 1 Warning Do not use dynamic BGP neighbors if you want to use BGP operational data (for example, show command printouts or SNMP information) to find failed BGP sessions. Reference Information The following information might help you if you plan to build custom lab infrastructure: Device Requirements Use any device supported by the netlab BGP and OSPF configuration modules for the lab routers. If you run Arista EOS, Cumulus Linux, or FRR on S1, S2, C1, and C2, you can use the netlab config command to turn BGP sessions on or off. You will have to do that manually on other devices. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on S1, S2, C1, and C2. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains initial device configurations for Cumulus Linux. Lab Wiring Point-to-Point Links Origin Device Origin Port Destination Device Destination Port hub Ethernet2 c1 swp1 hub Ethernet3 c2 swp1 c1 swp2 c2 swp2 LAN Links Origin Device Origin Port Link Name (NET) Description hub Ethernet1 rs_1 Carrier Ethernet s1 swp1 rs_1 Carrier Ethernet s2 swp1 rs_1 Carrier Ethernet Lab Addressing Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.4/32 Loopback swp1 10.1.0.1/30 c1 -> hub swp2 10.1.0.9/30 c1 -> c2 c2 10.0.0.5/32 Loopback swp1 10.1.0.5/30 c2 -> hub swp2 10.1.0.10/30 c2 -> c1 hub 10.0.0.1/32 Loopback Ethernet1 172.16.42.1/24 Carrier Ethernet Ethernet2 10.1.0.2/30 hub -> c1 Ethernet3 10.1.0.6/30 hub -> c2 s1 10.0.0.2/32 Loopback swp1 172.16.42.2/24 Carrier Ethernet s2 10.0.0.3/32 Loopback swp1 172.16.42.3/24 Carrier Ethernet Replace C1 with any other node name if needed \u21a9","title":"Dynamic BGP Peers"},{"location":"session/9-dynamic/#dynamic-bgp-peers","text":"Unless you have a fully automated network provisioning system, configuring BGP neighbors on routers with hundreds or thousands of neighbors can become cumbersome. Fortunately, most BGP implementations support dynamic peers ; when configuring them on a BGP router, it accepts any incoming TCP session on port 179 as long as it matches an IP prefix, an IP access-control list, or a prefix list. Warning When deployed incorrectly, dynamic BGP peers could become a huge security risk. Use BGP security mechanisms like MD5 passwords and GTSM to stop an intruder from connecting to your BGP router from outside of your network. Dynamic BGP peers make sense in these scenarios: Route reflectors with many clients, Route servers, Hubs in large VPN deployments, Leaf switches running BGP with servers or virtual machines. In this lab exercise, you\u2019ll configure two types of dynamic peers on a hub router: EBGP peers (spoke sites) and IBGP peers (core routers). We\u2019ll use the same BGP AS number on all spoke sites (see Reuse a BGP AS Number Across Multiple Sites for an explanation of that design decision).","title":"Dynamic BGP Peers"},{"location":"session/9-dynamic/#existing-device-configuration","text":"The routers in your lab use the following BGP AS numbers. The external routers and the hub router advertise IPv4 prefixes. Node/ASN Router ID Advertised prefixes AS65000 c1 10.0.0.4 c2 10.0.0.5 hub 10.0.0.1 192.168.42.0/24 AS65100 s1 10.0.0.2 10.0.0.2/32 s2 10.0.0.3 10.0.0.3/32 These BGP neighbors are configured in your lab. Please note that the Hub router has no neighbors; you will use the dynamic BGP neighbors functionality to establish BGP sessions with all the other lab routers. Node Router ID / Neighbor Router AS/ Neighbor AS Neighbor IPv4 c1 10.0.0.4 65000 hub 65000 10.0.0.1 c2 65000 10.0.0.5 c2 10.0.0.5 65000 hub 65000 10.0.0.1 c1 65000 10.0.0.4 s1 10.0.0.2 65100 hub 65000 172.16.42.1 s2 10.0.0.3 65100 hub 65000 172.16.42.1 Hub, C1, and C2 also run OSPF in the backbone area.","title":"Existing Device Configuration"},{"location":"session/9-dynamic/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to session/9-dynamic Execute netlab up ( device requirements ) Log into the Hub router with the netlab connect hub command and verify its IP addresses and OSPF neighbors.","title":"Start the Lab"},{"location":"session/9-dynamic/#configuration-tasks","text":"Configuring dynamic BGP neighbors is usually a two-step process: Configure a peer group to define the dynamic neighbor\u2019s characteristics. In this lab, you\u2019ll have to define two peer groups, one for IBGP sessions and another one for EBGP sessions. Tip Revisit: Establish an IBGP Session lab if you have a problem configuring IBGP sessions. BGP Session Templates lab if you\u2019re struggling with peer groups. Also, you might have to activate the peer groups for the IPv4 address family. Configure the BGP router to accept incoming TCP sessions on port 179 from an IP address range with a configuration command similar to bgp listen . You\u2019ll have to tie the allowed IP address range to a peer group to tell your router which parameters to use for a dynamic BGP neighbor. Use the following IP address ranges: Address range Peer group 10.0.0.0/24 IBGP sessions 172.16.42.0/24 EBGP sessions with AS 65100","title":"Configuration Tasks"},{"location":"session/9-dynamic/#verification","text":"You can use the netlab validate command if you\u2019ve installed netlab release 1.8.3 or later and use Arista EOS, Cumulus Linux, or FRR on S1, S2, C1, and C2. The validation tests check: The state of the BGP session between those routers and the Hub router. Whether those routers receive the loopback IPv4 prefix from the Hub router. You can also validate your work on the Hub router: Check the state of the BGP sessions with a command similar to show ip bgp summary . You should see four BGP neighbors, two from AS 65000 and two from AS 65100. $ netlab connect -q hub --show ip bgp sum IPv4 Unicast Summary: BGP router identifier 10.0.0.1, local AS number 65000 VRF default vrf-id 0 BGP table version 3 RIB entries 5, using 480 bytes of memory Peers 4, using 52 KiB of memory Peer groups 2, using 128 bytes of memory Neighbor V AS MsgRcvd MsgSent TblVer InQ OutQ Up/Down State/PfxRcd PfxSnt Desc *s1(172.16.42.2) 4 65100 42 43 3 0 0 00:01:52 1 3 FRRouting/10.0.1_git *s2(172.16.42.3) 4 65100 42 43 3 0 0 00:01:52 1 3 FRRouting/10.0.1_git *c1(10.0.0.4) 4 65000 44 47 3 0 0 00:02:05 0 3 FRRouting/10.0.1_git *c2(10.0.0.5) 4 65000 44 47 3 0 0 00:02:04 0 3 FRRouting/10.0.1_git Total number of neighbors 4 * - dynamic neighbor 4 dynamic neighbor(s), limit 100 Check the BGP table on the Hub router with a command similar to show ip bgp . You should see the prefixes advertised by S1 and S2 as well as the local prefix: $ netlab connect -q hub --show ip bgp BGP table version is 3, local router ID is 10.0.0.1, vrf id 0 Default local pref 100, local AS 65000 Status codes: s suppressed, d damped, h history, * valid, > best, = multipath, i internal, r RIB-failure, S Stale, R Removed Nexthop codes: @NNN nexthop's vrf id, < announce-nh-self Origin codes: i - IGP, e - EGP, ? - incomplete RPKI validation codes: V valid, I invalid, N Not found Network Next Hop Metric LocPrf Weight Path *> 10.0.0.2/32 172.16.42.2(s1) 0 0 65100 i *> 10.0.0.3/32 172.16.42.3(s2) 0 0 65100 i *> 192.168.42.0/24 0.0.0.0(hub) 0 32768 i Displayed 3 routes and 3 total paths","title":"Verification"},{"location":"session/9-dynamic/#impact-of-bgp-session-loss","text":"A router using dynamic BGP neighbors usually removes all neighbor-related information once a BGP session with the neighbor is lost. You can shut down a BGP neighbor on one of the other routers to explore how the hub router reacts to the BGP session loss. Tip You can use the netlab config command to shut down the BGP session with the Hub router if you\u2019re running Cumulus Linux, FRR, or Arista EOS on the other routers: Use netlab config disable --limit C1 1 to shut down the BGP session Use netlab config enable --limit C1 to reenable it. For example, after shutting down the BGP session with the Hub router on C1, you could observe the following BGP logging messages on the Hub router running Arista EOS: Bgp: %BGP-3-NOTIFICATION: received from neighbor 10.0.0.4 (VRF default AS 65000) 6/2 (Cease/administrative shutdown) reason: Bgp: %BGP-5-ADJCHANGE: peer 10.0.0.4 (VRF default AS 65000) old state Established event RecvNotify new state Idle However, even though the BGP log message claims the BGP neighbor is now in the Idle state, the neighbor is no longer visible in the list of BGP neighbors (printout from Arista EOS): hub#show ip bgp summary BGP summary information for VRF default Router identifier 10.0.0.1, local AS number 65000 Neighbor Status Codes: m - Under maintenance Neighbor V AS MsgRcvd MsgSent InQ OutQ Up/Down State PfxRcd PfxAcc 10.0.0.5 4 65000 1881 2210 0 0 01:33:54 Estab 1 1 172.16.42.2 4 65100 1832 2146 0 0 01:31:15 Estab 1 1 172.16.42.3 4 65100 1832 2147 0 0 01:31:15 Estab 1 1 Warning Do not use dynamic BGP neighbors if you want to use BGP operational data (for example, show command printouts or SNMP information) to find failed BGP sessions.","title":"Impact of BGP Session Loss"},{"location":"session/9-dynamic/#reference-information","text":"The following information might help you if you plan to build custom lab infrastructure:","title":"Reference Information"},{"location":"session/9-dynamic/#req","text":"Use any device supported by the netlab BGP and OSPF configuration modules for the lab routers. If you run Arista EOS, Cumulus Linux, or FRR on S1, S2, C1, and C2, you can use the netlab config command to turn BGP sessions on or off. You will have to do that manually on other devices. You can do automated lab validation with Arista EOS, Cumulus Linux, or FRR running on S1, S2, C1, and C2. Automated lab validation requires netlab release 1.8.3 or higher. Git repository contains initial device configurations for Cumulus Linux.","title":"Device Requirements"},{"location":"session/9-dynamic/#lab-wiring","text":"Point-to-Point Links Origin Device Origin Port Destination Device Destination Port hub Ethernet2 c1 swp1 hub Ethernet3 c2 swp1 c1 swp2 c2 swp2 LAN Links Origin Device Origin Port Link Name (NET) Description hub Ethernet1 rs_1 Carrier Ethernet s1 swp1 rs_1 Carrier Ethernet s2 swp1 rs_1 Carrier Ethernet","title":"Lab Wiring"},{"location":"session/9-dynamic/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description c1 10.0.0.4/32 Loopback swp1 10.1.0.1/30 c1 -> hub swp2 10.1.0.9/30 c1 -> c2 c2 10.0.0.5/32 Loopback swp1 10.1.0.5/30 c2 -> hub swp2 10.1.0.10/30 c2 -> c1 hub 10.0.0.1/32 Loopback Ethernet1 172.16.42.1/24 Carrier Ethernet Ethernet2 10.1.0.2/30 hub -> c1 Ethernet3 10.1.0.6/30 hub -> c2 s1 10.0.0.2/32 Loopback swp1 172.16.42.2/24 Carrier Ethernet s2 10.0.0.3/32 Loopback swp1 172.16.42.3/24 Carrier Ethernet Replace C1 with any other node name if needed \u21a9","title":"Lab Addressing"}]}